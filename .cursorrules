# Quy tắc Code cho Student Management System

## 1. KIẾN TRÚC DỰ ÁN

### Backend Structure
- `src/backend/database/models/` - Sequelize models
- `src/services/` - Business logic services  
- `src/repositories/` - Data access layer
- `src/controllers/` - API controllers
- `src/routes/` - Express routes
- `src/middleware/` - Custom middleware

### Frontend
- `src/components/` - React components (AdminJS)
- `src/config/` - AdminJS configurations

## 2. NAMING CONVENTIONS

### Database
- **Tables**: PascalCase singular (Grade, Student, User)
- **Primary Key**: `id` (auto-increment INTEGER)
- **Foreign Keys**: `{model}Id` (studentId, subjectId)
- **Columns**: camelCase (gradeStatus, txScore, dkScore)
- **Status fields**: lowercase with underscore (draft, pending_review, approved_tx_dk)

### Files
- **Models**: PascalCase (Grade.js, GradeStateTransition.js)
- **Services**: PascalCase with "Service" suffix (GradeStateService.js)
- **Controllers**: PascalCase with "Controller" suffix (GradeApiController.js)
- **Components**: PascalCase (TeacherGradeEntryComponent.jsx)

### Code
- **Classes**: PascalCase
- **Functions/Methods**: camelCase
- **Constants**: UPPER_SNAKE_CASE
- **Private methods**: prefix with underscore `_methodName`

## 3. DATABASE RULES

### Models phải match với Database Schema
```javascript
// ĐÚNG - Check database schema trước
const Grade = sequelize.define('Grade', {
  id: { type: DataTypes.INTEGER, primaryKey: true }, // NOT gradeId
  gradeStatus: DataTypes.STRING(50) // NOT status
});

// SAI - Tự nghĩ tên column
```

### Foreign Keys
```javascript
// ĐÚNG
gradeId: {
  references: { model: 'Grades', key: 'id' } // key là 'id', NOT 'gradeId'
}
```

## 4. SERVICE LAYER PATTERNS

### Services phải là static class
```javascript
class GradeStateService {
  static async submitForReview(gradeId, userId, reason) {
    // Business logic here
  }
}
```

### Error Handling
```javascript
try {
  // Logic
  console.log(`✅ Success message`);
  return result;
} catch (error) {
  console.error(`❌ Error message:`, error);
  throw error; // Re-throw để controller xử lý
}
```

### Logging Format
- ✅ Success: `console.log(\`✅ Action completed\`)`
- ❌ Error: `console.error(\`❌ Action failed:\`, error)`
- 🔍 Debug: `console.log('🔍 Variable:', value)`
- 📤 API: `console.log('[ADMIN-API] GET /path - User: email')`

## 5. API ROUTES PATTERNS

### Route Structure
```javascript
router.post('/endpoint', async (req, res) => {
  try {
    // 1. Extract params
    const { param1, param2 } = req.body;
    const userId = req.session?.adminUser?.id;
    
    // 2. Validate
    if (!userId) {
      return res.status(401).json({ 
        success: false, 
        message: 'Chưa đăng nhập' 
      });
    }
    
    // 3. Call service
    const result = await Service.method(param1, userId);
    
    // 4. Return success
    res.json({
      success: true,
      message: 'Thành công',
      data: result
    });
    
  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({
      success: false,
      message: error.message || 'Lỗi server'
    });
  }
});
```

## 6. GRADE STATE WORKFLOW

### States
1. `draft` - Teacher nhập TX/ĐK
2. `pending_review` - Đã submit, chờ admin duyệt
3. `approved_tx_dk` - Admin đã duyệt TX/ĐK
4. `final_entered` - Đã nhập điểm thi
5. `finalized` - Hoàn tất, publish cho SV

### Field Locking
- `txLocked` - Lock điểm TX
- `dkLocked` - Lock điểm ĐK  
- `finalLocked` - Lock điểm thi

## 7. REACT COMPONENTS (AdminJS)

### State Management
```javascript
const [gradeStatuses, setGradeStatuses] = useState({});
// Structure: { studentId: { gradeId, gradeStatus, lockStatus, ... } }
```

### Update State After API Call
```javascript
if (result.results && result.results.details) {
  const newStatuses = { ...gradeStatuses };
  result.results.details.forEach(detail => {
    newStatuses[detail.studentId] = {
      gradeId: detail.gradeId,
      gradeStatus: 'draft',
      // ...
    };
  });
  setGradeStatuses(newStatuses);
}
```

## 8. DEBUGGING

### Console Logs Format
```javascript
console.log('🔍 Function called with:', { param1, param2 });
console.log('📊 Current state:', stateName);
console.log('✅ Success:', result);
console.error('❌ Error:', error.message);
```

### Required Logs
- API entry: Request params
- Database queries: WHERE conditions
- State changes: Before/After values
- Errors: Full error message + context

## 9. VALIDATION RULES

### Before Save
- Check required fields not null
- Validate score ranges (0-10)
- Check foreign key exists
- Validate state transitions

### Before Submit
```javascript
// Ít nhất phải có TX hoặc ĐK
if (!grade.txScore && !grade.dkScore) {
  throw new Error('Phải nhập ít nhất điểm TX hoặc ĐK');
}
```

## 10. VERSION CONTROL

### History Tracking
- Save to GradeHistory before each update
- Increment version number
- Log who changed what

```javascript
await GradeHistory.create({
  gradeId: grade.id,
  version: grade.version,
  txScore: grade.txScore,
  // ... all fields
  editedBy: userId,
  changeDescription: 'What changed'
});
```

## 11. TRANSACTION PATTERNS

### Use Transaction for Multi-Step Operations
```javascript
const transaction = await sequelize.transaction();
try {
  // Step 1
  await Model1.create({ ... }, { transaction });
  // Step 2
  await Model2.update({ ... }, { transaction });
  
  await transaction.commit();
} catch (error) {
  await transaction.rollback();
  throw error;
}
```

## 12. COMMON MISTAKES TO AVOID

❌ **ĐỪNG LÀM**:
- Dùng `grade.gradeId` → Dùng `grade.id` (check model first!)
- Dùng `fromStatus/toStatus` → Check database: `fromState/toState`
- Tự nghĩ tên column → Luôn check `DESCRIBE table_name` trước
- So sánh string case-sensitive → Dùng `.toLowerCase()`
- Return object trong error message → Dùng `.label` hoặc `.message`
- Tạo file documentation → User yêu cầu: ĐỪNG tạo docs!

✅ **NÊN LÀM**:
- Check database schema trước khi code
- Check primary key name (id vs gradeId vs grade_id)
- Match column names exactly with database
- Handle case-insensitive string comparison
- Re-throw errors từ service lên controller
- Add comprehensive logging
- Update React state after API calls

## 13. TESTING CHECKLIST

Trước khi hoàn thành task:
- [ ] Code chạy không lỗi syntax
- [ ] Model fields match database columns
- [ ] Foreign keys reference đúng
- [ ] API response có đủ data cần thiết
- [ ] React state được update sau API call
- [ ] Console logs đầy đủ để debug
- [ ] Error messages rõ ràng (không có [object Object])

## 14. USER PREFERENCES

- ❌ **KHÔNG** tạo file documentation/hướng dẫn
- ✅ **CHỈ** fix code trực tiếp
- ✅ Explain ngắn gọn trong comment hoặc chat
- ✅ Add logging để user tự debug
