/**
 * Teacher Permission Service
 * Business logic cho qu·∫£n l√Ω quy·ªÅn nh·∫≠p ƒëi·ªÉm
 */

import { TeacherPermission, Enrollment, User, Student, Class, Subject, Cohort, Semester, Grade, GradeRetake } from '../database/index.js';
import { Op } from 'sequelize';

class TeacherPermissionService {
  /**
   * Ki·ªÉm tra user c√≥ quy·ªÅn nh·∫≠p ƒëi·ªÉm cho enrollment kh√¥ng
   * @param {number} userId - ID c·ªßa user
   * @param {number} enrollmentId - ID c·ªßa enrollment
   * @returns {Promise<boolean>}
   */
  static async checkGradeEntryPermission(userId, enrollmentId) {
    try {
      // L·∫•y th√¥ng tin enrollment
      const enrollment = await Enrollment.findByPk(enrollmentId);
      if (!enrollment) {
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y enrollment #${enrollmentId}`);
        return false;
      }

      // Ki·ªÉm tra user c√≥ quy·ªÅn kh√¥ng
      const hasPermission = await TeacherPermission.checkPermission(userId, enrollmentId);
      
      if (hasPermission) {
        console.log(`‚úÖ User #${userId} c√≥ quy·ªÅn nh·∫≠p ƒëi·ªÉm cho enrollment #${enrollmentId}`);
      } else {
        console.log(`üö´ User #${userId} KH√îNG c√≥ quy·ªÅn nh·∫≠p ƒëi·ªÉm cho enrollment #${enrollmentId}`);
      }

      return hasPermission;
    } catch (error) {
      console.error('‚ùå L·ªói khi ki·ªÉm tra quy·ªÅn:', error);
      return false;
    }
  }

  /**
   * L·∫•y danh s√°ch enrollments m√† user c√≥ quy·ªÅn nh·∫≠p ƒëi·ªÉm
   * @param {number} userId - ID c·ªßa user
   * @param {object} filters - C√°c filter t√πy ch·ªçn (semesterId, classId, subjectId)
   * @returns {Promise<Array>}
   */
  static async getPermittedEnrollments(userId, filters = {}) {
    try {
      // L·∫•y t·∫•t c·∫£ quy·ªÅn active c·ªßa user
      const permissions = await TeacherPermission.getActivePermissions(userId);
      
      if (!permissions || permissions.length === 0) {
        console.log(`‚ö†Ô∏è User #${userId} kh√¥ng c√≥ quy·ªÅn n√†o`);
        return [];
      }

      // Build ƒëi·ªÅu ki·ªán query OR cho t·ª´ng permission
      const permissionConditions = permissions.map(perm => {
        const condition = {};

        // Semester lu√¥n ph·∫£i match
        condition.semesterId = perm.semesterId;

        // Class: NULL = t·∫•t c·∫£, kh√¥ng NULL = ph·∫£i match
        if (perm.classId) {
          condition.classId = perm.classId;
        }

        // Subject: NULL = t·∫•t c·∫£, kh√¥ng NULL = ph·∫£i match
        if (perm.subjectId) {
          condition.subjectId = perm.subjectId;
        }

        // Cohort: NULL = t·∫•t c·∫£, kh√¥ng NULL = ph·∫£i match
        if (perm.cohortId) {
          condition.cohortId = perm.cohortId;
        }

        return condition;
      });

      // Th√™m filters t·ª´ user (n·∫øu c√≥)
      const baseCondition = {
        status: 'active', // Ch·ªâ l·∫•y enrollments ƒëang active
        ...filters // semesterId, classId, subjectId t·ª´ filters
      };

      // Query enrollments v·ªõi ƒëi·ªÅu ki·ªán OR
      const enrollments = await Enrollment.findAll({
        where: {
          ...baseCondition,
          [Op.or]: permissionConditions
        },
        include: [
          { model: Student, as: 'Student' },
          { model: Class, as: 'Class' },
          { model: Subject, as: 'Subject' },
          { model: Cohort, as: 'Cohort' },
          { model: Semester, as: 'Semester' },
          { 
            model: Grade, 
            as: 'Grades',
            include: [
              { 
                model: GradeRetake, 
                as: 'retakes' 
              }
            ]
          }
        ],
        order: [
          ['classId', 'ASC'],
          ['subjectId', 'ASC']
        ]
      });

      console.log(`‚úÖ User #${userId} c√≥ quy·ªÅn nh·∫≠p ƒëi·ªÉm cho ${enrollments.length} enrollments`);
      return enrollments;

    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch enrollments:', error);
      return [];
    }
  }

  /**
   * L·∫•y danh s√°ch subjects m√† user c√≥ quy·ªÅn nh·∫≠p ƒëi·ªÉm trong m·ªôt class
   * @param {number} userId - ID c·ªßa user
   * @param {number} classId - ID c·ªßa class
   * @param {number} semesterId - ID c·ªßa semester (optional)
   * @returns {Promise<Array>}
   */
  static async getPermittedSubjects(userId, classId, semesterId = null) {
    try {
      // L·∫•y t·∫•t c·∫£ quy·ªÅn active c·ªßa user
      const permissions = await TeacherPermission.getActivePermissions(userId);

      if (!permissions || permissions.length === 0) {
        console.log(`‚ö†Ô∏è User #${userId} kh√¥ng c√≥ quy·ªÅn n√†o`);
        return [];
      }

      // Build ƒëi·ªÅu ki·ªán query OR cho t·ª´ng permission
      const permissionConditions = permissions.map(perm => {
        const condition = {};

        // Semester lu√¥n ph·∫£i match (n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh)
        if (semesterId) {
          condition.semesterId = semesterId;
        } else {
          condition.semesterId = perm.semesterId;
        }

        // Class: NULL = t·∫•t c·∫£, kh√¥ng NULL = ph·∫£i match
        if (perm.classId) {
          condition.classId = perm.classId;
        }

        // Subject: NULL = t·∫•t c·∫£, kh√¥ng NULL = ph·∫£i match
        if (perm.subjectId) {
          condition.subjectId = perm.subjectId;
        }

        // Cohort: NULL = t·∫•t c·∫£, kh√¥ng NULL = ph·∫£i match
        if (perm.cohortId) {
          condition.cohortId = perm.cohortId;
        }

        return condition;
      });

      // Query enrollments v·ªõi ƒëi·ªÅu ki·ªán OR, ch·ªâ l·∫•y c·ªßa class ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
      const enrollments = await Enrollment.findAll({
        where: {
          classId: parseInt(classId),
          status: 'active',
          [Op.or]: permissionConditions
        },
        include: [{
          model: Subject,
          as: 'subject',
          attributes: ['id', 'subjectCode', 'subjectName', 'credits', 'description', 'category', 'isRequired']
        }],
        attributes: ['subjectId']
      });

      // Lo·∫°i b·ªè duplicate subjects
      const uniqueSubjects = [];
      const seenSubjectIds = new Set();

      enrollments.forEach(enrollment => {
        if (enrollment.subject && !seenSubjectIds.has(enrollment.subject.id)) {
          seenSubjectIds.add(enrollment.subject.id);
          uniqueSubjects.push({
            id: enrollment.subject.id,
            params: {
              subjectId: enrollment.subject.id,
              subjectCode: enrollment.subject.subjectCode,
              subjectName: enrollment.subject.subjectName,
              credits: enrollment.subject.credits,
              description: enrollment.subject.description,
              category: enrollment.subject.category,
              isRequired: enrollment.subject.isRequired
            }
          });
        }
      });

      console.log(`‚úÖ User #${userId} c√≥ quy·ªÅn nh·∫≠p ƒëi·ªÉm cho ${uniqueSubjects.length} subjects trong class #${classId}`);
      return uniqueSubjects;

    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y permitted subjects:', error);
      return [];
    }
  }

  /**
   * T·∫°o quy·ªÅn m·ªõi cho user
   * @param {object} permissionData - D·ªØ li·ªáu quy·ªÅn
   * @param {number} createdBy - ID c·ªßa admin t·∫°o quy·ªÅn
   * @returns {Promise<object>}
   */
  static async createPermission(permissionData, createdBy) {
    try {
      // Validate user t·ªìn t·∫°i
      const user = await User.findByPk(permissionData.userId);
      if (!user) {
        throw new Error(`User #${permissionData.userId} kh√¥ng t·ªìn t·∫°i`);
      }

      // Validate role = teacher
      if (user.role !== 'teacher') {
        throw new Error(`User #${permissionData.userId} kh√¥ng ph·∫£i l√† gi·∫£ng vi√™n`);
      }

      // T·∫°o permission
      const permission = await TeacherPermission.create({
        ...permissionData,
        createdBy
      });

      console.log(`‚úÖ ƒê√£ t·∫°o quy·ªÅn #${permission.id} cho user #${permissionData.userId}`);
      return permission;

    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o quy·ªÅn:', error);
      throw error;
    }
  }

  /**
   * C·∫≠p nh·∫≠t quy·ªÅn
   * @param {number} permissionId - ID c·ªßa quy·ªÅn
   * @param {object} updateData - D·ªØ li·ªáu c·∫ßn c·∫≠p nh·∫≠t
   * @returns {Promise<object>}
   */
  static async updatePermission(permissionId, updateData) {
    try {
      const permission = await TeacherPermission.findByPk(permissionId);
      if (!permission) {
        throw new Error(`Quy·ªÅn #${permissionId} kh√¥ng t·ªìn t·∫°i`);
      }

      await permission.update(updateData);
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t quy·ªÅn #${permissionId}`);
      
      return permission;

    } catch (error) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t quy·ªÅn:', error);
      throw error;
    }
  }

  /**
   * Thu h·ªìi quy·ªÅn (ƒë·∫∑t status = revoked)
   * @param {number} permissionId - ID c·ªßa quy·ªÅn
   * @returns {Promise<object>}
   */
  static async revokePermission(permissionId) {
    try {
      const permission = await TeacherPermission.findByPk(permissionId);
      if (!permission) {
        throw new Error(`Quy·ªÅn #${permissionId} kh√¥ng t·ªìn t·∫°i`);
      }

      await permission.update({ status: 'revoked' });
      console.log(`üö´ ƒê√£ thu h·ªìi quy·ªÅn #${permissionId}`);
      
      return permission;

    } catch (error) {
      console.error('‚ùå L·ªói khi thu h·ªìi quy·ªÅn:', error);
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch quy·ªÅn c·ªßa user
   * @param {number} userId - ID c·ªßa user
   * @param {string} status - Filter theo status (active/expired/revoked/all)
   * @returns {Promise<Array>}
   */
  static async getUserPermissions(userId, status = 'active') {
    try {
      const whereClause = { userId };
      
      if (status !== 'all') {
        whereClause.status = status;
      }

      const permissions = await TeacherPermission.findAll({
        where: whereClause,
        include: [
          { model: Class, as: 'Class' },
          { model: Subject, as: 'Subject' },
          { model: Cohort, as: 'Cohort' },
          { model: Semester, as: 'Semester' }
        ],
        order: [['validTo', 'DESC']]
      });

      return permissions;

    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch quy·ªÅn:', error);
      return [];
    }
  }

  /**
   * Ki·ªÉm tra v√† c·∫≠p nh·∫≠t quy·ªÅn h·∫øt h·∫°n (ch·∫°y b·∫±ng cron job)
   * @returns {Promise<number>} S·ªë l∆∞·ª£ng quy·ªÅn ƒë√£ c·∫≠p nh·∫≠t
   */
  static async checkAndUpdateExpiredPermissions() {
    try {
      const [updatedCount] = await TeacherPermission.update(
        { status: 'expired' },
        {
          where: {
            status: 'active',
            validTo: {
              [Op.lt]: new Date()
            }
          }
        }
      );

      if (updatedCount > 0) {
        console.log(`‚è±Ô∏è ƒê√£ c·∫≠p nh·∫≠t ${updatedCount} quy·ªÅn h·∫øt h·∫°n`);
      }

      return updatedCount;

    } catch (error) {
      console.error('‚ùå L·ªói khi ki·ªÉm tra quy·ªÅn h·∫øt h·∫°n:', error);
      return 0;
    }
  }
}

export default TeacherPermissionService;
