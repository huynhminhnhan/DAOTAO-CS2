/**
 * Class Resource Configuration
 * C·∫•u h√¨nh resource Class cho l·ªõp h·ªçc c·ªë ƒë·ªãnh su·ªët kh√≥a
 */
import { Class } from '../backend/database/index.js';
import { getTeacherManagedClassIds } from '../middleware/teacherPermissions.js';

const ClassResource = {
  resource: Class,
  options: {
    parent: {
      name: 'üè´ Qu·∫£n l√Ω L·ªõp h·ªçc',
      icon: 'Home'
    },
    
    // C·∫•u h√¨nh hi·ªÉn th·ªã list
    listProperties: ['classCode', 'className', 'cohortId', 'homeroomTeacherId', 'startYear', 'endYear', 'currentStudents', 'maxStudents', 'status'],
    
    // C·∫•u h√¨nh edit/new form
    editProperties: [
      'classCode', 'className', 'cohortId', 'homeroomTeacherId', 'trainingTeacherId', 'examTeacherId',
      'startYear', 'endYear', 'maxStudents', 'status'
    ],
    
    // C·∫•u h√¨nh show (chi ti·∫øt)
    showProperties: [
      'classCode', 'className', 'cohortId', 'homeroomTeacherId', 'trainingTeacherId', 'examTeacherId',
      'startYear', 'endYear', 'maxStudents', 'currentStudents', 'status',
      'createdAt', 'updatedAt' 
    ],
    
    // C·∫•u h√¨nh filter
    filterProperties: ['classCode', 'className', 'cohortId', 'homeroomTeacherId', 'startYear', 'endYear', 'status'],
    
    // C·∫•u h√¨nh properties
    properties: {
      classCode: { 
        isTitle: true, 
        isRequired: true,
        position: 1,
        label: 'M√£ l·ªõp', 
        description: 'M√£ l·ªõp h·ªçc duy nh·∫•t (VD: K22CNTT1)'
      },
      className: { 
        isRequired: true,
        isTitle: true,
        position: 2,
        label: 'T√™n l·ªõp', 
        description: 'T√™n l·ªõp h·ªçc ƒë·∫ßy ƒë·ªß'
      },
      cohortId: {
        isRequired: true,
        position: 2.5,
        type: 'reference',
        reference: 'Cohorts',
        label: 'üéì Kh√≥a h·ªçc',
        description: 'Kh√≥a h·ªçc m√† l·ªõp n√†y thu·ªôc v·ªÅ',
        isVisible: {
          list: true,
          filter: true,
          show: true,
          edit: true,
          new: true

        },
        // Custom options for better display
        availableValues: async () => {
          try {
            const { Cohort } = await import('../backend/database/index.js');
            const cohorts = await Cohort.findAll({
              where: { status: 'active' },
              order: [['startYear', 'DESC'], ['name', 'ASC']]
            });
            console.log(cohorts);
            return cohorts.map(cohort => ({
              value: cohort.cohortId,
              label: `${cohort.name} (${cohort.startYear}-${cohort.endYear})`
            }));
          } catch (error) {
            console.error('Error loading cohorts:', error);
            return [];
          }
        }
      },
      homeroomTeacherId: { 
        isRequired: true,
        position: 3,
        label: 'Gi√°o vi√™n ch·ªß nhi·ªám',
        description: 'Gi√°o vi√™n ch·ªß nhi·ªám',
        reference: 'teachers'
      },
      trainingTeacherId: { 
        isRequired: true,
        position: 4,
        label: 'Gi√°o vi√™n ƒë√†o t·∫°o',
        description: 'Gi√°o vi√™n ƒë√†o t·∫°o',
        reference: 'teachers'
      },
      examTeacherId: { 
        isRequired: true,
        position: 5,
        label: 'Gi√°o vi√™n kh·∫£o th√≠',
        description: 'Gi√°o vi√™n kh·∫£o th√≠',
        reference: 'teachers'
      },
      startYear: {
        type: 'number',
        isRequired: true,
        position: 6,
        label: 'NƒÉm b·∫Øt ƒë·∫ßu',
        description: 'NƒÉm b·∫Øt ƒë·∫ßu kh√≥a h·ªçc'
      },
      endYear: {
        type: 'number',
        isRequired: true,
        position: 7,
        label: 'NƒÉm k·∫øt th√∫c',
        description: 'NƒÉm k·∫øt th√∫c kh√≥a h·ªçc'
      },
      maxStudents: {
        type: 'number',
        position: 8,
        label: 'Sƒ© s·ªë t·ªëi ƒëa',
        description: 'S·ªë sinh vi√™n t·ªëi ƒëa'
      },
      currentStudents: {
        type: 'number',
        isVisible: { list: true, filter: false, show: true, edit: false },
        position: 9,
        label: 'S·ªë sinh vi√™n hi·ªán t·∫°i',
        description: 'S·ªë sinh vi√™n hi·ªán t·∫°i'
      },
      status: {
        type: 'select',
        availableValues: [
          { value: 'active', label: '‚úÖ ƒêang ho·∫°t ƒë·ªông' },
          { value: 'inactive', label: '‚è∏Ô∏è T·∫°m ngh·ªâ' },
          { value: 'graduated', label: 'üéì ƒê√£ t·ªët nghi·ªáp' }
        ],
        position: 10,
        label: 'Tr·∫°ng th√°i',
        description: 'Tr·∫°ng th√°i l·ªõp h·ªçc'
      },
      createdAt: {
        isVisible: { list: false, filter: false, show: true, edit: false }
      },
      updatedAt: {
        isVisible: { list: false, filter: false, show: true, edit: false }
      }
    },
    
    // Layout form v√† custom actions
    actions: {
      list: {
        isAccessible: true, // Cho ph√©p c·∫£ admin v√† teacher
        before: async (request, context) => {
          const { currentAdmin } = context;
          
          console.log('[ClassResource] List action - User:', currentAdmin?.email, 'Role:', currentAdmin?.role);
          
          // Admin: Auto-filter by cohort if specified
          if (currentAdmin?.role !== 'teacher') {
            const { query } = request;
            if (query?.cohortFilter) {
              request.query = {
                ...request.query,
                'filters.cohortId': query.cohortFilter
              };
            }
          }
          
          return request;
        },
        after: async (response, request, context) => {
          const { currentAdmin } = context;
          
          // N·∫øu l√† teacher, l·ªçc records d·ª±a tr√™n permissions
          if (currentAdmin?.role === 'teacher') {
            console.log('[ClassResource] Applying teacher filter in AFTER hook');
            
            const allowedClassIds = await getTeacherManagedClassIds(currentAdmin.id);
            
            console.log('[ClassResource] Allowed class IDs:', allowedClassIds);
            console.log('[ClassResource] Total records before filter:', response.records.length);
            
            // Debug: In ra structure c·ªßa record ƒë·∫ßu ti√™n
            if (response.records.length > 0) {
              console.log('[ClassResource] First record keys:', Object.keys(response.records[0]));
              console.log('[ClassResource] First record sample:', JSON.stringify(response.records[0], null, 2));
            }
            
            // N·∫øu c√≥ quy·ªÅn v·ªõi t·∫•t c·∫£
            if (allowedClassIds === 'all') {
              console.log('[ClassResource] Teacher has access to ALL classes');
              return response;
            }
            
            // N·∫øu kh√¥ng c√≥ quy·ªÅn n√†o
            if (allowedClassIds.length === 0) {
              console.log('[ClassResource] Teacher has NO permissions');
              response.records = [];
              response.meta.total = 0;
              return response;
            }
            
            // Filter records - th·ª≠ nhi·ªÅu c√°ch l·∫•y ID
            const allowedIdsSet = new Set(allowedClassIds);
            const filteredRecords = response.records.filter(record => {
              let classId = null;
              
              if (record.params && record.params.id) {
                classId = record.params.id;
              } else if (record.id) {
                classId = record.id;
              } else if (record._id) {
                classId = record._id;
              }
              
              // Convert to number ƒë·ªÉ so s√°nh (AdminJS c√≥ th·ªÉ tr·∫£ v·ªÅ string)
              const classIdNum = parseInt(classId);
              const isAllowed = allowedIdsSet.has(classIdNum);
              
              console.log(`[ClassResource] Checking record - ID: ${classId} (type: ${typeof classId}), Num: ${classIdNum}, Allowed: ${isAllowed}`);
              
              return isAllowed;
            });
            
            console.log('[ClassResource] Filtered records:', filteredRecords.length);
            console.log('[ClassResource] Filtered IDs:', filteredRecords.map(r => r.params?.id || r.id || r._id));
            
            response.records = filteredRecords;
            response.meta.total = filteredRecords.length;
          }
          
          return response;
        }
      },
      // Search action for reference/autocomplete
      search: {
        before: async (request, context) => {
          // Teacher permissions now managed via TeacherPermission model
          // No filtering needed here
          return request;
        }
      },
      edit: {
        isAccessible: ({ currentAdmin }) => currentAdmin && currentAdmin.role === 'admin',
        layout: [
          // H√†ng 1: M√£ l·ªõp v√† T√™n l·ªõp
          [{ flexDirection: 'row', flex: true }, [
            ['classCode', { flexGrow: 1, marginRight: 'default' }],
            ['className', { flexGrow: 2 }]
          ]],
          // H√†ng 2: Kh√≥a h·ªçc (ri√™ng m·ªôt h√†ng ƒë·ªÉ n·ªïi b·∫≠t)
          [{ flexDirection: 'row', flex: true }, [
            ['cohortId', { flexGrow: 1 }]
          ]],
          // H√†ng 3: Gi√°o vi√™n ch·ªß nhi·ªám v√† ƒë√†o t·∫°o
          [{ flexDirection: 'row', flex: true }, [
            ['homeroomTeacherId', { flexGrow: 1, marginRight: 'default' }],
            ['trainingTeacherId', { flexGrow: 1 }]
          ]],
          // H√†ng 4: Gi√°o vi√™n kh·∫£o th√≠ v√† NƒÉm b·∫Øt ƒë·∫ßu
          [{ flexDirection: 'row', flex: true }, [
            ['examTeacherId', { flexGrow: 1, marginRight: 'default' }],
            ['startYear', { flexGrow: 1 }]
          ]],
          // H√†ng 5: NƒÉm k·∫øt th√∫c v√† Sƒ© s·ªë t·ªëi ƒëa
          [{ flexDirection: 'row', flex: true }, [
            ['endYear', { flexGrow: 1, marginRight: 'default' }],
            ['maxStudents', { flexGrow: 1 }]
          ]],
          // H√†ng 6: Tr·∫°ng th√°i
          [{ flexDirection: 'column', flex: true }, [
            ['status', { flexGrow: 1 }]
          ]]
        ]
      },
      new: {
        isAccessible: ({ currentAdmin }) => currentAdmin && currentAdmin.role === 'admin',
        layout: [
          // H√†ng 1: Kh√≥a h·ªçc (ƒë·∫ßu ti√™n ƒë·ªÉ auto-populate)
          [{ flexDirection: 'row', flex: true }, [
            ['cohortId', { flexGrow: 1 }]
          ]],
          // H√†ng 2: M√£ l·ªõp v√† T√™n l·ªõp
          [{ flexDirection: 'row', flex: true }, [
            ['classCode', { flexGrow: 1, marginRight: 'default' }],
            ['className', { flexGrow: 2 }]
          ]],
          // H√†ng 3: Gi√°o vi√™n
          [{ flexDirection: 'row', flex: true }, [
            ['homeroomTeacherId', { flexGrow: 1, marginRight: 'default' }],
            ['trainingTeacherId', { flexGrow: 1 }]
          ]],
          // H√†ng 4: Gi√°o vi√™n kh·∫£o th√≠
          [{ flexDirection: 'row', flex: true }, [
            ['examTeacherId', { flexGrow: 1 }]
          ]],
          // H√†ng 5: NƒÉm h·ªçc
          [{ flexDirection: 'row', flex: true }, [
            ['startYear', { flexGrow: 1, marginRight: 'default' }],
            ['endYear', { flexGrow: 1 }]
          ]],
          // H√†ng 6: Kh√°c
          [{ flexDirection: 'row', flex: true }, [
            ['maxStudents', { flexGrow: 1, marginRight: 'default' }],
            ['status', { flexGrow: 1 }]
          ]]
        ]
      },
      // keep delete admin-only
      delete: { isAccessible: ({ currentAdmin }) => currentAdmin && currentAdmin.role === 'admin' }
    }
  }
};

export default ClassResource;
