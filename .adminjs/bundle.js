(function (React, adminjs, designSystem) {
  'use strict';

  function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

  var React__default = /*#__PURE__*/_interopDefault(React);

  /**
   * Grade Calculation Helper
   * C√°c c√¥ng th·ª©c t√≠nh ƒëi·ªÉm d√πng chung cho to√†n b·ªô h·ªá th·ªëng
   * Author: Grade Management System
   * Date: 2025-09-06
   */

  /**
   * H·ªá s·ªë ƒëi·ªÉm theo quy ƒë·ªãnh
   */
  const GRADE_COEFFICIENTS = {
    TX: 1,
    // Th∆∞·ªùng xuy√™n - h·ªá s·ªë 1
    DK: 2 // ƒêi·ªÅu ki·ªán - h·ªá s·ªë 2
  };

  /**
   * Tr·ªçng s·ªë ƒëi·ªÉm theo quy ƒë·ªãnh m·ªõi
   */
  const GRADE_WEIGHTS = {
    FINAL: 0.6,
    // ƒêi·ªÉm thi cu·ªëi - tr·ªçng s·ªë 60%
    TBKT: 0.4 // ƒêi·ªÉm TBKT - tr·ªçng s·ªë 40%
  };

  /**
   * T√≠nh ƒëi·ªÉm trung b√¨nh ki·ªÉm tra (TBKT)
   * C√¥ng th·ª©c: (TB_TX √ó h·ªá_s·ªë_TX + TB_ƒêK √ó h·ªá_s·ªë_ƒêK) √∑ (h·ªá_s·ªë_TX + h·ªá_s·ªë_ƒêK)
   * 
   * @param {Object} txScore - JSON object ch·ª©a ƒëi·ªÉm TX {tx1: 8.5, tx2: 7.0, ...}
   * @param {Object} dkScore - JSON object ch·ª©a ƒëi·ªÉm ƒêK {dk1: 8.0, dk2: 7.5, ...}
   * @param {Object} options - T√πy ch·ªçn t√≠nh to√°n
   * @param {number} options.txCoefficient - H·ªá s·ªë TX (m·∫∑c ƒë·ªãnh 1)
   * @param {number} options.dkCoefficient - H·ªá s·ªë ƒêK (m·∫∑c ƒë·ªãnh 2)
   * @param {number} options.precision - S·ªë ch·ªØ s·ªë th·∫≠p ph√¢n (m·∫∑c ƒë·ªãnh 2)
   * @returns {number|string} - ƒêi·ªÉm TBKT ho·∫∑c chu·ªói r·ªóng n·∫øu kh√¥ng ƒë·ªß d·ªØ li·ªáu
   */
  const calculateTBKT = (txScore, dkScore, options = {}) => {
    const {
      txCoefficient = GRADE_COEFFICIENTS.TX,
      dkCoefficient = GRADE_COEFFICIENTS.DK,
      precision = 2
    } = options;

    // Extract v√† validate ƒëi·ªÉm TX
    const txValues = Object.values(txScore || {}).filter(val => val !== '' && val !== null && !isNaN(val)).map(val => parseFloat(val));

    // Extract v√† validate ƒëi·ªÉm ƒêK
    const dkValues = Object.values(dkScore || {}).filter(val => val !== '' && val !== null && !isNaN(val)).map(val => parseFloat(val));

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (txValues.length === 0 || dkValues.length === 0) {
      return '';
    }

    // T√≠nh ƒëi·ªÉm trung b√¨nh cho t·ª´ng lo·∫°i
    const txAvg = txValues.reduce((sum, val) => sum + val, 0) / txValues.length;
    const dkAvg = dkValues.reduce((sum, val) => sum + val, 0) / dkValues.length;

    // √Åp d·ª•ng c√¥ng th·ª©c TBKT
    const tbkt = (txAvg * txCoefficient + dkAvg * dkCoefficient) / (txCoefficient + dkCoefficient);

    // L√†m tr√≤n theo precision
    return Math.round(tbkt * Math.pow(10, precision)) / Math.pow(10, precision);
  };

  /**
   * T√≠nh ƒëi·ªÉm trung b√¨nh m√¥n h·ªçc (TBMH)
   * C√¥ng th·ª©c: A = (B √ó 0.6) + (C √ó 0.4)
   * Trong ƒë√≥:
   * - A: ƒêi·ªÉm m√¥n h·ªçc (TBMH) - tr·ªçng s·ªë 100%
   * - B: ƒêi·ªÉm thi cu·ªëi k·ª≥ - tr·ªçng s·ªë 60%
   * - C: ƒêi·ªÉm trung b√¨nh ki·ªÉm tra (TBKT) - tr·ªçng s·ªë 40%
   * 
   * @param {number} tbktScore - ƒêi·ªÉm TBKT (C)
   * @param {number} finalScore - ƒêi·ªÉm thi cu·ªëi k·ª≥ (B)
   * @param {Object} options - T√πy ch·ªçn t√≠nh to√°n
   * @param {number} options.finalWeight - Tr·ªçng s·ªë ƒëi·ªÉm thi (m·∫∑c ƒë·ªãnh 0.6)
   * @param {number} options.tbktWeight - Tr·ªçng s·ªë ƒëi·ªÉm TBKT (m·∫∑c ƒë·ªãnh 0.4)
   * @param {number} options.precision - S·ªë ch·ªØ s·ªë th·∫≠p ph√¢n (m·∫∑c ƒë·ªãnh 2)
   * @returns {number|string} - ƒêi·ªÉm TBMH ho·∫∑c chu·ªói r·ªóng n·∫øu kh√¥ng ƒë·ªß d·ªØ li·ªáu
   */
  const calculateTBMH = (tbktScore, finalScore, options = {}) => {
    const {
      finalWeight = GRADE_WEIGHTS.FINAL,
      // Tr·ªçng s·ªë ƒëi·ªÉm thi 60%
      tbktWeight = GRADE_WEIGHTS.TBKT,
      // Tr·ªçng s·ªë ƒëi·ªÉm TBKT 40%
      precision = 2
    } = options;

    // Validate input
    if (tbktScore === '' || tbktScore === null || tbktScore === undefined || finalScore === '' || finalScore === null || finalScore === undefined || isNaN(tbktScore) || isNaN(finalScore)) {
      return '';
    }
    const tbkt = parseFloat(tbktScore); // C - ƒêi·ªÉm TBKT
    const thi = parseFloat(finalScore); // B - ƒêi·ªÉm thi

    // √Åp d·ª•ng c√¥ng th·ª©c TBMH: A = (B √ó 0.6) + (C √ó 0.4)
    const tbmh = thi * finalWeight + tbkt * tbktWeight;

    // L√†m tr√≤n theo precision
    return Math.round(tbmh * Math.pow(10, precision)) / Math.pow(10, precision);
  };

  /**
   * X·∫øp lo·∫°i h·ªçc l·ª±c d·ª±a v√†o ƒëi·ªÉm TBMH
   * 
   * @param {number} tbmhScore - ƒêi·ªÉm TBMH
   * @returns {string} - X·∫øp lo·∫°i h·ªçc l·ª±c
   */
  const getGradeClassification = tbmhScore => {
    if (tbmhScore === '' || tbmhScore === undefined || tbmhScore === null) {
      return '';
    }
    const score = parseFloat(tbmhScore);
    if (isNaN(score)) return '';
    if (score >= 9.0) return 'Xu·∫•t s·∫Øc';
    if (score >= 8.0) return 'Gi·ªèi';
    if (score >= 7.0) return 'Kh√°';
    if (score >= 5.0) return 'Trung b√¨nh';
    if (score >= 4.0) return 'Y·∫øu';
    return 'K√©m';
  };

  /**
   * Format hi·ªÉn th·ªã c√¥ng th·ª©c t√≠nh ƒëi·ªÉm
   * 
   * @param {Object} coefficients - H·ªá s·ªë {tx, dk} v√† tr·ªçng s·ªë {finalWeight, tbktWeight}
   * @returns {Object} - C√°c c√¥ng th·ª©c ƒë√£ format
   */
  const getFormulaStrings = (coefficients = GRADE_COEFFICIENTS, weights = GRADE_WEIGHTS) => {
    const {
      TX: txCoeff,
      DK: dkCoeff
    } = coefficients;
    const {
      FINAL: finalWeight,
      TBKT: tbktWeight
    } = weights;
    return {
      tbktFormula: `TBKT = (TB_TX √ó ${txCoeff} + TB_ƒêK √ó ${dkCoeff}) √∑ ${txCoeff + dkCoeff}`,
      tbmhFormula: `TBMH = (Thi √ó ${finalWeight}) + (TBKT √ó ${tbktWeight})`,
      coefficientInfo: `H·ªá s·ªë: TX = ${txCoeff}, ƒêK = ${dkCoeff}`,
      weightInfo: `Tr·ªçng s·ªë: Thi = ${finalWeight * 100}%, TBKT = ${tbktWeight * 100}%`
    };
  };

  /**
   * Grade Entry Page Component (Simplified without retake features)
   * Trang nh·∫≠p ƒëi·ªÉm v·ªõi t√≠nh nƒÉng ch·ªçn l·ªõp v√† m√¥n h·ªçc
   * Dynamic columns with JSON format support
   */
  const GradeEntryPage = () => {
    const [cohorts, setCohorts] = React.useState([]);
    const [classes, setClasses] = React.useState([]);
    const [subjects, setSubjects] = React.useState([]);
    const [students, setStudents] = React.useState([]);
    const [selectedCohort, setSelectedCohort] = React.useState('');
    const [selectedClass, setSelectedClass] = React.useState('');
    const [selectedSubject, setSelectedSubject] = React.useState('');
    const [selectedSubjectInfo, setSelectedSubjectInfo] = React.useState(null);
    const [grades, setGrades] = React.useState({});
    const [loading, setLoading] = React.useState(false);
    const [error, setError] = React.useState('');
    const [debugInfo, setDebugInfo] = React.useState('');

    // Dynamic grade configuration
    const [gradeConfig, setGradeConfig] = React.useState({
      txColumns: 1,
      dkColumns: 1,
      maxTxColumns: 10,
      maxDkColumns: 10
    });
    const api = new adminjs.ApiClient();

    // Helper function ƒë·ªÉ chu·∫©n h√≥a format s·ªë
    const normalizeNumber = value => {
      if (value === '' || value === null || value === undefined) {
        return '';
      }
      const num = Number(value);
      return isNaN(num) ? '' : num.toString();
    };

    // Add handlers for dynamic columns
    const addTxColumn = () => {
      if (gradeConfig.txColumns < gradeConfig.maxTxColumns) {
        setGradeConfig(prev => ({
          ...prev,
          txColumns: prev.txColumns + 1
        }));
      }
    };
    const removeTxColumn = () => {
      if (gradeConfig.txColumns > 1) {
        setGradeConfig(prev => ({
          ...prev,
          txColumns: prev.txColumns - 1
        }));
        // Remove the last TX column data for all students
        setGrades(prevGrades => {
          const newGrades = {
            ...prevGrades
          };
          Object.keys(newGrades).forEach(studentId => {
            if (newGrades[studentId].txScore) {
              delete newGrades[studentId].txScore[`tx${gradeConfig.txColumns}`];
            }
          });
          return newGrades;
        });
      }
    };
    const addDkColumn = () => {
      if (gradeConfig.dkColumns < gradeConfig.maxDkColumns) {
        setGradeConfig(prev => ({
          ...prev,
          dkColumns: prev.dkColumns + 1
        }));
      }
    };
    const removeDkColumn = () => {
      if (gradeConfig.dkColumns > 1) {
        setGradeConfig(prev => ({
          ...prev,
          dkColumns: prev.dkColumns - 1
        }));
        // Remove the last DK column data for all students
        setGrades(prevGrades => {
          const newGrades = {
            ...prevGrades
          };
          Object.keys(newGrades).forEach(studentId => {
            if (newGrades[studentId].dkScore) {
              delete newGrades[studentId].dkScore[`dk${gradeConfig.dkColumns}`];
            }
          });
          return newGrades;
        });
      }
    };

    // Load danh s√°ch kh√≥a h·ªçc
    React.useEffect(() => {
      const loadCohorts = async () => {
        try {
          console.log('Loading cohorts...');
          const endpoint = window && window.location && window.location.pathname && window.location.pathname.startsWith('/admin') ? '/admin-api/cohorts' : '/api/cohorts';
          const response = await fetch(endpoint, {
            credentials: 'include'
          });
          const data = await response.json();
          if (data.success) {
            console.log('‚úÖ Cohorts loaded:', data.data.length);
            console.log('üîç Cohorts data sample:', data.data.slice(0, 2));
            const validCohorts = data.data.map(cohort => {
              const cohortId = parseInt(cohort.cohortId);
              if (isNaN(cohortId)) {
                console.warn('‚ö†Ô∏è Invalid cohort ID:', cohort);
                return null;
              }
              return {
                cohortId: cohortId,
                name: cohort.name,
                startYear: cohort.startYear,
                endYear: cohort.endYear
              };
            }).filter(Boolean);
            setCohorts(validCohorts);
          } else {
            console.error('‚ùå Failed to load cohorts:', data.message);
            setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh√≥a h·ªçc: ' + data.message);
          }
        } catch (error) {
          console.error('Error loading cohorts:', error);
          setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh√≥a h·ªçc: ' + error.message);
        }
      };
      loadCohorts();
    }, []);

    // Load danh s√°ch l·ªõp theo kh√≥a h·ªçc
    React.useEffect(() => {
      if (selectedCohort) {
        const loadClassesByCohort = async () => {
          try {
            console.log('Loading classes for cohort:', selectedCohort);
            const endpoint = `/admin-api/classes/by-cohort/${selectedCohort}`;
            const response = await fetch(endpoint, {
              credentials: 'include'
            });
            const data = await response.json();
            if (data.success) {
              console.log('‚úÖ Classes loaded:', data.data.length);
              console.log('üîç Classes data sample:', data.data.slice(0, 2));
              const validClasses = data.data.map(cls => {
                const classId = parseInt(cls.id);
                if (isNaN(classId)) {
                  console.warn('‚ö†Ô∏è Invalid class ID:', cls);
                  return null;
                }
                return {
                  id: classId,
                  params: {
                    classId: classId,
                    className: cls.className,
                    classCode: cls.classCode,
                    academicYear: cls.academicYear,
                    semester: cls.semester,
                    cohortId: cls.cohortId,
                    isRetakeClass: cls.isRetakeClass || false
                  }
                };
              }).filter(Boolean);
              setClasses(validClasses);
              const retakeClasses = validClasses.filter(cls => cls.params.isRetakeClass);
            } else {
              console.error('‚ùå Failed to load classes:', data.message);
              setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªõp: ' + data.message);
            }
          } catch (error) {
            console.error('Error loading classes:', error);
            setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªõp: ' + error.message);
          }
        };
        loadClassesByCohort();
      } else {
        setClasses([]);
      }
    }, [selectedCohort]);

    // Load danh s√°ch m√¥n h·ªçc theo class ƒë√£ ch·ªçn
    React.useEffect(() => {
      const loadSubjectsByClass = async () => {
        if (!selectedClass) {
          setSubjects([]); // Clear subjects when no class selected
          return;
        }
        try {
          console.log('Loading subjects for class:', selectedClass);
          const response = await fetch(`/admin-api/subjects/by-class/${selectedClass}`, {
            credentials: 'include'
          });
          const data = await response.json();
          if (data.success && data.data) {
            const subjects = data.data.map(classSubject => {
              const subject = classSubject.subject;
              const subjectId = parseInt(subject.id || subject.subjectId);
              if (isNaN(subjectId)) {
                console.warn('‚ö†Ô∏è Invalid subject ID in class subjects:', subject);
                return null;
              }
              return {
                id: subjectId,
                params: {
                  subjectId: subjectId,
                  subjectCode: subject.subjectCode,
                  subjectName: subject.subjectName,
                  credits: subject.credits,
                  description: subject.description,
                  category: subject.category,
                  isRequired: subject.isRequired
                }
              };
            }).filter(Boolean);
            console.log('‚úÖ Subjects loaded for class:', subjects.length);
            console.log('üîç Subjects by class sample:', subjects.slice(0, 2));
            setSubjects(subjects);
          } else {
            console.log('‚ÑπÔ∏è No subjects found for class:', selectedClass);
            setSubjects([]);
          }
        } catch (error) {
          console.error('Error loading subjects by class:', error);
          // Fallback to load all subjects
          loadAllSubjects();
        }
      };
      loadSubjectsByClass();
    }, [selectedClass]);

    // Fallback function to load all subjects
    const loadAllSubjects = async () => {
      try {
        console.log('Loading all subjects...');
        let response;
        try {
          response = await api.getRecordInResource('subjects', 'list');
        } catch (e) {
          // Fallback to direct API call if AdminJS client fails
          const res = await fetch('/api/subjects', {
            credentials: 'include'
          });
          const data = await res.json();
          response = {
            data: {
              records: data.subjects || []
            }
          };
        }
        if (response && response.data && response.data.records && response.data.records.length) {
          const subjects = response.data.records.map(record => {
            // Ensure ID is a valid number
            const subjectId = record.id || record.subjectId;
            const parsedId = parseInt(subjectId);
            if (isNaN(parsedId)) {
              console.warn('‚ö†Ô∏è Invalid subject ID found:', record);
              return null; // Skip invalid records
            }
            return {
              id: parsedId,
              params: record.params || {
                subjectId: parsedId,
                subjectCode: record.subjectCode,
                subjectName: record.subjectName,
                credits: record.credits,
                description: record.description,
                category: record.category,
                isRequired: record.isRequired
              }
            };
          }).filter(Boolean); // Remove null entries

          console.log('‚úÖ All subjects loaded as fallback:', subjects.length);
          console.log('üîç All subjects data sample:', subjects.slice(0, 2));
          setSubjects(subjects);
        } else {
          // Direct database query fallback
          const directResponse = await fetch('/api/subjects', {
            credentials: 'include'
          });
          const directData = await directResponse.json();
          if (directData.success && directData.subjects) {
            const subjects = directData.subjects.map(subject => {
              const subjectId = parseInt(subject.subjectId);
              if (isNaN(subjectId)) {
                console.warn('‚ö†Ô∏è Invalid subject ID in direct API:', subject);
                return null;
              }
              return {
                id: subjectId,
                params: subject
              };
            }).filter(Boolean);
            console.log('‚úÖ All subjects loaded from direct API:', subjects.length);
            console.log('üîç All subjects data sample:', subjects.slice(0, 2));
            setSubjects(subjects);
          } else {
            console.error('‚ùå No subjects found');
            setError('Kh√¥ng t√¨m th·∫•y m√¥n h·ªçc n√†o');
          }
        }
      } catch (error) {
        console.error('Error loading all subjects:', error);
        setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch m√¥n h·ªçc: ' + error.message);
      }
    };

    // Load danh s√°ch sinh vi√™n ƒë√£ ƒëƒÉng k√Ω khi ch·ªçn ƒë·ªß th√¥ng tin
    React.useEffect(() => {
      if (selectedCohort && selectedClass && selectedSubject) {
        const loadEnrolledStudents = async () => {
          setLoading(true);
          try {
            console.log('üîç Loading enrolled students:', {
              cohort: selectedCohort,
              class: selectedClass,
              subject: selectedSubject,
              subjectType: typeof selectedSubject,
              selectedSubjectInfo: selectedSubjectInfo
            });

            // Validate parameters before making API call
            if (!selectedCohort || !selectedClass || !selectedSubject) {
              console.error('‚ùå Missing parameters:', {
                cohortId: selectedCohort,
                classId: selectedClass,
                subjectId: selectedSubject
              });
              throw new Error('Missing required parameters: cohort, class, or subject');
            }

            // Parse to numbers and validate
            const parsedCohortId = parseInt(selectedCohort);
            const parsedClassId = parseInt(selectedClass);
            const parsedSubjectId = parseInt(selectedSubject);

            // Check for NaN values after parsing
            if (isNaN(parsedCohortId) || isNaN(parsedClassId) || isNaN(parsedSubjectId)) {
              console.error('‚ùå Invalid ID values (NaN after parsing):', {
                cohortId: {
                  original: selectedCohort,
                  parsed: parsedCohortId,
                  type: typeof selectedCohort
                },
                classId: {
                  original: selectedClass,
                  parsed: parsedClassId,
                  type: typeof selectedClass
                },
                subjectId: {
                  original: selectedSubject,
                  parsed: parsedSubjectId,
                  type: typeof selectedSubject
                }
              });
              throw new Error('Invalid parameter values: one or more IDs cannot be converted to valid numbers');
            }
            const params = new URLSearchParams({
              cohortId: parsedCohortId,
              classId: parsedClassId,
              subjectId: parsedSubjectId,
              semester: 'HK1',
              academicYear: '2024-25'
            });
            const response = await fetch(`/api/grade/enrolled-students?${params}`, {
              method: 'GET',
              credentials: 'include',
              headers: {
                'Content-Type': 'application/json'
              }
            });
            if (!response.ok) {
              throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            const data = await response.json();
            if (data.success) {
              console.log('‚úÖ Loaded enrolled students:', data.summary);
              const formattedStudents = data.data.map(student => ({
                id: student.studentId,
                enrollmentId: student.enrollmentId,
                params: {
                  studentId: student.studentId,
                  studentCode: student.studentCode,
                  fullName: student.studentName,
                  email: student.email,
                  phone: student.phone,
                  attempt: student.attempt,
                  enrollmentStatus: student.enrollmentStatus,
                  hasExistingGrade: student.hasExistingGrade,
                  gradeId: student.gradeId,
                  txScore: student.txScore || {},
                  dkScore: student.dkScore || {},
                  finalScore: student.finalScore || '',
                  tbktScore: student.tbktScore || null,
                  tbmhScore: student.tbmhScore || null,
                  letterGrade: student.letterGrade || '',
                  isPassed: student.isPassed,
                  notes: student.notes || '',
                  lastUpdated: student.lastUpdated
                }
              }));
              setStudents(formattedStudents);
            } else {
              console.error('‚ùå API returned success=false:', data.message);
              setError('L·ªói t·ª´ server: ' + (data.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch sinh vi√™n'));
            }
          } catch (error) {
            console.error('‚ùå Error loading enrolled students:', error);
            setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch sinh vi√™n: ' + error.message);
          }
          setLoading(false);
        };
        loadEnrolledStudents();
      } else {
        // Reset students khi ch∆∞a ch·ªçn ƒë·ªß th√¥ng tin
        setStudents([]);
      }
    }, [selectedCohort, selectedClass, selectedSubject]);
    const handleCohortChange = e => {
      const cohortId = e.target.value;
      console.log('üîç Cohort selected:', {
        cohortId,
        type: typeof cohortId
      });
      if (cohortId && isNaN(parseInt(cohortId))) {
        console.error('‚ùå Invalid cohort ID:', cohortId);
        setError('ID kh√≥a h·ªçc kh√¥ng h·ª£p l·ªá');
        return;
      }
      setSelectedCohort(cohortId);
      setSelectedClass('');
      setSelectedSubject('');
      setSelectedSubjectInfo(null);
      setStudents([]);
      setGrades({});
      setError('');
    };
    const handleClassChange = e => {
      const classId = e.target.value;
      console.log('üîç Class selected:', {
        classId,
        type: typeof classId
      });
      if (classId && isNaN(parseInt(classId))) {
        console.error('‚ùå Invalid class ID:', classId);
        setError('ID l·ªõp h·ªçc kh√¥ng h·ª£p l·ªá');
        return;
      }
      setSelectedClass(classId);
      setSelectedSubject('');
      setSelectedSubjectInfo(null);
      setGrades({});
      setError('');
    };
    const handleSubjectChange = e => {
      const subjectId = e.target.value;
      console.log('üîç Subject selected:', {
        subjectId,
        type: typeof subjectId
      });
      setSelectedSubject(subjectId);
      setError('');
      if (subjectId) {
        // Convert to number and validate
        const parsedSubjectId = parseInt(subjectId);
        if (isNaN(parsedSubjectId)) {
          console.error('‚ùå Invalid subject ID selected:', subjectId);
          setError('ID m√¥n h·ªçc kh√¥ng h·ª£p l·ªá');
          setSelectedSubjectInfo(null);
          setGrades({});
          return;
        }
        const subject = subjects.find(s => s?.id === parsedSubjectId);
        console.log('üîç Found subject:', subject);
        setSelectedSubjectInfo(subject);
        if (!subject) {
          console.warn('‚ö†Ô∏è Subject not found in subjects list:', parsedSubjectId);
        }
      } else {
        setSelectedSubjectInfo(null);
        setGrades({});
      }
    };

    // Initialize grades khi c√≥ ƒë·ªß students v√† subject
    React.useEffect(() => {
      if (selectedSubject && students.length > 0) {
        const initialGrades = {};
        let maxTxColumns = 1;
        let maxDkColumns = 1;
        students.forEach(student => {
          const studentParams = student.params || {};

          // Parse existing JSON grades v√† chu·∫©n h√≥a format
          const existingTxScore = studentParams.txScore || {};
          const existingDkScore = studentParams.dkScore || {};

          // Chu·∫©n h√≥a format s·ªë trong TX scores
          const normalizedTxScore = {};
          Object.keys(existingTxScore).forEach(key => {
            normalizedTxScore[key] = normalizeNumber(existingTxScore[key]);
          });

          // Chu·∫©n h√≥a format s·ªë trong DK scores  
          const normalizedDkScore = {};
          Object.keys(existingDkScore).forEach(key => {
            normalizedDkScore[key] = normalizeNumber(existingDkScore[key]);
          });

          // Auto-detect max columns from existing data
          const txCount = Object.keys(normalizedTxScore).length;
          const dkCount = Object.keys(normalizedDkScore).length;
          if (txCount > maxTxColumns) maxTxColumns = txCount;
          if (dkCount > maxDkColumns) maxDkColumns = dkCount;
          initialGrades[student.id] = {
            enrollmentId: student.enrollmentId,
            // ‚≠ê QUAN TR·ªåNG
            txScore: normalizedTxScore,
            // JSON object from database - ƒë√£ chu·∫©n h√≥a
            dkScore: normalizedDkScore,
            // JSON object from database - ƒë√£ chu·∫©n h√≥a
            finalScore: normalizeNumber(studentParams.finalScore),
            // Chu·∫©n h√≥a format s·ªë
            tbktScore: normalizeNumber(studentParams.tbktScore),
            // Chu·∫©n h√≥a format s·ªë
            tbmhScore: normalizeNumber(studentParams.tbmhScore),
            // Chu·∫©n h√≥a format s·ªë
            gradeId: studentParams.gradeId || null
          };
        });

        // Update gradeConfig to accommodate existing data
        setGradeConfig(prev => ({
          ...prev,
          txColumns: Math.max(prev.txColumns, maxTxColumns || 1),
          dkColumns: Math.max(prev.dkColumns, maxDkColumns || 1)
        }));
        setGrades(initialGrades);
      } else if (!selectedSubject) {
        setGrades({});
      }
    }, [selectedSubject, students, selectedSubjectInfo]);
    const handleGradeChange = (studentId, field, value, scoreKey = null) => {
      setGrades(prevGrades => {
        const newGrades = {
          ...prevGrades
        };
        if (field === 'txScore') {
          if (!newGrades[studentId].txScore) newGrades[studentId].txScore = {};
          newGrades[studentId].txScore[scoreKey] = value;
        } else if (field === 'dkScore') {
          if (!newGrades[studentId].dkScore) newGrades[studentId].dkScore = {};
          newGrades[studentId].dkScore[scoreKey] = value;
        } else {
          newGrades[studentId][field] = value;
        }

        // Auto calculate TBKT when TX and DK scores are available
        const studentGrades = newGrades[studentId];
        const txScore = studentGrades.txScore || {};
        const dkScore = studentGrades.dkScore || {};

        // Check if we have at least one TX and one DK score
        const hasTxData = Object.values(txScore).some(val => val !== '' && val !== null);
        const hasDkData = Object.values(dkScore).some(val => val !== '' && val !== null);
        if (hasTxData && hasDkData) {
          newGrades[studentId].tbktScore = calculateTBKT(txScore, dkScore);
        }

        // Ki·ªÉm tra TBKT < 5 ƒë·ªÉ reset finalScore v√† tbmhScore
        const tbktScore = studentGrades.tbktScore;
        const isTbktFailed = tbktScore !== '' && tbktScore !== null && tbktScore !== undefined && Number(tbktScore) < 5;
        if (isTbktFailed) {
          newGrades[studentId].finalScore = '';
          newGrades[studentId].tbmhScore = '';
        } else {
          // Auto calculate TBMH when TBKT and finalScore are available
          const finalScore = studentGrades.finalScore;
          if (tbktScore && finalScore) {
            newGrades[studentId].tbmhScore = calculateTBMH(tbktScore, finalScore);
          }
        }
        return newGrades;
      });
    };
    const saveGrades = async () => {
      try {
        setLoading(true);
        setError('');

        // Validate required selections
        if (!selectedCohort || !selectedClass || !selectedSubject) {
          throw new Error('Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß kh√≥a h·ªçc, l·ªõp v√† m√¥n h·ªçc');
        }

        // Validate that we have grades to save - updated for JSON format
        const studentsWithGrades = Object.entries(grades).filter(([studentId, gradeInfo]) => {
          const txScore = gradeInfo.txScore || {};
          const dkScore = gradeInfo.dkScore || {};
          const finalScore = gradeInfo.finalScore;
          return Object.values(txScore).some(val => val !== '' && val !== null) || Object.values(dkScore).some(val => val !== '' && val !== null) || finalScore !== '' && finalScore !== null;
        });
        if (studentsWithGrades.length === 0) {
          throw new Error('Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt ƒëi·ªÉm tr∆∞·ªõc khi l∆∞u');
        }

        // Prepare grade data for API v·ªõi JSON format cho txScore/dkScore
        const gradeData = studentsWithGrades.map(([studentId, gradeInfo]) => {
          if (!gradeInfo.enrollmentId) {
            console.warn(`‚ö†Ô∏è Missing enrollmentId for student ${studentId}`);
          }

          // txScore is already in JSON format from our dynamic inputs
          const txScoreJson = gradeInfo.txScore && Object.keys(gradeInfo.txScore).length > 0 ? gradeInfo.txScore : null;

          // dkScore is already in JSON format from our dynamic inputs  
          const dkScoreJson = gradeInfo.dkScore && Object.keys(gradeInfo.dkScore).length > 0 ? gradeInfo.dkScore : null;

          // Ki·ªÉm tra TBKT < 5 ƒë·ªÉ b·∫Øt bu·ªôc l∆∞u ƒëi·ªÉm thi v√† TBMH th√†nh null
          const tbktScore = gradeInfo.tbktScore ? parseFloat(gradeInfo.tbktScore) : null;
          const isTbktFailed = tbktScore !== null && tbktScore < 5;
          return {
            studentId: parseInt(studentId),
            enrollmentId: gradeInfo.enrollmentId,
            cohortId: parseInt(selectedCohort),
            classId: parseInt(selectedClass),
            subjectId: parseInt(selectedSubject),
            txScore: txScoreJson,
            dkScore: dkScoreJson,
            finalScore: isTbktFailed ? null : gradeInfo.finalScore ? parseFloat(gradeInfo.finalScore) : null,
            tbktScore: tbktScore,
            tbmhScore: isTbktFailed ? null : gradeInfo.tbmhScore ? parseFloat(gradeInfo.tbmhScore) : null,
            isRetake: gradeInfo.thiLai || false,
            notes: gradeInfo.ghiChu || '',
            semester: 'HK1',
            academicYear: '2024-25',
            hasExistingGrade: gradeInfo.hasExistingGrade || false,
            gradeId: gradeInfo.gradeId || null
          };
        });

        // Send to API endpoint
        const response = await fetch('/api/grade/save-bulk', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include',
          body: JSON.stringify({
            grades: gradeData,
            cohortId: selectedCohort,
            classId: selectedClass,
            subjectId: selectedSubject
          })
        });
        if (!response.ok) {
          const errorData = await response.text();
          throw new Error(`HTTP ${response.status}: ${errorData}`);
        }
        const result = await response.json();
        if (!result.success) {
          throw new Error(result.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ server');
        }

        // Success feedback
        const successMessage = `‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng ${studentsWithGrades.length} b·∫£n ghi ƒëi·ªÉm!`;
        alert(successMessage);
        setError('');
      } catch (error) {
        console.error('‚ùå Error saving grades:', error);
        setError('Kh√¥ng th·ªÉ l∆∞u ƒëi·ªÉm: ' + error.message);
      } finally {
        setLoading(false);
      }
    };
    return /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        padding: '20px',
        maxWidth: '1200px'
      }
    }, /*#__PURE__*/React__default.default.createElement("h1", {
      style: {
        marginBottom: '20px',
        color: '#333'
      }
    }, "\uD83D\uDCCA Trang Nh\u1EADp \u0110i\u1EC3m"), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        backgroundColor: '#f8f9fa',
        padding: '20px',
        borderRadius: '8px',
        marginBottom: '20px',
        border: '1px solid #dee2e6'
      }
    }, /*#__PURE__*/React__default.default.createElement("h3", {
      style: {
        marginBottom: '15px',
        color: '#495057'
      }
    }, "Ch\u1ECDn kh\xF3a h\u1ECDc, l\u1EDBp v\xE0 m\xF4n h\u1ECDc"), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        display: 'flex',
        gap: '20px',
        marginBottom: '15px',
        flexWrap: 'wrap'
      }
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        flex: 1,
        minWidth: '200px'
      }
    }, /*#__PURE__*/React__default.default.createElement("label", {
      style: {
        display: 'block',
        marginBottom: '5px',
        fontWeight: 'bold'
      }
    }, "\uD83C\uDF93 Kh\xF3a h\u1ECDc:"), /*#__PURE__*/React__default.default.createElement("select", {
      value: selectedCohort,
      onChange: handleCohortChange,
      style: {
        width: '100%',
        padding: '8px 12px',
        border: '1px solid #ced4da',
        borderRadius: '4px',
        fontSize: '14px'
      }
    }, /*#__PURE__*/React__default.default.createElement("option", {
      value: ""
    }, "-- Ch\u1ECDn kh\xF3a h\u1ECDc --"), cohorts.map((cohort, index) => /*#__PURE__*/React__default.default.createElement("option", {
      key: cohort.cohortId || `cohort-${index}`,
      value: cohort.cohortId
    }, cohort.name, " (", cohort.startYear, "-", cohort.endYear, ")")))), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        flex: 1,
        minWidth: '200px'
      }
    }, /*#__PURE__*/React__default.default.createElement("label", {
      style: {
        display: 'block',
        marginBottom: '5px',
        fontWeight: 'bold'
      }
    }, "\uD83C\uDFEB L\u1EDBp h\u1ECDc:"), /*#__PURE__*/React__default.default.createElement("select", {
      value: selectedClass,
      onChange: handleClassChange,
      disabled: !selectedCohort,
      style: {
        width: '100%',
        padding: '8px 12px',
        border: '1px solid #ced4da',
        borderRadius: '4px',
        fontSize: '14px',
        backgroundColor: !selectedCohort ? '#e9ecef' : 'white',
        cursor: !selectedCohort ? 'not-allowed' : 'pointer'
      }
    }, /*#__PURE__*/React__default.default.createElement("option", {
      value: ""
    }, !selectedCohort ? '-- Ch·ªçn kh√≥a h·ªçc tr∆∞·ªõc --' : '-- Ch·ªçn l·ªõp --'), classes.map((cls, index) => /*#__PURE__*/React__default.default.createElement("option", {
      key: cls.id || `class-${index}`,
      value: cls.id
    }, cls.params?.className || cls.params?.classCode || `L·ªõp ${cls.id}`)))), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        flex: 1,
        minWidth: '200px'
      }
    }, /*#__PURE__*/React__default.default.createElement("label", {
      style: {
        display: 'block',
        marginBottom: '5px',
        fontWeight: 'bold'
      }
    }, "\uD83D\uDCDA M\xF4n h\u1ECDc:"), /*#__PURE__*/React__default.default.createElement("select", {
      value: selectedSubject,
      onChange: handleSubjectChange,
      disabled: !selectedClass,
      style: {
        width: '100%',
        padding: '8px 12px',
        border: '1px solid #ced4da',
        borderRadius: '4px',
        fontSize: '14px',
        backgroundColor: !selectedClass ? '#e9ecef' : 'white',
        cursor: !selectedClass ? 'not-allowed' : 'pointer'
      }
    }, /*#__PURE__*/React__default.default.createElement("option", {
      value: ""
    }, !selectedClass ? '-- Ch·ªçn l·ªõp tr∆∞·ªõc --' : '-- Ch·ªçn m√¥n h·ªçc --'), (() => {
      console.log('üîç Rendering subjects options:', {
        subjectsCount: subjects.length,
        selectedClass,
        subjectsSample: subjects.slice(0, 2)
      });
      return subjects.map((subject, index) => /*#__PURE__*/React__default.default.createElement("option", {
        key: subject.id || `subject-${index}`,
        value: subject.id
      }, subject.params?.subjectName || subject.params?.subjectCode || `M√¥n ${subject.id}`));
    })()))), (selectedCohort || selectedClass || selectedSubject) && /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        padding: '10px',
        backgroundColor: '#d1ecf1',
        border: '1px solid #bee5eb',
        borderRadius: '4px',
        fontSize: '14px'
      }
    }, /*#__PURE__*/React__default.default.createElement("strong", null, "\u0110\xE3 ch\u1ECDn:"), ' ', selectedCohort && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement("span", null, "\uD83C\uDF93 Kh\xF3a: ", cohorts.find(c => c?.cohortId?.toString() === selectedCohort)?.name || selectedCohort), (selectedClass || selectedSubject) && ' | '), selectedClass && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement("span", null, "\uD83C\uDFEB L\u1EDBp: ", classes.find(c => c?.id?.toString() === selectedClass)?.params?.className || selectedClass), selectedSubject && ' | '), selectedSubject && /*#__PURE__*/React__default.default.createElement("span", null, "\uD83D\uDCDA M\xF4n: ", subjects.find(s => s?.id?.toString() === selectedSubject)?.params?.subjectName || selectedSubject), selectedCohort && selectedClass && selectedSubject && /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        marginTop: '5px',
        fontSize: '12px',
        color: '#0c5460'
      }
    }, "\u2705 \u0110\xE3 ch\u1ECDn \u0111\u1EE7 th\xF4ng tin. Danh s\xE1ch sinh vi\xEAn s\u1EBD \u0111\u01B0\u1EE3c t\u1EA3i b\xEAn d\u01B0\u1EDBi."))), selectedCohort && selectedClass && selectedSubject && /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        backgroundColor: '#fff',
        padding: '20px',
        borderRadius: '8px',
        border: '1px solid #dee2e6',
        marginTop: '20px'
      }
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        marginBottom: '15px',
        padding: '10px',
        backgroundColor: '#f8f9fa',
        borderRadius: '6px',
        fontSize: '14px',
        color: '#6c757d'
      }
    }, /*#__PURE__*/React__default.default.createElement("span", null, "\uD83D\uDCCA T\u1ED5ng s\u1ED1 sinh vi\xEAn: ", students.length)), students.length > 0 ? /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement("h3", {
      style: {
        marginBottom: '15px',
        color: '#495057'
      }
    }, "\uD83D\uDCDD Nh\u1EADp \u0111i\u1EC3m m\xF4n: ", selectedSubjectInfo?.params?.subjectName || selectedSubject, "(", selectedSubjectInfo?.params?.credits || 2, " t\xEDn ch\u1EC9)"), students.length > 0 && /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        marginBottom: '15px',
        padding: '10px',
        backgroundColor: '#f8f9fa',
        border: '1px solid #dee2e6',
        borderRadius: '5px'
      }
    }, /*#__PURE__*/React__default.default.createElement("h5", {
      style: {
        margin: '0 0 10px 0',
        color: '#495057'
      }
    }, "\u2699\uFE0F C\u1EA5u h\xECnh c\u1ED9t \u0111i\u1EC3m"), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        display: 'flex',
        gap: '20px',
        alignItems: 'center',
        flexWrap: 'wrap'
      }
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        display: 'flex',
        alignItems: 'center',
        gap: '10px'
      }
    }, /*#__PURE__*/React__default.default.createElement("label", {
      style: {
        fontSize: '14px',
        fontWeight: 'bold'
      }
    }, "\u0110i\u1EC3m TX:"), /*#__PURE__*/React__default.default.createElement("button", {
      onClick: removeTxColumn,
      disabled: gradeConfig.txColumns <= 1,
      style: {
        padding: '4px 8px',
        backgroundColor: gradeConfig.txColumns <= 1 ? '#ccc' : '#dc3545',
        color: 'white',
        border: 'none',
        borderRadius: '3px',
        cursor: gradeConfig.txColumns <= 1 ? 'not-allowed' : 'pointer'
      }
    }, "-"), /*#__PURE__*/React__default.default.createElement("span", {
      style: {
        minWidth: '20px',
        textAlign: 'center',
        fontWeight: 'bold'
      }
    }, gradeConfig.txColumns), /*#__PURE__*/React__default.default.createElement("button", {
      onClick: addTxColumn,
      disabled: gradeConfig.txColumns >= gradeConfig.maxTxColumns,
      style: {
        padding: '4px 8px',
        backgroundColor: gradeConfig.txColumns >= gradeConfig.maxTxColumns ? '#ccc' : '#28a745',
        color: 'white',
        border: 'none',
        borderRadius: '3px',
        cursor: gradeConfig.txColumns >= gradeConfig.maxTxColumns ? 'not-allowed' : 'pointer'
      }
    }, "+")), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        display: 'flex',
        alignItems: 'center',
        gap: '10px'
      }
    }, /*#__PURE__*/React__default.default.createElement("label", {
      style: {
        fontSize: '14px',
        fontWeight: 'bold'
      }
    }, "\u0110i\u1EC3m \u0110K:"), /*#__PURE__*/React__default.default.createElement("button", {
      onClick: removeDkColumn,
      disabled: gradeConfig.dkColumns <= 1,
      style: {
        padding: '4px 8px',
        backgroundColor: gradeConfig.dkColumns <= 1 ? '#ccc' : '#dc3545',
        color: 'white',
        border: 'none',
        borderRadius: '3px',
        cursor: gradeConfig.dkColumns <= 1 ? 'not-allowed' : 'pointer'
      }
    }, "-"), /*#__PURE__*/React__default.default.createElement("span", {
      style: {
        minWidth: '20px',
        textAlign: 'center',
        fontWeight: 'bold'
      }
    }, gradeConfig.dkColumns), /*#__PURE__*/React__default.default.createElement("button", {
      onClick: addDkColumn,
      disabled: gradeConfig.dkColumns >= gradeConfig.maxDkColumns,
      style: {
        padding: '4px 8px',
        backgroundColor: gradeConfig.dkColumns >= gradeConfig.maxDkColumns ? '#ccc' : '#28a745',
        color: 'white',
        border: 'none',
        borderRadius: '3px',
        cursor: gradeConfig.dkColumns >= gradeConfig.maxDkColumns ? 'not-allowed' : 'pointer'
      }
    }, "+")), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        fontSize: '12px',
        color: '#6c757d'
      }
    }, "\uD83D\uDCA1 Th\xEAm/b\u1EDBt c\u1ED9t \u0111i\u1EC3m theo nhu c\u1EA7u."))), loading ? /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        textAlign: 'center',
        padding: '20px'
      }
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        color: '#6c757d'
      }
    }, "\u0110ang t\u1EA3i danh s\xE1ch sinh vi\xEAn...")) : students.length > 0 ? /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        overflowX: 'auto',
        maxWidth: '100%'
      }
    }, /*#__PURE__*/React__default.default.createElement("table", {
      style: {
        width: '100%',
        borderCollapse: 'collapse',
        border: '1px solid #dee2e6',
        fontSize: '13px'
      }
    }, /*#__PURE__*/React__default.default.createElement("thead", null, /*#__PURE__*/React__default.default.createElement("tr", {
      style: {
        backgroundColor: '#007bff',
        color: 'white'
      }
    }, /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        padding: '8px',
        border: '1px solid #dee2e6',
        textAlign: 'center',
        minWidth: '80px'
      }
    }, "M\xE3 SV"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        padding: '8px',
        border: '1px solid #dee2e6',
        textAlign: 'center',
        minWidth: '150px'
      }
    }, "T\xEAn sinh vi\xEAn"), Array.from({
      length: gradeConfig.txColumns
    }, (_, i) => /*#__PURE__*/React__default.default.createElement("th", {
      key: `tx${i + 1}`,
      style: {
        padding: '8px',
        border: '1px solid #dee2e6',
        textAlign: 'center',
        minWidth: '80px'
      }
    }, gradeConfig.txColumns === 1 ? 'TX' : `TX${i + 1}`)), Array.from({
      length: gradeConfig.dkColumns
    }, (_, i) => /*#__PURE__*/React__default.default.createElement("th", {
      key: `dk${i + 1}`,
      style: {
        padding: '8px',
        border: '1px solid #dee2e6',
        textAlign: 'center',
        minWidth: '80px'
      }
    }, gradeConfig.dkColumns === 1 ? 'ƒêK' : `ƒêK${i + 1}`)), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        padding: '8px',
        border: '1px solid #dee2e6',
        textAlign: 'center',
        minWidth: '80px'
      }
    }, "TBKT"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        padding: '8px',
        border: '1px solid #dee2e6',
        textAlign: 'center',
        minWidth: '80px'
      }
    }, "Thi"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        padding: '8px',
        border: '1px solid #dee2e6',
        textAlign: 'center',
        minWidth: '80px'
      }
    }, "TBMH"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        padding: '8px',
        border: '1px solid #dee2e6',
        textAlign: 'center',
        minWidth: '80px'
      }
    }, "Thi l\u1EA1i"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        padding: '8px',
        border: '1px solid #dee2e6',
        textAlign: 'center',
        minWidth: '120px'
      }
    }, "Tr\u1EA1ng th\xE1i"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        padding: '8px',
        border: '1px solid #dee2e6',
        textAlign: 'center',
        minWidth: '120px'
      }
    }, "X\u1EBFp lo\u1EA1i"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        padding: '8px',
        border: '1px solid #dee2e6',
        textAlign: 'center',
        minWidth: '120px'
      }
    }, "Ghi ch\xFA"))), /*#__PURE__*/React__default.default.createElement("tbody", null, students.map((student, index) => {
      const studentGrade = grades[student.id] || {};

      // Ki·ªÉm tra TBKT < 5 ƒë·ªÉ disable ƒëi·ªÉm thi v√† t√¥ v√†ng row
      const tbktScore = studentGrade.tbktScore;
      const isTbktFailed = tbktScore !== '' && tbktScore !== null && tbktScore !== undefined && Number(tbktScore) < 5;
      return /*#__PURE__*/React__default.default.createElement("tr", {
        key: student.id || `student-${index}`,
        style: {
          backgroundColor: isTbktFailed ? '#fff3cd' : 'white'
        }
      }, /*#__PURE__*/React__default.default.createElement("td", {
        style: {
          padding: '5px',
          border: '1px solid #dee2e6',
          textAlign: 'center'
        }
      }, student.params?.studentCode || student.id), /*#__PURE__*/React__default.default.createElement("td", {
        style: {
          padding: '5px',
          border: '1px solid #dee2e6'
        }
      }, student.params?.fullName || 'N/A'), Array.from({
        length: gradeConfig.txColumns
      }, (_, i) => {
        const txKey = `tx${i + 1}`;
        const txValue = studentGrade.txScore?.[txKey] || '';
        return /*#__PURE__*/React__default.default.createElement("td", {
          key: txKey,
          style: {
            padding: '5px',
            border: '1px solid #dee2e6',
            textAlign: 'center'
          }
        }, /*#__PURE__*/React__default.default.createElement("input", {
          type: "number",
          min: "0",
          max: "10",
          step: "0.01",
          value: txValue,
          onChange: e => handleGradeChange(student.id, 'txScore', e.target.value, txKey),
          onBlur: e => {
            const normalized = normalizeNumber(e.target.value);
            if (normalized !== e.target.value) {
              handleGradeChange(student.id, 'txScore', normalized, txKey);
            }
          },
          style: {
            width: '60px',
            padding: '4px',
            border: '1px solid #ccc',
            borderRadius: '3px',
            textAlign: 'center'
          },
          title: "Nh\u1EADp \u0111i\u1EC3m th\u01B0\u1EDDng xuy\xEAn"
        }));
      }), Array.from({
        length: gradeConfig.dkColumns
      }, (_, i) => {
        const dkKey = `dk${i + 1}`;
        const dkValue = studentGrade.dkScore?.[dkKey] || '';
        return /*#__PURE__*/React__default.default.createElement("td", {
          key: dkKey,
          style: {
            padding: '5px',
            border: '1px solid #dee2e6',
            textAlign: 'center'
          }
        }, /*#__PURE__*/React__default.default.createElement("input", {
          type: "number",
          min: "0",
          max: "10",
          step: "0.01",
          value: dkValue,
          onChange: e => handleGradeChange(student.id, 'dkScore', e.target.value, dkKey),
          onBlur: e => {
            const normalized = normalizeNumber(e.target.value);
            if (normalized !== e.target.value) {
              handleGradeChange(student.id, 'dkScore', normalized, dkKey);
            }
          },
          style: {
            width: '60px',
            padding: '4px',
            border: '1px solid #ccc',
            borderRadius: '3px',
            textAlign: 'center'
          }
        }));
      }), /*#__PURE__*/React__default.default.createElement("td", {
        style: {
          padding: '5px',
          border: '1px solid #dee2e6',
          textAlign: 'center',
          backgroundColor: '#f8f9fa',
          fontWeight: 'bold',
          color: studentGrade.tbktScore ? '#28a745' : '#6c757d'
        }
      }, studentGrade.tbktScore || '-'), /*#__PURE__*/React__default.default.createElement("td", {
        style: {
          padding: '5px',
          border: '1px solid #dee2e6',
          textAlign: 'center'
        }
      }, /*#__PURE__*/React__default.default.createElement("input", {
        type: "number",
        min: "0",
        max: "10",
        step: "0.01",
        value: isTbktFailed ? '' : studentGrade.finalScore || '',
        disabled: isTbktFailed,
        onChange: e => handleGradeChange(student.id, 'finalScore', e.target.value),
        onBlur: e => {
          // Chu·∫©n h√≥a format khi r·ªùi kh·ªèi input
          const normalized = normalizeNumber(e.target.value);
          if (normalized !== e.target.value) {
            handleGradeChange(student.id, 'finalScore', normalized);
          }
        },
        style: {
          width: '60px',
          padding: '4px',
          border: '1px solid #ccc',
          borderRadius: '3px',
          textAlign: 'center',
          backgroundColor: isTbktFailed ? '#f8f9fa' : 'white',
          cursor: isTbktFailed ? 'not-allowed' : 'text'
        },
        title: isTbktFailed ? 'Kh√¥ng th·ªÉ nh·∫≠p ƒëi·ªÉm thi do TBKT < 5' : ''
      })), /*#__PURE__*/React__default.default.createElement("td", {
        style: {
          padding: '5px',
          border: '1px solid #dee2e6',
          textAlign: 'center',
          backgroundColor: '#f8f9fa',
          fontWeight: 'bold',
          color: (isTbktFailed ? false : studentGrade.tbmhScore) ? '#007bff' : '#6c757d'
        }
      }, isTbktFailed ? '-' : studentGrade.tbmhScore || '-'), /*#__PURE__*/React__default.default.createElement("td", {
        style: {
          padding: '5px',
          border: '1px solid #dee2e6',
          textAlign: 'center'
        }
      }, /*#__PURE__*/React__default.default.createElement("input", {
        type: "checkbox",
        checked: studentGrade.thiLai || false,
        onChange: e => handleGradeChange(student.id, 'thiLai', e.target.checked),
        style: {
          transform: 'scale(1.2)'
        }
      })), /*#__PURE__*/React__default.default.createElement("td", {
        style: {
          padding: '5px',
          border: '1px solid #dee2e6',
          textAlign: 'center'
        }
      }, studentGrade.tbmhScore >= 5 ? /*#__PURE__*/React__default.default.createElement("span", {
        style: {
          color: '#28a745',
          fontWeight: 'bold'
        }
      }, "\u2705 \u0110\u1EA1t") : studentGrade.tbmhScore > 0 ? /*#__PURE__*/React__default.default.createElement("span", {
        style: {
          color: '#dc3545',
          fontWeight: 'bold'
        }
      }, "\u274C Kh\xF4ng \u0111\u1EA1t") : /*#__PURE__*/React__default.default.createElement("span", {
        style: {
          color: '#6c757d'
        }
      }, "\u23F3 Ch\u01B0a c\xF3 \u0111i\u1EC3m")), /*#__PURE__*/React__default.default.createElement("td", {
        style: {
          padding: '5px',
          border: '1px solid #dee2e6',
          textAlign: 'center',
          fontWeight: 'bold',
          color: '#6c757d'
        }
      }, isTbktFailed ? '-' : getGradeClassification(studentGrade.tbmhScore)), /*#__PURE__*/React__default.default.createElement("td", {
        style: {
          padding: '5px',
          border: '1px solid #dee2e6',
          textAlign: 'center'
        }
      }, /*#__PURE__*/React__default.default.createElement("input", {
        type: "text",
        value: studentGrade.ghiChu || '',
        onChange: e => handleGradeChange(student.id, 'ghiChu', e.target.value),
        placeholder: "Ghi ch\xFA...",
        style: {
          width: '250px',
          // tƒÉng chi·ªÅu r·ªông
          padding: '4px',
          border: '1px solid #ccc',
          borderRadius: '3px'
        }
      })));
    })))) : /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        textAlign: 'center',
        padding: '20px',
        color: '#6c757d'
      }
    }, "Kh\xF4ng c\xF3 sinh vi\xEAn n\xE0o \u0111\u1EC3 nh\u1EADp \u0111i\u1EC3m"), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        marginTop: '15px',
        padding: '10px',
        backgroundColor: '#e7f3ff',
        border: '1px solid #b3d9ff',
        borderRadius: '4px',
        fontSize: '12px'
      }
    }, /*#__PURE__*/React__default.default.createElement("strong", null, "\uD83D\uDCD0 C\xF4ng th\u1EE9c t\xEDnh:"), /*#__PURE__*/React__default.default.createElement("br", null), "\u2022 ", /*#__PURE__*/React__default.default.createElement("strong", null, getFormulaStrings().tbktFormula), /*#__PURE__*/React__default.default.createElement("br", null), "\u2022 ", /*#__PURE__*/React__default.default.createElement("strong", null, getFormulaStrings().tbmhFormula), /*#__PURE__*/React__default.default.createElement("br", null), "\u2022 ", /*#__PURE__*/React__default.default.createElement("strong", null, getFormulaStrings().coefficientInfo), /*#__PURE__*/React__default.default.createElement("br", null), "\u2022 ", /*#__PURE__*/React__default.default.createElement("strong", null, getFormulaStrings().weightInfo), /*#__PURE__*/React__default.default.createElement("br", null), "\u2022 S\u1ED1 c\u1ED9t \u0111i\u1EC1u ki\u1EC7n: ", selectedSubjectInfo?.params?.credits || 2, " t\xEDn ch\u1EC9 \u2192 ", (() => {
      const credits = selectedSubjectInfo?.params?.credits || 2;
      return credits === 2 ? '1 c·ªôt ƒêK' : credits === 3 ? '2 c·ªôt ƒêK (ƒêK1, ƒêK2)' : '3 c·ªôt ƒêK (ƒêK1, ƒêK2, ƒêK3)';
    })()), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        marginTop: '10px',
        padding: '10px',
        backgroundColor: '#fff3cd',
        border: '1px solid #ffeaa7',
        borderRadius: '4px',
        fontSize: '12px'
      }
    }, /*#__PURE__*/React__default.default.createElement("strong", null, "\u26A0\uFE0F Quy t\u1EAFc quan tr\u1ECDng:"), /*#__PURE__*/React__default.default.createElement("br", null), "\u2022 Sinh vi\xEAn c\xF3 ", /*#__PURE__*/React__default.default.createElement("strong", null, "TBKT < 5.0"), " s\u1EBD ", /*#__PURE__*/React__default.default.createElement("strong", null, "kh\xF4ng \u0111\u01B0\u1EE3c ph\xE9p nh\u1EADp \u0111i\u1EC3m thi"), " v\xE0 \u0111\u01B0\u1EE3c \u0111\xE1nh d\u1EA5u m\xE0u v\xE0ng", /*#__PURE__*/React__default.default.createElement("br", null), "\u2022 Sinh vi\xEAn n\xE0y ph\u1EA3i thi l\u1EA1i c\xE1c \u0111i\u1EC3m TX/DK \u0111\u1EC3 \u0111\u1EA1t TBKT \u2265 5.0 tr\u01B0\u1EDBc khi \u0111\u01B0\u1EE3c thi m\xF4n", /*#__PURE__*/React__default.default.createElement("br", null), "\u2022 ", /*#__PURE__*/React__default.default.createElement("strong", null, "Khi l\u01B0u:"), " \u0110i\u1EC3m thi v\xE0 TBMH s\u1EBD t\u1EF1 \u0111\u1ED9ng \u0111\u01B0\u1EE3c x\xF3a kh\u1ECFi database n\u1EBFu TBKT < 5.0"), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        marginTop: '20px',
        textAlign: 'center',
        padding: '15px',
        backgroundColor: '#f8f9fa',
        borderRadius: '4px',
        border: '1px solid #dee2e6'
      }
    }, /*#__PURE__*/React__default.default.createElement("button", {
      onClick: saveGrades,
      disabled: loading || Object.keys(grades).length === 0,
      style: {
        padding: '12px 30px',
        backgroundColor: loading ? '#6c757d' : '#28a745',
        color: 'white',
        border: 'none',
        borderRadius: '6px',
        cursor: loading ? 'not-allowed' : 'pointer',
        fontSize: '16px',
        fontWeight: 'bold',
        marginRight: '10px'
      }
    }, loading ? '‚è≥ ƒêang l∆∞u...' : 'üíæ L∆∞u ƒëi·ªÉm'))) : /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        textAlign: 'center',
        padding: '20px',
        color: '#6c757d'
      }
    }, "Kh\xF4ng c\xF3 sinh vi\xEAn n\xE0o \u0111\u1EC3 nh\u1EADp \u0111i\u1EC3m")), error && /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        marginTop: '20px',
        padding: '10px',
        backgroundColor: '#f8d7da',
        color: '#721c24',
        border: '1px solid #f5c6cb',
        borderRadius: '4px'
      }
    }, "\u26A0\uFE0F ", error), !selectedCohort && /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        marginTop: '20px',
        padding: '15px',
        backgroundColor: '#fff3cd',
        color: '#856404',
        border: '1px solid #ffeaa7',
        borderRadius: '4px'
      }
    }, "\uD83D\uDCA1 ", /*#__PURE__*/React__default.default.createElement("strong", null, "B\u01B0\u1EDBc 1:"), " Vui l\xF2ng ch\u1ECDn kh\xF3a h\u1ECDc tr\u01B0\u1EDBc \u0111\u1EC3 xem danh s\xE1ch l\u1EDBp thu\u1ED9c kh\xF3a \u0111\xF3."), selectedCohort && !selectedClass && /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        marginTop: '20px',
        padding: '15px',
        backgroundColor: '#d1ecf1',
        color: '#0c5460',
        border: '1px solid #bee5eb',
        borderRadius: '4px'
      }
    }, "\uD83C\uDFEB ", /*#__PURE__*/React__default.default.createElement("strong", null, "B\u01B0\u1EDBc 2:"), " Vui l\xF2ng ch\u1ECDn l\u1EDBp h\u1ECDc t\u1EEB kh\xF3a ", cohorts.find(c => c?.cohortId?.toString() === selectedCohort)?.name, ".", classes.length === 0 && /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        marginTop: '5px',
        fontSize: '14px'
      }
    }, "\u26A0\uFE0F Kh\xF3a h\u1ECDc n\xE0y ch\u01B0a c\xF3 l\u1EDBp n\xE0o. Vui l\xF2ng t\u1EA1o l\u1EDBp tr\u01B0\u1EDBc.")), selectedCohort && selectedClass && !selectedSubject && /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        marginTop: '20px',
        padding: '15px',
        backgroundColor: '#d4edda',
        color: '#155724',
        border: '1px solid #c3e6cb',
        borderRadius: '4px'
      }
    }, "\uD83D\uDCDA ", /*#__PURE__*/React__default.default.createElement("strong", null, "B\u01B0\u1EDBc 3:"), " Vui l\xF2ng ch\u1ECDn m\xF4n h\u1ECDc \u0111\u1EC3 hi\u1EC3n th\u1ECB b\u1EA3ng nh\u1EADp \u0111i\u1EC3m chi ti\u1EBFt."), selectedCohort && selectedClass && selectedSubject && !students.length && /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        marginTop: '20px',
        padding: '15px',
        backgroundColor: '#fff3cd',
        color: '#856404',
        border: '1px solid #ffeaa7',
        borderRadius: '4px'
      }
    }, "\u26A0\uFE0F ", /*#__PURE__*/React__default.default.createElement("strong", null, "Ch\u01B0a c\xF3 sinh vi\xEAn:"), " L\u1EDBp n\xE0y ch\u01B0a c\xF3 sinh vi\xEAn n\xE0o. Vui l\xF2ng th\xEAm sinh vi\xEAn v\xE0o l\u1EDBp tr\u01B0\u1EDBc khi nh\u1EADp \u0111i\u1EC3m."));
  };

  // import './AdminRetakeManagement.css'; // T·∫°m th·ªùi comment ƒë·ªÉ test

  /**
   * Admin Retake Management Component
   * Trang qu·∫£n l√Ω thi l·∫°i/h·ªçc l·∫°i ƒë∆°n gi·∫£n cho Admin
   */
  const AdminRetakeManagement = () => {
    const [retakeData, setRetakeData] = React.useState([]);
    const [loading, setLoading] = React.useState(true);
    const [error, setError] = React.useState('');
    const [selectedFilter, setSelectedFilter] = React.useState('all'); // all, pending, completed

    // Load d·ªØ li·ªáu khi component mount
    React.useEffect(() => {
      loadRetakeData();
    }, []);
    const loadRetakeData = async () => {
      try {
        setLoading(true);
        setError('');

        // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch thi l·∫°i
        const response = await fetch('/api/retake/list', {
          credentials: 'include'
        });
        if (response.ok) {
          const data = await response.json();
          setRetakeData(data.data || []);
        } else {
          throw new Error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu');
        }
      } catch (error) {
        console.error('Error loading retake data:', error);
        setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu thi l·∫°i');
        setRetakeData([]); // Set empty array ƒë·ªÉ tr√°nh l·ªói
      } finally {
        setLoading(false);
      }
    };
    const handleApprove = async retakeId => {
      try {
        const response = await fetch(`/api/retake/${retakeId}/approve`, {
          method: 'POST',
          credentials: 'include'
        });
        if (response.ok) {
          alert('ƒê√£ ph√™ duy·ªát y√™u c·∫ßu thi l·∫°i');
          loadRetakeData(); // Reload data
        } else {
          alert('L·ªói khi ph√™ duy·ªát');
        }
      } catch (error) {
        console.error('Error approving retake:', error);
        alert('L·ªói khi ph√™ duy·ªát');
      }
    };
    const handleReject = async retakeId => {
      try {
        const response = await fetch(`/api/retake/${retakeId}/reject`, {
          method: 'POST',
          credentials: 'include'
        });
        if (response.ok) {
          alert('ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu thi l·∫°i');
          loadRetakeData(); // Reload data
        } else {
          alert('L·ªói khi t·ª´ ch·ªëi');
        }
      } catch (error) {
        console.error('Error rejecting retake:', error);
        alert('L·ªói khi t·ª´ ch·ªëi');
      }
    };

    // Filter data based on selected filter
    const filteredData = retakeData.filter(item => {
      if (selectedFilter === 'all') return true;
      if (selectedFilter === 'pending') return item.status === 'PENDING';
      if (selectedFilter === 'completed') return item.status !== 'PENDING';
      return true;
    });
    return /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        padding: '20px',
        maxWidth: '1200px',
        margin: '0 auto',
        fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
      }
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        marginBottom: '30px'
      }
    }, /*#__PURE__*/React__default.default.createElement("h1", {
      style: {
        color: '#333',
        marginBottom: '10px',
        fontSize: '28px'
      }
    }, "\uD83C\uDF93 Qu\u1EA3n l\xFD Thi l\u1EA1i & H\u1ECDc l\u1EA1i"), /*#__PURE__*/React__default.default.createElement("p", {
      style: {
        color: '#6c757d',
        fontSize: '16px',
        margin: 0
      }
    }, "Qu\u1EA3n l\xFD c\xE1c y\xEAu c\u1EA7u thi l\u1EA1i v\xE0 h\u1ECDc l\u1EA1i c\u1EE7a sinh vi\xEAn")), error && /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        backgroundColor: '#f8d7da',
        color: '#721c24',
        padding: '12px',
        borderRadius: '4px',
        marginBottom: '20px',
        border: '1px solid #f5c6cb'
      }
    }, "\u274C ", error), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        marginBottom: '20px',
        display: 'flex',
        alignItems: 'center',
        gap: '10px'
      }
    }, /*#__PURE__*/React__default.default.createElement("label", {
      style: {
        fontWeight: '500',
        color: '#495057'
      }
    }, "L\u1ECDc theo tr\u1EA1ng th\xE1i:"), /*#__PURE__*/React__default.default.createElement("select", {
      value: selectedFilter,
      onChange: e => setSelectedFilter(e.target.value),
      style: {
        padding: '6px 12px',
        border: '1px solid #ced4da',
        borderRadius: '4px',
        backgroundColor: 'white',
        color: '#495057',
        fontSize: '14px'
      }
    }, /*#__PURE__*/React__default.default.createElement("option", {
      value: "all"
    }, "T\u1EA5t c\u1EA3"), /*#__PURE__*/React__default.default.createElement("option", {
      value: "pending"
    }, "\u0110ang ch\u1EDD"), /*#__PURE__*/React__default.default.createElement("option", {
      value: "completed"
    }, "\u0110\xE3 x\u1EED l\xFD"))), loading ? /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        textAlign: 'center',
        padding: '40px',
        color: '#6c757d',
        fontSize: '18px'
      }
    }, "\u23F3 \u0110ang t\u1EA3i d\u1EEF li\u1EC7u...") : /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        overflowX: 'auto',
        background: 'white',
        borderRadius: '8px',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
        marginBottom: '20px'
      }
    }, /*#__PURE__*/React__default.default.createElement("table", {
      style: {
        width: '100%',
        borderCollapse: 'collapse',
        fontSize: '14px'
      }
    }, /*#__PURE__*/React__default.default.createElement("thead", null, /*#__PURE__*/React__default.default.createElement("tr", {
      style: {
        backgroundColor: '#f8f9fa'
      }
    }, /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        color: '#495057',
        fontWeight: '600',
        padding: '12px',
        textAlign: 'left',
        borderBottom: '2px solid #dee2e6'
      }
    }, "MSSV"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        color: '#495057',
        fontWeight: '600',
        padding: '12px',
        textAlign: 'left',
        borderBottom: '2px solid #dee2e6'
      }
    }, "H\u1ECD t\xEAn"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        color: '#495057',
        fontWeight: '600',
        padding: '12px',
        textAlign: 'left',
        borderBottom: '2px solid #dee2e6'
      }
    }, "M\xF4n h\u1ECDc"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        color: '#495057',
        fontWeight: '600',
        padding: '12px',
        textAlign: 'left',
        borderBottom: '2px solid #dee2e6'
      }
    }, "L\u1EDBp"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        color: '#495057',
        fontWeight: '600',
        padding: '12px',
        textAlign: 'left',
        borderBottom: '2px solid #dee2e6'
      }
    }, "Lo\u1EA1i"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        color: '#495057',
        fontWeight: '600',
        padding: '12px',
        textAlign: 'left',
        borderBottom: '2px solid #dee2e6'
      }
    }, "L\xFD do"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        color: '#495057',
        fontWeight: '600',
        padding: '12px',
        textAlign: 'left',
        borderBottom: '2px solid #dee2e6'
      }
    }, "Tr\u1EA1ng th\xE1i"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        color: '#495057',
        fontWeight: '600',
        padding: '12px',
        textAlign: 'left',
        borderBottom: '2px solid #dee2e6'
      }
    }, "Ng\xE0y t\u1EA1o"), /*#__PURE__*/React__default.default.createElement("th", {
      style: {
        color: '#495057',
        fontWeight: '600',
        padding: '12px',
        textAlign: 'left',
        borderBottom: '2px solid #dee2e6'
      }
    }, "H\xE0nh \u0111\u1ED9ng"))), /*#__PURE__*/React__default.default.createElement("tbody", null, filteredData.length > 0 ? filteredData.map((item, index) => /*#__PURE__*/React__default.default.createElement("tr", {
      key: index,
      style: {
        borderBottom: '1px solid #dee2e6'
      }
    }, /*#__PURE__*/React__default.default.createElement("td", {
      style: {
        padding: '12px'
      }
    }, item.studentCode || 'N/A'), /*#__PURE__*/React__default.default.createElement("td", {
      style: {
        padding: '12px'
      }
    }, item.studentName || 'N/A'), /*#__PURE__*/React__default.default.createElement("td", {
      style: {
        padding: '12px'
      }
    }, item.subjectName || 'N/A'), /*#__PURE__*/React__default.default.createElement("td", {
      style: {
        padding: '12px'
      }
    }, item.className || 'N/A'), /*#__PURE__*/React__default.default.createElement("td", {
      style: {
        padding: '12px'
      }
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: {
        padding: '4px 8px',
        borderRadius: '12px',
        fontSize: '12px',
        fontWeight: '500',
        textTransform: 'uppercase',
        backgroundColor: item.retakeType === 'RETAKE_EXAM' ? '#e3f2fd' : '#f3e5f5',
        color: item.retakeType === 'RETAKE_EXAM' ? '#1976d2' : '#7b1fa2'
      }
    }, item.retakeType === 'RETAKE_EXAM' ? 'Thi l·∫°i' : 'H·ªçc l·∫°i')), /*#__PURE__*/React__default.default.createElement("td", {
      style: {
        padding: '12px',
        maxWidth: '200px',
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap'
      }
    }, item.reason || 'N/A'), /*#__PURE__*/React__default.default.createElement("td", {
      style: {
        padding: '12px'
      }
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: {
        padding: '4px 8px',
        borderRadius: '12px',
        fontSize: '12px',
        fontWeight: '500',
        backgroundColor: item.status === 'PENDING' ? '#fff3cd' : item.status === 'APPROVED' ? '#d4edda' : '#f8d7da',
        color: item.status === 'PENDING' ? '#856404' : item.status === 'APPROVED' ? '#155724' : '#721c24'
      }
    }, item.status === 'PENDING' ? 'ƒêang ch·ªù' : item.status === 'APPROVED' ? 'ƒê√£ duy·ªát' : item.status === 'REJECTED' ? 'T·ª´ ch·ªëi' : 'N/A')), /*#__PURE__*/React__default.default.createElement("td", {
      style: {
        padding: '12px'
      }
    }, item.createdAt ? new Date(item.createdAt).toLocaleDateString('vi-VN') : 'N/A'), /*#__PURE__*/React__default.default.createElement("td", {
      style: {
        padding: '12px'
      }
    }, item.status === 'PENDING' && /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        display: 'flex',
        gap: '8px'
      }
    }, /*#__PURE__*/React__default.default.createElement("button", {
      style: {
        padding: '6px 12px',
        border: 'none',
        borderRadius: '4px',
        fontSize: '12px',
        cursor: 'pointer',
        fontWeight: '500',
        backgroundColor: '#28a745',
        color: 'white'
      },
      onClick: () => handleApprove(item.id)
    }, "\u2705 Duy\u1EC7t"), /*#__PURE__*/React__default.default.createElement("button", {
      style: {
        padding: '6px 12px',
        border: 'none',
        borderRadius: '4px',
        fontSize: '12px',
        cursor: 'pointer',
        fontWeight: '500',
        backgroundColor: '#dc3545',
        color: 'white'
      },
      onClick: () => handleReject(item.id)
    }, "\u274C T\u1EEB ch\u1ED1i")), item.status !== 'PENDING' && /*#__PURE__*/React__default.default.createElement("span", {
      style: {
        color: '#6c757d',
        fontStyle: 'italic',
        fontSize: '12px'
      }
    }, "\u0110\xE3 x\u1EED l\xFD")))) : /*#__PURE__*/React__default.default.createElement("tr", null, /*#__PURE__*/React__default.default.createElement("td", {
      colSpan: "9",
      style: {
        textAlign: 'center',
        color: '#6c757d',
        padding: '40px',
        fontStyle: 'italic'
      }
    }, selectedFilter === 'all' ? 'Ch∆∞a c√≥ y√™u c·∫ßu thi l·∫°i n√†o' : `Kh√¥ng c√≥ y√™u c·∫ßu n√†o v·ªõi tr·∫°ng th√°i "${selectedFilter === 'pending' ? 'ƒêang ch·ªù' : 'ƒê√£ x·ª≠ l√Ω'}"`))))), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        display: 'flex',
        justifyContent: 'space-around',
        backgroundColor: '#f8f9fa',
        padding: '20px',
        borderRadius: '8px',
        border: '1px solid #dee2e6'
      }
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        textAlign: 'center',
        color: '#495057'
      }
    }, /*#__PURE__*/React__default.default.createElement("strong", {
      style: {
        display: 'block',
        marginBottom: '5px',
        fontSize: '16px'
      }
    }, "T\u1ED5ng s\u1ED1 y\xEAu c\u1EA7u:"), retakeData.length), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        textAlign: 'center',
        color: '#495057'
      }
    }, /*#__PURE__*/React__default.default.createElement("strong", {
      style: {
        display: 'block',
        marginBottom: '5px',
        fontSize: '16px'
      }
    }, "\u0110ang ch\u1EDD x\u1EED l\xFD:"), retakeData.filter(item => item.status === 'PENDING').length), /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        textAlign: 'center',
        color: '#495057'
      }
    }, /*#__PURE__*/React__default.default.createElement("strong", {
      style: {
        display: 'block',
        marginBottom: '5px',
        fontSize: '16px'
      }
    }, "\u0110\xE3 x\u1EED l\xFD:"), retakeData.filter(item => item.status !== 'PENDING').length)));
  };

  const StudentImportComponent = () => {
    const [file, setFile] = React.useState(null);
    const [loading, setLoading] = React.useState(false);
    const [result, setResult] = React.useState(null);
    const [classes, setClasses] = React.useState([]);
    const [selectedClass, setSelectedClass] = React.useState('');
    const [loadingClasses, setLoadingClasses] = React.useState(true);
    const addNotice = adminjs.useNotice();

    // L·∫•y danh s√°ch l·ªõp khi component mount
    React.useEffect(() => {
      const fetchClasses = async () => {
        try {
          const response = await fetch('/api/student-import/classes');
          const data = await response.json();
          if (data.success) {
            const classOptions = data.data.map(cls => ({
              value: cls.id.toString(),
              label: `${cls.classCode} - ${cls.className}`
            }));
            setClasses(classOptions);
          } else {
            addNotice({
              message: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªõp',
              type: 'error'
            });
          }
        } catch (error) {
          console.error('Fetch classes error:', error); // Debug log
          addNotice({
            message: `L·ªói t·∫£i danh s√°ch l·ªõp: ${error.message}`,
            type: 'error'
          });
        } finally {
          setLoadingClasses(false);
        }
      };
      fetchClasses();
    }, []);
    const handleFileSelect = files => {
      if (files && files.length > 0) {
        const selectedFile = files[0];

        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
        const allowedTypes = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'];
        if (!allowedTypes.includes(selectedFile.type)) {
          addNotice({
            message: 'Vui l√≤ng ch·ªçn file Excel (.xlsx ho·∫∑c .xls)',
            type: 'error'
          });
          return;
        }
        setFile(selectedFile);
        setResult(null);
      }
    };
    const handleImport = async () => {
      console.log('handleImport called with selectedClass:', selectedClass); // Debug log

      if (!selectedClass) {
        addNotice({
          message: 'Vui l√≤ng ch·ªçn l·ªõp h·ªçc tr∆∞·ªõc',
          type: 'error'
        });
        return;
      }
      if (!file) {
        addNotice({
          message: 'Vui l√≤ng ch·ªçn file Excel ƒë·ªÉ import',
          type: 'error'
        });
        return;
      }
      setLoading(true);
      try {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('classId', selectedClass);
        console.log('Sending formData with classId:', selectedClass); // Debug log

        const response = await fetch('/api/student-import/import-students', {
          method: 'POST',
          body: formData
        });
        const data = await response.json();
        if (data.success) {
          addNotice({
            message: data.message,
            type: data.details.errorCount > 0 ? 'info' : 'success'
          });
          setResult(data);
        } else {
          addNotice({
            message: data.message,
            type: 'error'
          });
        }
        setFile(null);
      } catch (error) {
        addNotice({
          message: `L·ªói import: ${error.message}`,
          type: 'error'
        });
      } finally {
        setLoading(false);
      }
    };
    const downloadTemplate = async () => {
      try {
        const response = await fetch('/api/student-import/download-template');
        if (!response.ok) {
          throw new Error('Kh√¥ng th·ªÉ t·∫£i template');
        }
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'template_sinh_vien.xlsx';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        addNotice({
          message: 'ƒê√£ t·∫£i template th√†nh c√¥ng',
          type: 'success'
        });
      } catch (error) {
        addNotice({
          message: `L·ªói t·∫£i template: ${error.message}`,
          type: 'error'
        });
      }
    };
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      variant: "white",
      p: "xxl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "h4",
      mb: "xl"
    }, "\uD83D\uDCDA Import danh s\xE1ch sinh vi\xEAn t\u1EEB Excel"), /*#__PURE__*/React__default.default.createElement(designSystem.MessageBox, {
      variant: "info",
      mb: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, /*#__PURE__*/React__default.default.createElement("strong", null, "\uD83D\uDCCB H\u01B0\u1EDBng d\u1EABn s\u1EED d\u1EE5ng:"), /*#__PURE__*/React__default.default.createElement("br", null), "1. \uD83C\uDFEB Ch\u1ECDn l\u1EDBp h\u1ECDc mu\u1ED1n import sinh vi\xEAn", /*#__PURE__*/React__default.default.createElement("br", null), "2. \uD83D\uDCE5 T\u1EA3i template Excel m\u1EABu b\u1EB1ng n\xFAt b\xEAn d\u01B0\u1EDBi", /*#__PURE__*/React__default.default.createElement("br", null), "3. \u270F\uFE0F \u0110i\u1EC1n th\xF4ng tin sinh vi\xEAn v\xE0o template theo \u0111\xFAng \u0111\u1ECBnh d\u1EA1ng", /*#__PURE__*/React__default.default.createElement("br", null), "4. \uD83D\uDCE4 Upload file \u0111\xE3 \u0111i\u1EC1n v\xE0 nh\u1EA5n n\xFAt Import", /*#__PURE__*/React__default.default.createElement("br", null), "5. \u2705 Ki\u1EC3m tra k\u1EBFt qu\u1EA3 import", /*#__PURE__*/React__default.default.createElement("br", null), /*#__PURE__*/React__default.default.createElement("br", null), /*#__PURE__*/React__default.default.createElement("strong", null, "\u26A0\uFE0F C\xE1c c\u1ED9t b\u1EAFt bu\u1ED9c:"), " M\xE3 sinh vi\xEAn, H\u1ECD v\xE0 t\xEAn", /*#__PURE__*/React__default.default.createElement("br", null), /*#__PURE__*/React__default.default.createElement("strong", null, "\uD83D\uDCDD L\u01B0u \xFD:"), " M\xE3 sinh vi\xEAn kh\xF4ng \u0111\u01B0\u1EE3c tr\xF9ng l\u1EB7p. L\u1EDBp h\u1ECDc s\u1EBD \u0111\u01B0\u1EE3c g\xE1n t\u1EF1 \u0111\u1ED9ng theo l\u1EF1a ch\u1ECDn.")), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "h6",
      mb: "default"
    }, "\uD83C\uDFEB Ch\u1ECDn l\u1EDBp h\u1ECDc:"), loadingClasses ? /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, "\u0110ang t\u1EA3i danh s\xE1ch l\u1EDBp...") : /*#__PURE__*/React__default.default.createElement("select", {
      value: selectedClass,
      onChange: e => {
        setSelectedClass(e.target.value);
      },
      style: {
        width: '100%',
        padding: '8px 12px',
        border: '1px solid #ccc',
        borderRadius: '4px',
        fontSize: '14px',
        backgroundColor: 'white'
      }
    }, /*#__PURE__*/React__default.default.createElement("option", {
      value: ""
    }, "-- Ch\u1ECDn l\u1EDBp h\u1ECDc --"), classes.map(cls => /*#__PURE__*/React__default.default.createElement("option", {
      key: cls.value,
      value: cls.value
    }, cls.label))), selectedClass && /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      mt: "sm",
      color: "primary100"
    }, "\u2705 \u0110\xE3 ch\u1ECDn l\u1EDBp: ", classes.find(c => c.value === selectedClass)?.label)), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      onClick: downloadTemplate,
      variant: "outlined",
      size: "lg"
    }, "\uD83D\uDCE5 T\u1EA3i template Excel m\u1EABu")), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "h6",
      mb: "default"
    }, "\uD83D\uDCC4 Ch\u1ECDn file Excel:"), /*#__PURE__*/React__default.default.createElement(designSystem.DropZone, {
      onChange: handleFileSelect,
      multiple: false,
      validate: {
        mimeTypes: ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel']
      }
    }), file && /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      mt: "sm",
      color: "primary100"
    }, "\u2705 File \u0111\xE3 ch\u1ECDn: ", file.name, " (", (file.size / 1024).toFixed(1), " KB)")), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      onClick: handleImport,
      disabled: !file || !selectedClass || loading,
      variant: "primary",
      size: "lg"
    }, loading ? /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(designSystem.Loader, null), " \u0110ang import...") : 'üì§ Import sinh vi√™n'), (!file || !selectedClass) && /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      mt: "sm",
      color: "grey60",
      fontSize: "sm"
    }, !selectedClass && !file && 'Vui l√≤ng ch·ªçn l·ªõp h·ªçc v√† file Excel', !selectedClass && file && 'Vui l√≤ng ch·ªçn l·ªõp h·ªçc', selectedClass && !file && 'Vui l√≤ng ch·ªçn file Excel')), result && /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.MessageBox, {
      variant: result.details.errorCount > 0 ? 'info' : 'success',
      mb: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, /*#__PURE__*/React__default.default.createElement("strong", null, "\uD83D\uDCCA K\u1EBFt qu\u1EA3 import:"), /*#__PURE__*/React__default.default.createElement("br", null), "\u2705 Th\xE0nh c\xF4ng: ", result.details.successCount, " sinh vi\xEAn", /*#__PURE__*/React__default.default.createElement("br", null), "\u274C L\u1ED7i: ", result.details.errorCount, " d\xF2ng", /*#__PURE__*/React__default.default.createElement("br", null), "\uD83D\uDCC4 T\u1ED5ng x\u1EED l\xFD: ", result.details.totalProcessed, " d\xF2ng")), result.details.errors && result.details.errors.length > 0 && /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "h6",
      mb: "default",
      color: "error"
    }, "\u2757 Chi ti\u1EBFt l\u1ED7i:"), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      bg: "grey20",
      p: "default",
      borderRadius: "default"
    }, result.details.errors.map((error, index) => /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      key: index,
      color: "error",
      fontSize: "sm",
      mb: "xs"
    }, "\u2022 ", error)), result.details.errorCount > 10 && /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      color: "grey60",
      fontSize: "sm",
      fontStyle: "italic"
    }, "... v\xE0 ", result.details.errorCount - 10, " l\u1ED7i kh\xE1c")))));
  };

  const BulkEnrollmentComponent = () => {
    const [loading, setLoading] = React.useState(false);
    const [classes, setClasses] = React.useState([]);
    const [subjects, setSubjects] = React.useState([]);
    const [cohorts, setCohorts] = React.useState([]);
    const [semesters, setSemesters] = React.useState([]);
    const [selectedClass, setSelectedClass] = React.useState('');
    const [selectedSubject, setSelectedSubject] = React.useState('');
    const [selectedCohort, setSelectedCohort] = React.useState('');
    const [selectedSemester, setSelectedSemester] = React.useState('');
    const [loadingData, setLoadingData] = React.useState(true);
    const [students, setStudents] = React.useState([]);
    const addNotice = adminjs.useNotice();

    // L·∫•y danh s√°ch l·ªõp v√† m√¥n h·ªçc khi component mount
    React.useEffect(() => {
      const fetchData = async () => {
        try {
          // Fetch classes - if inside AdminJS use admin-api to respect session and teacher assignments
          let classesData = null;
          try {
            if (window && window.location && window.location.pathname && window.location.pathname.startsWith('/admin')) {
              // admin UI: call admin-api which can infer current admin's classes
              const classesResponse = await fetch('/admin-api/teacher-assignments', {
                credentials: 'include'
              });
              classesData = await classesResponse.json();
              // Support two shapes: { success: true, data: [...] } or raw array
              let classesArray = [];
              if (Array.isArray(classesData)) {
                classesArray = classesData;
              } else if (classesData && classesData.success && Array.isArray(classesData.data)) {
                classesArray = classesData.data;
              }
              if (classesArray.length) {
                const classOptions = classesArray.map(cls => ({
                  value: String(cls.id),
                  label: `${cls.classCode} - ${cls.className}`
                }));
                setClasses(classOptions);
              } else {
                console.debug('BulkEnrollmentComponent: no classes returned from admin-api/teacher-assignments', classesData);
              }
            } else {
              const classesResponse = await fetch('/api/student-import/classes');
              classesData = await classesResponse.json();
              if (classesData.success) {
                const classOptions = classesData.data.map(cls => ({
                  value: cls.id.toString(),
                  label: `${cls.classCode} - ${cls.className}`
                }));
                setClasses(classOptions);
              }
            }
          } catch (e) {
            console.error('Error fetching classes (bulk enrollment):', e);
          }

          // Fetch subjects  
          const subjectsResponse = await fetch('/api/bulk-enrollment/subjects');
          const subjectsData = await subjectsResponse.json();
          if (subjectsData.success) {
            const subjectOptions = subjectsData.data.map(subject => ({
              value: subject.id.toString(),
              label: `${subject.subjectCode} - ${subject.subjectName}`
            }));
            setSubjects(subjectOptions);
          }

          // Fetch cohorts
          const cohortsResponse = await fetch('/api/cohorts');
          const cohortsData = await cohortsResponse.json();
          if (cohortsData.success) {
            const cohortOptions = cohortsData.data.map(cohort => ({
              value: cohort.cohortId.toString(),
              label: cohort.name
            }));
            setCohorts(cohortOptions);
          }

          // Fetch semesters
          const semestersResponse = await fetch('/api/semesters');
          const semestersData = await semestersResponse.json();
          if (semestersData.success) {
            const semesterOptions = semestersData.data.map(semester => ({
              value: semester.semesterId.toString(),
              label: semester.displayName || `${semester.name}`,
              cohortId: semester.cohortId.toString()
            }));
            setSemesters(semesterOptions);
          }
        } catch (error) {
          console.error('Fetch data error:', error);
          addNotice({
            message: `L·ªói t·∫£i d·ªØ li·ªáu: ${error.message}`,
            type: 'error'
          });
        } finally {
          setLoadingData(false);
        }
      };
      fetchData();
    }, []);

    // L·∫•y danh s√°ch sinh vi√™n khi ch·ªçn l·ªõp
    React.useEffect(() => {
      if (selectedClass) {
        fetchStudentsInClass();
      } else {
        setStudents([]);
      }
    }, [selectedClass]);
    const fetchStudentsInClass = async () => {
      try {
        const response = await fetch(`/api/grade/students/by-class/${selectedClass.value}`);
        const data = await response.json();
        if (data.success) {
          // Check if we have students array
          const students = data.students || data.data || [];
          if (Array.isArray(students) && students.length > 0) {
            // Transform data t·ª´ AdminJS format sang flat format
            const transformedStudents = students.map(student => ({
              id: student.id,
              studentCode: student.params ? student.params.studentCode : student.studentCode,
              fullName: student.params ? student.params.fullName : student.fullName,
              email: student.params ? student.params.email : student.email
            }));
            setStudents(transformedStudents);
          } else {
            setStudents([]);
            addNotice({
              message: 'Kh√¥ng c√≥ sinh vi√™n n√†o trong l·ªõp n√†y',
              type: 'info'
            });
          }
        } else {
          console.log('API returned success: false');
          setStudents([]);
          addNotice({
            message: data.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch sinh vi√™n',
            type: 'error'
          });
        }
      } catch (error) {
        console.error('Fetch students error:', error);
        setStudents([]);
        addNotice({
          message: `L·ªói t·∫£i sinh vi√™n: ${error.message}`,
          type: 'error'
        });
      }
    };
    const handleBulkEnroll = async () => {
      // Check for falsy values AND empty strings
      if (!selectedClass || !selectedSubject || !selectedCohort || !selectedSemester || selectedClass === '' || selectedSubject === '' || selectedCohort === '' || selectedSemester === '') {
        addNotice({
          message: 'Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß l·ªõp, m√¥n h·ªçc, kh√≥a v√† h·ªçc k·ª≥',
          type: 'error'
        });
        return;
      }
      if (!students || students.length === 0) {
        addNotice({
          message: 'Kh√¥ng c√≥ sinh vi√™n n√†o trong l·ªõp ƒë·ªÉ ƒëƒÉng k√Ω',
          type: 'error'
        });
        return;
      }
      setLoading(true);

      // Extract values if they are objects, otherwise use directly
      const cohortValue = typeof selectedCohort === 'object' ? selectedCohort.value : selectedCohort;
      const semesterValue = typeof selectedSemester === 'object' ? selectedSemester.value : selectedSemester;
      const classValue = typeof selectedClass === 'object' ? selectedClass.value : selectedClass;
      const subjectValue = typeof selectedSubject === 'object' ? selectedSubject.value : selectedSubject;
      const requestBody = {
        classId: classValue,
        subjectId: subjectValue,
        cohortId: cohortValue,
        semesterId: semesterValue,
        studentIds: students.map(s => s.id)
      };
      console.log('BulkEnroll - Request body:', requestBody);
      try {
        const response = await fetch('/api/bulk-enrollment/enroll', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(requestBody)
        });
        const data = await response.json();
        if (data.success) {
          addNotice({
            message: `ƒê√£ ƒëƒÉng k√Ω th√†nh c√¥ng cho ${data.enrolledCount}/${students.length} sinh vi√™n`,
            type: 'success'
          });

          // Reset form
          setSelectedClass('');
          setSelectedSubject('');
          setSelectedCohort('');
          setSelectedSemester('');
          setStudents([]);
        } else {
          addNotice({
            message: data.message || 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω',
            type: 'error'
          });
        }
      } catch (error) {
        console.error('Bulk enrollment error:', error);
        addNotice({
          message: `L·ªói ƒëƒÉng k√Ω: ${error.message}`,
          type: 'error'
        });
      } finally {
        setLoading(false);
      }
    };

    // L·ªçc h·ªçc k·ª≥ theo cohort ƒë√£ ch·ªçn
    const filteredSemesterOptions = selectedCohort && selectedCohort.value ? semesters.filter(s => s.cohortId === selectedCohort.value) : semesters;
    if (loadingData) {
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        p: "xl"
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Loader, null), /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
        mt: "default"
      }, "\u0110ang t\u1EA3i d\u1EEF li\u1EC7u..."));
    }
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      p: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "h2",
      mb: "lg"
    }, "\uD83C\uDF93 \u0110\u0103ng k\xFD m\xF4n h\u1ECDc theo l\u1EDBp"), /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      color: "grey60"
    }, "Ch\u1ECDn l\u1EDBp, m\xF4n h\u1ECDc v\xE0 h\u1ECDc k\u1EF3 \u0111\u1EC3 \u0111\u0103ng k\xFD cho t\u1EA5t c\u1EA3 sinh vi\xEAn trong l\u1EDBp")), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      bg: "white",
      border: "default",
      borderRadius: "default",
      p: "xl",
      mb: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "h3",
      mb: "lg"
    }, "\uD83D\uDCCB Th\xF4ng tin \u0111\u0103ng k\xFD"), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      mb: "sm"
    }, "\uD83C\uDFEB Ch\u1ECDn l\u1EDBp h\u1ECDc:"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      value: selectedClass,
      onChange: value => setSelectedClass(value),
      options: [{
        value: '',
        label: 'Ch·ªçn l·ªõp...'
      }, ...classes],
      placeholder: "Ch\u1ECDn l\u1EDBp h\u1ECDc"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      mb: "sm"
    }, "\uD83D\uDCDA Ch\u1ECDn m\xF4n h\u1ECDc:"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      value: selectedSubject,
      onChange: value => setSelectedSubject(value),
      options: [{
        value: '',
        label: 'Ch·ªçn m√¥n h·ªçc...'
      }, ...subjects],
      placeholder: "Ch\u1ECDn m\xF4n h\u1ECDc"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      mb: "sm"
    }, "\uD83C\uDF93 Ch\u1ECDn kh\xF3a:"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      value: selectedCohort,
      onChange: value => {
        console.log('Cohort selected:', value);
        setSelectedCohort(value);
        setSelectedSemester(null); // Use null instead of empty string
      },
      options: [{
        value: '',
        label: 'Ch·ªçn kh√≥a...'
      }, ...cohorts],
      placeholder: "Ch\u1ECDn kh\xF3a"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      mb: "sm"
    }, "\uD83D\uDCC5 Ch\u1ECDn h\u1ECDc k\u1EF3:"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      value: selectedSemester,
      onChange: value => {
        console.log('Semester selected:', value);
        setSelectedSemester(value);
      },
      options: [{
        value: '',
        label: 'Ch·ªçn h·ªçc k·ª≥...'
      }, ...filteredSemesterOptions],
      placeholder: "Ch\u1ECDn h\u1ECDc k\u1EF3",
      isDisabled: !selectedCohort
    }))), selectedClass && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      bg: "white",
      border: "default",
      borderRadius: "default",
      p: "xl",
      mb: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      variant: "h3",
      mb: "lg"
    }, "\uD83D\uDC65 Sinh vi\xEAn trong l\u1EDBp (", students?.length || 0, ")"), students && students.length > 0 ? /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, students.slice(0, 10).map((student, index) => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      key: student.id,
      p: "sm",
      border: "default",
      borderRadius: "sm",
      mb: "sm"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, index + 1, ". ", student.studentCode, " - ", student.fullName))), students.length > 10 && /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      color: "grey60",
      mt: "sm"
    }, "... v\xE0 ", students.length - 10, " sinh vi\xEAn kh\xE1c")) : /*#__PURE__*/React__default.default.createElement(designSystem.MessageBox, {
      message: "Kh\xF4ng c\xF3 sinh vi\xEAn n\xE0o trong l\u1EDBp n\xE0y",
      variant: "info"
    })), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      onClick: handleBulkEnroll,
      disabled: loading || !selectedClass || !selectedSubject || !selectedCohort || !selectedSemester || !students || students.length === 0,
      variant: "primary",
      size: "lg"
    }, loading ? 'ƒêang x·ª≠ l√Ω...' : `üöÄ ƒêƒÉng k√Ω cho ${students?.length || 0} sinh vi√™n`)));
  };

  const StudentTranscriptComponent = () => {
    const [students, setStudents] = React.useState([]);
    const [selectedStudent, setSelectedStudent] = React.useState('');
    const [transcriptData, setTranscriptData] = React.useState(null);
    const [loading, setLoading] = React.useState(false);
    const [error, setError] = React.useState(null);

    // Fetch students list
    React.useEffect(() => {
      const fetchStudents = async () => {
        try {
          const response = await fetch('/api/students');
          const data = await response.json();
          console.log('Students response:', data);
          if (data.success) {
            setStudents(data.data || []);
          } else {
            setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch sinh vi√™n');
          }
        } catch (error) {
          console.error('Error fetching students:', error);
          setError('L·ªói k·∫øt n·ªëi API: ' + error.message);
        }
      };
      fetchStudents();
    }, []);

    // Fetch transcript for selected student
    const fetchTranscript = async studentCode => {
      if (!studentCode) {
        setTranscriptData(null);
        return;
      }
      setLoading(true);
      setError(null);
      try {
        const response = await fetch(`/api/student/${studentCode}/transcript`);
        const data = await response.json();
        console.log('Transcript response:', data);
        if (data.success) {
          setTranscriptData(data.data);
        } else {
          setError('Kh√¥ng th·ªÉ t·∫£i b·∫£ng ƒëi·ªÉm: ' + data.message);
        }
      } catch (error) {
        console.error('Error fetching transcript:', error);
        setError('L·ªói k·∫øt n·ªëi API: ' + error.message);
      } finally {
        setLoading(false);
      }
    };
    const handleStudentChange = e => {
      const studentCode = e.target.value;
      setSelectedStudent(studentCode);
      fetchTranscript(studentCode);
    };
    const styles = {
      container: {
        padding: '20px',
        fontFamily: 'Times New Roman, serif',
        backgroundColor: '#f9f9f9',
        minHeight: '100vh'
      },
      paper: {
        backgroundColor: 'white',
        padding: '30px',
        borderRadius: '8px',
        boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
        maxWidth: '1000px',
        margin: '0 auto'
      },
      header: {
        textAlign: 'center',
        marginBottom: '30px'
      },
      title: {
        fontSize: '20px',
        fontWeight: 'bold',
        color: '#333',
        marginBottom: '20px',
        textTransform: 'uppercase'
      },
      studentSelector: {
        marginBottom: '30px',
        textAlign: 'center'
      },
      select: {
        padding: '10px 15px',
        fontSize: '16px',
        border: '2px solid #ddd',
        borderRadius: '5px',
        minWidth: '400px',
        backgroundColor: 'white'
      },
      studentInfo: {
        display: 'grid',
        gridTemplateColumns: '1fr 1fr',
        gap: '20px',
        marginBottom: '30px',
        fontSize: '14px',
        lineHeight: '1.6'
      },
      infoColumn: {
        display: 'flex',
        flexDirection: 'column',
        gap: '8px'
      },
      infoRow: {
        display: 'flex',
        justifyContent: 'space-between'
      },
      label: {
        fontWeight: 'bold',
        minWidth: '120px'
      },
      semesterTitle: {
        fontSize: '16px',
        fontWeight: 'bold',
        color: '#333',
        marginTop: '30px',
        marginBottom: '15px',
        textAlign: 'left'
      },
      table: {
        width: '100%',
        borderCollapse: 'collapse',
        marginBottom: '20px',
        fontSize: '13px',
        border: '2px solid #333'
      },
      th: {
        backgroundColor: '#f5f5f5',
        border: '1px solid #333',
        padding: '8px 4px',
        textAlign: 'center',
        fontWeight: 'bold',
        fontSize: '12px',
        verticalAlign: 'middle'
      },
      td: {
        border: '1px solid #333',
        padding: '6px 4px',
        textAlign: 'center',
        verticalAlign: 'middle'
      },
      tdLeft: {
        border: '1px solid #333',
        padding: '6px 8px',
        textAlign: 'left',
        verticalAlign: 'middle'
      },
      summaryRow: {
        backgroundColor: '#f0f0f0',
        fontWeight: 'bold'
      },
      loading: {
        textAlign: 'center',
        padding: '40px',
        fontSize: '16px',
        color: '#666'
      },
      error: {
        backgroundColor: '#ffebee',
        color: '#c62828',
        padding: '15px',
        borderRadius: '5px',
        marginBottom: '20px',
        border: '1px solid #ffcdd2'
      }
    };
    return /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.container
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.paper
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.header
    }, /*#__PURE__*/React__default.default.createElement("h1", {
      style: styles.title
    }, "B\u1EA3ng \u0111i\u1EC3m sinh vi\xEAn")), error && /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.error
    }, "\u274C ", error), /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.studentSelector
    }, /*#__PURE__*/React__default.default.createElement("select", {
      style: styles.select,
      value: selectedStudent,
      onChange: handleStudentChange
    }, /*#__PURE__*/React__default.default.createElement("option", {
      value: ""
    }, "-- Ch\u1ECDn sinh vi\xEAn --"), students.map(student => /*#__PURE__*/React__default.default.createElement("option", {
      key: student.studentCode,
      value: student.studentCode
    }, student.studentCode, " - ", student.fullName)))), loading && /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.loading
    }, "\u23F3 \u0110ang t\u1EA3i b\u1EA3ng \u0111i\u1EC3m..."), transcriptData && !loading && /*#__PURE__*/React__default.default.createElement("div", null, /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.studentInfo
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoColumn
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "H\u1ECD t\xEAn:"), /*#__PURE__*/React__default.default.createElement("span", null, transcriptData.student?.fullName || '')), /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "MSSV:"), /*#__PURE__*/React__default.default.createElement("span", null, transcriptData.student?.studentCode || '')), /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "Ng\xE0y sinh:"), /*#__PURE__*/React__default.default.createElement("span", null, transcriptData.student?.dateOfBirth || '')), /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "L\u1EDBp sinh ho\u1EA1t:"), /*#__PURE__*/React__default.default.createElement("span", null, transcriptData.student?.className || ''))), /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoColumn
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "Gi\u1EDBi t\xEDnh:"), /*#__PURE__*/React__default.default.createElement("span", null, transcriptData.student?.gender === 'male' ? 'Nam' : transcriptData.student?.gender === 'female' ? 'N·ªØ' : '')), /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "S\u1ED1 t\xEDn ch\u1EC9:"), /*#__PURE__*/React__default.default.createElement("span", null, transcriptData.summary?.totalCredits || 0)), /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "Kh\xF3a tuy\u1EC3n:"), /*#__PURE__*/React__default.default.createElement("span", null, transcriptData.student?.cohort || '')), /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "H\u1EC7 \u0111\xE0o t\u1EA1o:"), /*#__PURE__*/React__default.default.createElement("span", null, "Ch\xEDnh quy")))), Object.keys(transcriptData.semesters || {}).map(semesterKey => {
      const semesterData = transcriptData.semesters[semesterKey];
      return /*#__PURE__*/React__default.default.createElement("div", {
        key: semesterKey
      }, /*#__PURE__*/React__default.default.createElement("div", {
        style: styles.semesterTitle
      }, "Th\xF4ng tin h\u1ECDc ph\u1EA7n ", semesterData?.semesterName || 'h·ªçc k·ª≥', " - N\u0103m h\u1ECDc ", semesterData?.academicYear || '2024-2025'), /*#__PURE__*/React__default.default.createElement("table", {
        style: styles.table
      }, /*#__PURE__*/React__default.default.createElement("thead", null, /*#__PURE__*/React__default.default.createElement("tr", null, /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "STT"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "M\xE3 m\xF4n h\u1ECDc"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "T\xEAn m\xF4n h\u1ECDc"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "S\u1ED1 t\xEDn ch\u1EC9"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "\u0110i\u1EC3m TH"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "\u0110i\u1EC3m QT"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "\u0110i\u1EC3m GK"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "\u0110i\u1EC3m CK"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "\u0110i\u1EC3m HP"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "Ghi ch\xFA"))), /*#__PURE__*/React__default.default.createElement("tbody", null, (semesterData?.subjects || []).map((subject, index) => /*#__PURE__*/React__default.default.createElement("tr", {
        key: index
      }, /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, index + 1), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, subject.subjectCode), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.tdLeft
      }, subject.subjectName), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, subject.credits), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, subject.thScore || ''), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, subject.qtScore || subject.txScore || ''), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, subject.gkScore || subject.dkScore1 || subject.dkScore2 || subject.dkScore3 || ''), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, subject.ckScore || subject.finalScore || ''), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, subject.hpScore || subject.tbmhScore || ''), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, subject.isPassed ? '' : 'Ch∆∞a ƒë·∫°t'))), /*#__PURE__*/React__default.default.createElement("tr", {
        style: styles.summaryRow
      }, /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td,
        colSpan: "2"
      }, /*#__PURE__*/React__default.default.createElement("strong", null, "Trung b\xECnh h\u1ECDc k\u1EF3")), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, /*#__PURE__*/React__default.default.createElement("strong", null, semesterData?.totalCredits || (semesterData?.subjects || []).reduce((sum, s) => sum + (s.credits || 0), 0))), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td,
        colSpan: "5"
      }), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, /*#__PURE__*/React__default.default.createElement("strong", null, semesterData?.semesterGPA?.toFixed(2) || '')), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      })))));
    })), !transcriptData && selectedStudent && !loading && !error && /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        textAlign: 'center',
        padding: '40px',
        color: '#666'
      }
    }, "Kh\xF4ng c\xF3 d\u1EEF li\u1EC7u b\u1EA3ng \u0111i\u1EC3m cho sinh vi\xEAn n\xE0y.")));
  };

  /**
   * Student Record Transcript Component
   * Component hi·ªÉn th·ªã b·∫£ng ƒëi·ªÉm cho m·ªôt sinh vi√™n c·ª• th·ªÉ t·ª´ record
   * Based on StudentTranscriptComponent
   */
  const StudentRecordTranscriptComponent = ({
    record,
    resource
  }) => {
    const [transcriptData, setTranscriptData] = React.useState(null);
    const [loading, setLoading] = React.useState(true);
    const [error, setError] = React.useState(null);

    // L·∫•y studentCode t·ª´ record - AdminJS format
    const studentCode = record?.params?.studentCode || record?.record?.params?.studentCode || record?.populated?.studentCode || record?.studentCode || (record?.params && Object.keys(record.params).length > 0 ? Object.values(record.params).find(val => typeof val === 'string' && val.startsWith('SV')) : null);

    // Debug log ƒë·ªÉ ki·ªÉm tra record structure
    console.log('Full record object:', record);
    console.log('Student code found:', studentCode);

    // Fetch transcript for the student - s·ª≠ d·ª•ng logic gi·ªëng StudentTranscriptComponent
    React.useEffect(() => {
      const fetchTranscript = async () => {
        if (!studentCode) {
          console.error('Cannot find studentCode in record. Full record structure:', JSON.stringify(record, null, 2));
          setError(`Kh√¥ng t√¨m th·∫•y m√£ sinh vi√™n trong record. Available keys: ${Object.keys(record || {}).join(', ')}`);
          setLoading(false);
          return;
        }
        setLoading(true);
        setError(null);
        try {
          console.log('Fetching transcript for studentCode:', studentCode);
          const response = await fetch(`/api/student/${studentCode}/transcript`);
          const data = await response.json();
          console.log('Transcript response:', data);
          if (data.success) {
            setTranscriptData(data.data);
          } else {
            setError('Kh√¥ng th·ªÉ t·∫£i b·∫£ng ƒëi·ªÉm: ' + data.message);
          }
        } catch (error) {
          console.error('Error fetching transcript:', error);
          setError('L·ªói k·∫øt n·ªëi API: ' + error.message);
        } finally {
          setLoading(false);
        }
      };
      fetchTranscript();
    }, [studentCode]);

    // Copy styles t·ª´ StudentTranscriptComponent
    const styles = {
      container: {
        backgroundColor: '#f9f9f9',
        minHeight: '100vh'
      },
      paper: {
        backgroundColor: 'white',
        padding: '30px',
        borderRadius: '8px',
        boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
        maxWidth: '1000px',
        margin: '0 auto'
      },
      header: {
        textAlign: 'center',
        marginBottom: '30px'
      },
      title: {
        fontSize: '20px',
        fontWeight: 'bold',
        color: '#333',
        marginBottom: '20px',
        textTransform: 'uppercase'
      },
      studentInfo: {
        display: 'grid',
        gridTemplateColumns: '1fr 1fr',
        gap: '20px',
        marginBottom: '30px',
        fontSize: '14px',
        lineHeight: '1.6'
      },
      infoColumn: {
        display: 'flex',
        flexDirection: 'column',
        gap: '8px'
      },
      infoRow: {
        display: 'flex'
        //   justifyContent: 'space-between'
      },
      label: {
        fontWeight: 'bold',
        minWidth: '120px'
      },
      loading: {
        textAlign: 'center',
        padding: '40px',
        fontSize: '16px',
        color: '#666'
      },
      error: {
        backgroundColor: '#ffebee',
        color: '#c62828',
        padding: '15px',
        borderRadius: '5px',
        marginBottom: '20px',
        border: '1px solid #ffcdd2'
      },
      semesterTitle: {
        fontSize: '14px',
        fontWeight: 'bold',
        color: '#333',
        marginBottom: '15px',
        textAlign: 'left'
      },
      table: {
        width: '100%',
        borderCollapse: 'collapse',
        marginBottom: '20px',
        fontSize: '13px',
        border: '2px solid #333'
      },
      th: {
        backgroundColor: '#f5f5f5',
        border: '1px solid #333',
        padding: '8px 4px',
        textAlign: 'center',
        fontWeight: 'bold',
        fontSize: '12px',
        verticalAlign: 'middle'
      },
      td: {
        border: '1px solid #333',
        padding: '6px 4px',
        textAlign: 'center',
        verticalAlign: 'middle'
      },
      tdLeft: {
        border: '1px solid #333',
        padding: '6px 8px',
        textAlign: 'left',
        verticalAlign: 'middle'
      },
      summaryRow: {
        backgroundColor: '#f0f0f0',
        fontWeight: 'bold'
      }
    }; // Hi·ªÉn th·ªã loading

    // Helper: map numeric score to Vietnamese category (same rules as GradeService)
    const mapScoreToCategory = score => {
      if (score === null || score === undefined || score === '') return '';
      const s = Number(score);
      if (Number.isNaN(s)) return '';
      if (s >= 9) return 'Xu·∫•t s·∫Øc';
      if (s >= 8.0) return 'Gi·ªèi';
      if (s >= 7.0) return 'Kh√°';
      if (s >= 5.0) return 'Trung b√¨nh';
      return 'Y·∫øu';
    };
    if (loading) {
      return /*#__PURE__*/React__default.default.createElement("div", {
        style: styles.container
      }, /*#__PURE__*/React__default.default.createElement("div", {
        style: styles.paper
      }, /*#__PURE__*/React__default.default.createElement("div", {
        style: styles.loading
      }, "\u23F3 \u0110ang t\u1EA3i b\u1EA3ng \u0111i\u1EC3m...")));
    }

    // Hi·ªÉn th·ªã error
    if (error) {
      return /*#__PURE__*/React__default.default.createElement("div", {
        style: styles.container
      }, /*#__PURE__*/React__default.default.createElement("div", {
        style: styles.paper
      }, /*#__PURE__*/React__default.default.createElement("div", {
        style: styles.error
      }, "\u274C ", error)));
    }
    return /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.container
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.paper
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.header
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.title
    }, "TR\u01AF\u1EDCNG CAO \u0110\u1EB2NG C\u1EA2NH S\xC1T NH\xC2N D\xC2N II", /*#__PURE__*/React__default.default.createElement("br", null), /*#__PURE__*/React__default.default.createElement("hr", null), "B\u1EA2NG \u0110I\u1EC2M H\u1ECCC VI\xCAN")), transcriptData && /*#__PURE__*/React__default.default.createElement("div", null, /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.studentInfo
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoColumn
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "H\u1ECD t\xEAn:"), /*#__PURE__*/React__default.default.createElement("span", null, transcriptData.student?.fullName || '')), /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "MSSV:"), /*#__PURE__*/React__default.default.createElement("span", null, transcriptData.student?.studentCode || '')), /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "Ng\xE0y sinh:"), /*#__PURE__*/React__default.default.createElement("span", null, transcriptData.student?.dateOfBirth || '')), /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "L\u1EDBp sinh ho\u1EA1t:"), /*#__PURE__*/React__default.default.createElement("span", null, transcriptData.student?.className || ''))), /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoColumn
    }, /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "Gi\u1EDBi t\xEDnh:"), /*#__PURE__*/React__default.default.createElement("span", null, transcriptData.student?.gender === 'male' ? 'Nam' : transcriptData.student?.gender === 'female' ? 'N·ªØ' : '')), /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "S\u1ED1 t\xEDn ch\u1EC9:"), /*#__PURE__*/React__default.default.createElement("span", null, transcriptData.summary?.totalCredits || 0)), /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "Kh\xF3a tuy\u1EC3n:"), /*#__PURE__*/React__default.default.createElement("span", null, transcriptData.student?.cohort || '')), /*#__PURE__*/React__default.default.createElement("div", {
      style: styles.infoRow
    }, /*#__PURE__*/React__default.default.createElement("span", {
      style: styles.label
    }, "H\u1EC7 \u0111\xE0o t\u1EA1o:"), /*#__PURE__*/React__default.default.createElement("span", null, "Ch\xEDnh quy")))), Object.keys(transcriptData.semesters || {}).map(semester => {
      // T√≠nh to√°n s·ªë c·ªôt ƒêK c·∫ßn thi·∫øt d·ª±a tr√™n d·ªØ li·ªáu c√≥ s·∫µn
      const subjects = transcriptData.semesters[semester]?.subjects || [];
      let maxDkScores = 0;
      subjects.forEach(subject => {
        let dkCount = 0;
        if (subject.dkScore1) dkCount = Math.max(dkCount, 1);
        if (subject.dkScore2) dkCount = Math.max(dkCount, 2);
        if (subject.dkScore3) dkCount = Math.max(dkCount, 3);
        maxDkScores = Math.max(maxDkScores, dkCount);
      });
      return /*#__PURE__*/React__default.default.createElement("div", {
        key: semester
      }, /*#__PURE__*/React__default.default.createElement("div", {
        style: styles.semesterTitle
      }, "Th\xF4ng tin h\u1ECDc ph\u1EA7n h\u1ECDc k\u1EF3 ", semester.replace('HK', ''), " - N\u0103m h\u1ECDc ", transcriptData.semesters[semester]?.academicYear || ''), /*#__PURE__*/React__default.default.createElement("table", {
        style: styles.table
      }, /*#__PURE__*/React__default.default.createElement("thead", null, /*#__PURE__*/React__default.default.createElement("tr", null, /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "STT"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "M\xE3 m\xF4n h\u1ECDc"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "T\xEAn m\xF4n h\u1ECDc"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "S\u1ED1 t\xEDn ch\u1EC9"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "\u0110i\u1EC3m TX"), Array.from({
        length: maxDkScores
      }, (_, index) => /*#__PURE__*/React__default.default.createElement("th", {
        key: `dk-${index}`,
        style: styles.th,
        rowSpan: "2"
      }, "\u0110i\u1EC3m \u0110K", maxDkScores > 1 ? ` ${index + 1}` : '')), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "\u0110i\u1EC3m THI"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "\u0110i\u1EC3m HP"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "X\u1EBFp lo\u1EA1i"), /*#__PURE__*/React__default.default.createElement("th", {
        style: styles.th,
        rowSpan: "2"
      }, "Ghi ch\xFA"))), /*#__PURE__*/React__default.default.createElement("tbody", null, subjects.map((subject, index) => /*#__PURE__*/React__default.default.createElement("tr", {
        key: index
      }, /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, index + 1), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, subject.subjectCode), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.tdLeft
      }, subject.subjectName), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, subject.credits), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, subject.qtScore || subject.txScore || ''), Array.from({
        length: maxDkScores
      }, (_, index) => {
        const dkScoreField = `dkScore${index + 1}`;
        return /*#__PURE__*/React__default.default.createElement("td", {
          key: `dk-${index}`,
          style: styles.td
        }, subject[dkScoreField] || '');
      }), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, subject.ckScore || subject.finalScore || ''), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, subject.hpScore || subject.tbmhScore || ''), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, subject.letterGrade || mapScoreToCategory(subject.hpScore || subject.tbmhScore) || ''), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, subject.isPassed ? 'ƒê·∫°t' : 'Ch∆∞a ƒë·∫°t'))), /*#__PURE__*/React__default.default.createElement("tr", {
        style: styles.summaryRow
      }, /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td,
        colSpan: "3"
      }, /*#__PURE__*/React__default.default.createElement("strong", null, "Trung b\xECnh h\u1ECDc k\u1EF3")), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, /*#__PURE__*/React__default.default.createElement("strong", null, transcriptData.semesters[semester]?.totalCredits || subjects.reduce((sum, s) => sum + (s.credits || 0), 0))), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td,
        colSpan: maxDkScores + 3
      }), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      }, /*#__PURE__*/React__default.default.createElement("strong", null, transcriptData.semesters[semester]?.semesterGPA?.toFixed(2) || '')), /*#__PURE__*/React__default.default.createElement("td", {
        style: styles.td
      })))));
    })), !transcriptData && !loading && !error && /*#__PURE__*/React__default.default.createElement("div", {
      style: {
        textAlign: 'center',
        padding: '40px',
        color: '#666'
      }
    }, "Kh\xF4ng c\xF3 d\u1EEF li\u1EC7u b\u1EA3ng \u0111i\u1EC3m cho sinh vi\xEAn n\xE0y.")));
  };

  // AdminJS show component: render label + formatted date (dd/MM/yyyy)
  const DateShowDDMMYYYY = props => {
    const {
      property,
      record
    } = props;
    const path = property?.path;
    const raw = record?.params?.[path];
    const formatRaw = value => {
      if (!value && value !== 0) return '';
      try {
        const isoMatch = String(value).match(/^(\d{4})-(\d{2})-(\d{2})$/);
        let d;
        if (isoMatch) {
          const yyyy = parseInt(isoMatch[1], 10);
          const mm = parseInt(isoMatch[2], 10) - 1;
          const dd = parseInt(isoMatch[3], 10);
          d = new Date(Date.UTC(yyyy, mm, dd));
        } else {
          d = new Date(value);
        }
        if (isNaN(d.getTime())) return String(value);
        const dd = String(d.getUTCDate()).padStart(2, '0');
        const mm = String(d.getUTCMonth() + 1).padStart(2, '0');
        const yyyy = d.getUTCFullYear();
        return `${dd}/${mm}/${yyyy}`;
      } catch (e) {
        return String(value);
      }
    };

    // Resolve label: property.label can be a string or a localized object
    const resolveLabel = () => {
      // Prefer description as the displayed label if present (resource editors often put human text there)
      if (property?.description) return property.description;
      // First try: label defined on the AdminJS resource metadata (props.resource.properties)
      try {
        const resProps = props?.resource?.properties;
        const resLabel = resProps?.[property?.path]?.label;
        if (resLabel) {
          if (typeof resLabel === 'string') return resLabel;
          if (typeof resLabel === 'object') {
            const locale = props && props.currentAdmin && (props.currentAdmin.locale || props.currentAdmin.language) || null;
            if (locale && resLabel[locale]) return resLabel[locale];
            const vals = Object.values(resLabel).filter(v => typeof v === 'string');
            if (vals.length) return vals[0];
          }
        }
      } catch (e) {
        // ignore
      }
      // Fallback: some setups expose resource.options.properties
      try {
        const resLabelOpt = props?.resource?.options?.properties?.[property?.path]?.label;
        if (resLabelOpt) {
          if (typeof resLabelOpt === 'string') return resLabelOpt;
          if (typeof resLabelOpt === 'object') {
            const locale = props && props.currentAdmin && (props.currentAdmin.locale || props.currentAdmin.language) || null;
            if (locale && resLabelOpt[locale]) return resLabelOpt[locale];
            const vals = Object.values(resLabelOpt).filter(v => typeof v === 'string');
            if (vals.length) return vals[0];
          }
        }
      } catch (e) {
        // ignore
      }
      const rawLabel = property?.label;
      // If label missing, try description
      if (!rawLabel) return property?.description || property?.name || '';
      if (typeof rawLabel === 'string') {
        // If AdminJS passed the raw property name as label (e.g. 'startDate'), prefer description
        if (rawLabel === property?.name || rawLabel === property?.path) {
          if (property?.description) return property.description;
        }
        return rawLabel;
      }
      if (typeof rawLabel === 'object') {
        const locale = props && props.currentAdmin && (props.currentAdmin.locale || props.currentAdmin.language) || null;
        if (locale && rawLabel[locale]) return rawLabel[locale];
        const vals = Object.values(rawLabel).filter(v => typeof v === 'string');
        if (vals.length) return vals[0];
      }
      // Final fallback: map common field paths to Vietnamese labels
      const PATH_LABELS = {
        startDate: 'Ng√†y b·∫Øt ƒë·∫ßu',
        endDate: 'Ng√†y k·∫øt th√∫c',
        dateOfBirth: 'Ng√†y sinh'
      };
      return PATH_LABELS[property?.path] || property?.name || '';
    };
    const labelText = resolveLabel();

    // Render with AdminJS-like label/value layout so show page displays label
    return /*#__PURE__*/React__default.default.createElement("div", {
      className: "adminjs-Property--show"
    }, /*#__PURE__*/React__default.default.createElement("label", {
      className: "adminjs-PropertyLabel"
    }, labelText), /*#__PURE__*/React__default.default.createElement("div", {
      className: "adminjs-PropertyValue"
    }, formatRaw(raw)));
  };

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var flatpickr$1 = {exports: {}};

  /* flatpickr v4.6.13, @license MIT */

  (function (module, exports) {
  	(function (global, factory) {
  	    module.exports = factory() ;
  	}(commonjsGlobal, (function () {
  	    /*! *****************************************************************************
  	    Copyright (c) Microsoft Corporation.

  	    Permission to use, copy, modify, and/or distribute this software for any
  	    purpose with or without fee is hereby granted.

  	    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  	    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  	    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  	    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  	    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  	    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  	    PERFORMANCE OF THIS SOFTWARE.
  	    ***************************************************************************** */

  	    var __assign = function() {
  	        __assign = Object.assign || function __assign(t) {
  	            for (var s, i = 1, n = arguments.length; i < n; i++) {
  	                s = arguments[i];
  	                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
  	            }
  	            return t;
  	        };
  	        return __assign.apply(this, arguments);
  	    };

  	    function __spreadArrays() {
  	        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  	        for (var r = Array(s), k = 0, i = 0; i < il; i++)
  	            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
  	                r[k] = a[j];
  	        return r;
  	    }

  	    var HOOKS = [
  	        "onChange",
  	        "onClose",
  	        "onDayCreate",
  	        "onDestroy",
  	        "onKeyDown",
  	        "onMonthChange",
  	        "onOpen",
  	        "onParseConfig",
  	        "onReady",
  	        "onValueUpdate",
  	        "onYearChange",
  	        "onPreCalendarPosition",
  	    ];
  	    var defaults = {
  	        _disable: [],
  	        allowInput: false,
  	        allowInvalidPreload: false,
  	        altFormat: "F j, Y",
  	        altInput: false,
  	        altInputClass: "form-control input",
  	        animate: typeof window === "object" &&
  	            window.navigator.userAgent.indexOf("MSIE") === -1,
  	        ariaDateFormat: "F j, Y",
  	        autoFillDefaultTime: true,
  	        clickOpens: true,
  	        closeOnSelect: true,
  	        conjunction: ", ",
  	        dateFormat: "Y-m-d",
  	        defaultHour: 12,
  	        defaultMinute: 0,
  	        defaultSeconds: 0,
  	        disable: [],
  	        disableMobile: false,
  	        enableSeconds: false,
  	        enableTime: false,
  	        errorHandler: function (err) {
  	            return typeof console !== "undefined" && console.warn(err);
  	        },
  	        getWeek: function (givenDate) {
  	            var date = new Date(givenDate.getTime());
  	            date.setHours(0, 0, 0, 0);
  	            // Thursday in current week decides the year.
  	            date.setDate(date.getDate() + 3 - ((date.getDay() + 6) % 7));
  	            // January 4 is always in week 1.
  	            var week1 = new Date(date.getFullYear(), 0, 4);
  	            // Adjust to Thursday in week 1 and count number of weeks from date to week1.
  	            return (1 +
  	                Math.round(((date.getTime() - week1.getTime()) / 86400000 -
  	                    3 +
  	                    ((week1.getDay() + 6) % 7)) /
  	                    7));
  	        },
  	        hourIncrement: 1,
  	        ignoredFocusElements: [],
  	        inline: false,
  	        locale: "default",
  	        minuteIncrement: 5,
  	        mode: "single",
  	        monthSelectorType: "dropdown",
  	        nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
  	        noCalendar: false,
  	        now: new Date(),
  	        onChange: [],
  	        onClose: [],
  	        onDayCreate: [],
  	        onDestroy: [],
  	        onKeyDown: [],
  	        onMonthChange: [],
  	        onOpen: [],
  	        onParseConfig: [],
  	        onReady: [],
  	        onValueUpdate: [],
  	        onYearChange: [],
  	        onPreCalendarPosition: [],
  	        plugins: [],
  	        position: "auto",
  	        positionElement: undefined,
  	        prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
  	        shorthandCurrentMonth: false,
  	        showMonths: 1,
  	        static: false,
  	        time_24hr: false,
  	        weekNumbers: false,
  	        wrap: false,
  	    };

  	    var english = {
  	        weekdays: {
  	            shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  	            longhand: [
  	                "Sunday",
  	                "Monday",
  	                "Tuesday",
  	                "Wednesday",
  	                "Thursday",
  	                "Friday",
  	                "Saturday",
  	            ],
  	        },
  	        months: {
  	            shorthand: [
  	                "Jan",
  	                "Feb",
  	                "Mar",
  	                "Apr",
  	                "May",
  	                "Jun",
  	                "Jul",
  	                "Aug",
  	                "Sep",
  	                "Oct",
  	                "Nov",
  	                "Dec",
  	            ],
  	            longhand: [
  	                "January",
  	                "February",
  	                "March",
  	                "April",
  	                "May",
  	                "June",
  	                "July",
  	                "August",
  	                "September",
  	                "October",
  	                "November",
  	                "December",
  	            ],
  	        },
  	        daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
  	        firstDayOfWeek: 0,
  	        ordinal: function (nth) {
  	            var s = nth % 100;
  	            if (s > 3 && s < 21)
  	                return "th";
  	            switch (s % 10) {
  	                case 1:
  	                    return "st";
  	                case 2:
  	                    return "nd";
  	                case 3:
  	                    return "rd";
  	                default:
  	                    return "th";
  	            }
  	        },
  	        rangeSeparator: " to ",
  	        weekAbbreviation: "Wk",
  	        scrollTitle: "Scroll to increment",
  	        toggleTitle: "Click to toggle",
  	        amPM: ["AM", "PM"],
  	        yearAriaLabel: "Year",
  	        monthAriaLabel: "Month",
  	        hourAriaLabel: "Hour",
  	        minuteAriaLabel: "Minute",
  	        time_24hr: false,
  	    };

  	    var pad = function (number, length) {
  	        if (length === void 0) { length = 2; }
  	        return ("000" + number).slice(length * -1);
  	    };
  	    var int = function (bool) { return (bool === true ? 1 : 0); };
  	    /* istanbul ignore next */
  	    function debounce(fn, wait) {
  	        var t;
  	        return function () {
  	            var _this = this;
  	            var args = arguments;
  	            clearTimeout(t);
  	            t = setTimeout(function () { return fn.apply(_this, args); }, wait);
  	        };
  	    }
  	    var arrayify = function (obj) {
  	        return obj instanceof Array ? obj : [obj];
  	    };

  	    function toggleClass(elem, className, bool) {
  	        if (bool === true)
  	            return elem.classList.add(className);
  	        elem.classList.remove(className);
  	    }
  	    function createElement(tag, className, content) {
  	        var e = window.document.createElement(tag);
  	        className = className || "";
  	        content = content || "";
  	        e.className = className;
  	        if (content !== undefined)
  	            e.textContent = content;
  	        return e;
  	    }
  	    function clearNode(node) {
  	        while (node.firstChild)
  	            node.removeChild(node.firstChild);
  	    }
  	    function findParent(node, condition) {
  	        if (condition(node))
  	            return node;
  	        else if (node.parentNode)
  	            return findParent(node.parentNode, condition);
  	        return undefined; // nothing found
  	    }
  	    function createNumberInput(inputClassName, opts) {
  	        var wrapper = createElement("div", "numInputWrapper"), numInput = createElement("input", "numInput " + inputClassName), arrowUp = createElement("span", "arrowUp"), arrowDown = createElement("span", "arrowDown");
  	        if (navigator.userAgent.indexOf("MSIE 9.0") === -1) {
  	            numInput.type = "number";
  	        }
  	        else {
  	            numInput.type = "text";
  	            numInput.pattern = "\\d*";
  	        }
  	        if (opts !== undefined)
  	            for (var key in opts)
  	                numInput.setAttribute(key, opts[key]);
  	        wrapper.appendChild(numInput);
  	        wrapper.appendChild(arrowUp);
  	        wrapper.appendChild(arrowDown);
  	        return wrapper;
  	    }
  	    function getEventTarget(event) {
  	        try {
  	            if (typeof event.composedPath === "function") {
  	                var path = event.composedPath();
  	                return path[0];
  	            }
  	            return event.target;
  	        }
  	        catch (error) {
  	            return event.target;
  	        }
  	    }

  	    var doNothing = function () { return undefined; };
  	    var monthToStr = function (monthNumber, shorthand, locale) { return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber]; };
  	    var revFormat = {
  	        D: doNothing,
  	        F: function (dateObj, monthName, locale) {
  	            dateObj.setMonth(locale.months.longhand.indexOf(monthName));
  	        },
  	        G: function (dateObj, hour) {
  	            dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
  	        },
  	        H: function (dateObj, hour) {
  	            dateObj.setHours(parseFloat(hour));
  	        },
  	        J: function (dateObj, day) {
  	            dateObj.setDate(parseFloat(day));
  	        },
  	        K: function (dateObj, amPM, locale) {
  	            dateObj.setHours((dateObj.getHours() % 12) +
  	                12 * int(new RegExp(locale.amPM[1], "i").test(amPM)));
  	        },
  	        M: function (dateObj, shortMonth, locale) {
  	            dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
  	        },
  	        S: function (dateObj, seconds) {
  	            dateObj.setSeconds(parseFloat(seconds));
  	        },
  	        U: function (_, unixSeconds) { return new Date(parseFloat(unixSeconds) * 1000); },
  	        W: function (dateObj, weekNum, locale) {
  	            var weekNumber = parseInt(weekNum);
  	            var date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
  	            date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);
  	            return date;
  	        },
  	        Y: function (dateObj, year) {
  	            dateObj.setFullYear(parseFloat(year));
  	        },
  	        Z: function (_, ISODate) { return new Date(ISODate); },
  	        d: function (dateObj, day) {
  	            dateObj.setDate(parseFloat(day));
  	        },
  	        h: function (dateObj, hour) {
  	            dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
  	        },
  	        i: function (dateObj, minutes) {
  	            dateObj.setMinutes(parseFloat(minutes));
  	        },
  	        j: function (dateObj, day) {
  	            dateObj.setDate(parseFloat(day));
  	        },
  	        l: doNothing,
  	        m: function (dateObj, month) {
  	            dateObj.setMonth(parseFloat(month) - 1);
  	        },
  	        n: function (dateObj, month) {
  	            dateObj.setMonth(parseFloat(month) - 1);
  	        },
  	        s: function (dateObj, seconds) {
  	            dateObj.setSeconds(parseFloat(seconds));
  	        },
  	        u: function (_, unixMillSeconds) {
  	            return new Date(parseFloat(unixMillSeconds));
  	        },
  	        w: doNothing,
  	        y: function (dateObj, year) {
  	            dateObj.setFullYear(2000 + parseFloat(year));
  	        },
  	    };
  	    var tokenRegex = {
  	        D: "",
  	        F: "",
  	        G: "(\\d\\d|\\d)",
  	        H: "(\\d\\d|\\d)",
  	        J: "(\\d\\d|\\d)\\w+",
  	        K: "",
  	        M: "",
  	        S: "(\\d\\d|\\d)",
  	        U: "(.+)",
  	        W: "(\\d\\d|\\d)",
  	        Y: "(\\d{4})",
  	        Z: "(.+)",
  	        d: "(\\d\\d|\\d)",
  	        h: "(\\d\\d|\\d)",
  	        i: "(\\d\\d|\\d)",
  	        j: "(\\d\\d|\\d)",
  	        l: "",
  	        m: "(\\d\\d|\\d)",
  	        n: "(\\d\\d|\\d)",
  	        s: "(\\d\\d|\\d)",
  	        u: "(.+)",
  	        w: "(\\d\\d|\\d)",
  	        y: "(\\d{2})",
  	    };
  	    var formats = {
  	        // get the date in UTC
  	        Z: function (date) { return date.toISOString(); },
  	        // weekday name, short, e.g. Thu
  	        D: function (date, locale, options) {
  	            return locale.weekdays.shorthand[formats.w(date, locale, options)];
  	        },
  	        // full month name e.g. January
  	        F: function (date, locale, options) {
  	            return monthToStr(formats.n(date, locale, options) - 1, false, locale);
  	        },
  	        // padded hour 1-12
  	        G: function (date, locale, options) {
  	            return pad(formats.h(date, locale, options));
  	        },
  	        // hours with leading zero e.g. 03
  	        H: function (date) { return pad(date.getHours()); },
  	        // day (1-30) with ordinal suffix e.g. 1st, 2nd
  	        J: function (date, locale) {
  	            return locale.ordinal !== undefined
  	                ? date.getDate() + locale.ordinal(date.getDate())
  	                : date.getDate();
  	        },
  	        // AM/PM
  	        K: function (date, locale) { return locale.amPM[int(date.getHours() > 11)]; },
  	        // shorthand month e.g. Jan, Sep, Oct, etc
  	        M: function (date, locale) {
  	            return monthToStr(date.getMonth(), true, locale);
  	        },
  	        // seconds 00-59
  	        S: function (date) { return pad(date.getSeconds()); },
  	        // unix timestamp
  	        U: function (date) { return date.getTime() / 1000; },
  	        W: function (date, _, options) {
  	            return options.getWeek(date);
  	        },
  	        // full year e.g. 2016, padded (0001-9999)
  	        Y: function (date) { return pad(date.getFullYear(), 4); },
  	        // day in month, padded (01-30)
  	        d: function (date) { return pad(date.getDate()); },
  	        // hour from 1-12 (am/pm)
  	        h: function (date) { return (date.getHours() % 12 ? date.getHours() % 12 : 12); },
  	        // minutes, padded with leading zero e.g. 09
  	        i: function (date) { return pad(date.getMinutes()); },
  	        // day in month (1-30)
  	        j: function (date) { return date.getDate(); },
  	        // weekday name, full, e.g. Thursday
  	        l: function (date, locale) {
  	            return locale.weekdays.longhand[date.getDay()];
  	        },
  	        // padded month number (01-12)
  	        m: function (date) { return pad(date.getMonth() + 1); },
  	        // the month number (1-12)
  	        n: function (date) { return date.getMonth() + 1; },
  	        // seconds 0-59
  	        s: function (date) { return date.getSeconds(); },
  	        // Unix Milliseconds
  	        u: function (date) { return date.getTime(); },
  	        // number of the day of the week
  	        w: function (date) { return date.getDay(); },
  	        // last two digits of year e.g. 16 for 2016
  	        y: function (date) { return String(date.getFullYear()).substring(2); },
  	    };

  	    var createDateFormatter = function (_a) {
  	        var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c, _d = _a.isMobile, isMobile = _d === void 0 ? false : _d;
  	        return function (dateObj, frmt, overrideLocale) {
  	            var locale = overrideLocale || l10n;
  	            if (config.formatDate !== undefined && !isMobile) {
  	                return config.formatDate(dateObj, frmt, locale);
  	            }
  	            return frmt
  	                .split("")
  	                .map(function (c, i, arr) {
  	                return formats[c] && arr[i - 1] !== "\\"
  	                    ? formats[c](dateObj, locale, config)
  	                    : c !== "\\"
  	                        ? c
  	                        : "";
  	            })
  	                .join("");
  	        };
  	    };
  	    var createDateParser = function (_a) {
  	        var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c;
  	        return function (date, givenFormat, timeless, customLocale) {
  	            if (date !== 0 && !date)
  	                return undefined;
  	            var locale = customLocale || l10n;
  	            var parsedDate;
  	            var dateOrig = date;
  	            if (date instanceof Date)
  	                parsedDate = new Date(date.getTime());
  	            else if (typeof date !== "string" &&
  	                date.toFixed !== undefined // timestamp
  	            )
  	                // create a copy
  	                parsedDate = new Date(date);
  	            else if (typeof date === "string") {
  	                // date string
  	                var format = givenFormat || (config || defaults).dateFormat;
  	                var datestr = String(date).trim();
  	                if (datestr === "today") {
  	                    parsedDate = new Date();
  	                    timeless = true;
  	                }
  	                else if (config && config.parseDate) {
  	                    parsedDate = config.parseDate(date, format);
  	                }
  	                else if (/Z$/.test(datestr) ||
  	                    /GMT$/.test(datestr) // datestrings w/ timezone
  	                ) {
  	                    parsedDate = new Date(date);
  	                }
  	                else {
  	                    var matched = void 0, ops = [];
  	                    for (var i = 0, matchIndex = 0, regexStr = ""; i < format.length; i++) {
  	                        var token_1 = format[i];
  	                        var isBackSlash = token_1 === "\\";
  	                        var escaped = format[i - 1] === "\\" || isBackSlash;
  	                        if (tokenRegex[token_1] && !escaped) {
  	                            regexStr += tokenRegex[token_1];
  	                            var match = new RegExp(regexStr).exec(date);
  	                            if (match && (matched = true)) {
  	                                ops[token_1 !== "Y" ? "push" : "unshift"]({
  	                                    fn: revFormat[token_1],
  	                                    val: match[++matchIndex],
  	                                });
  	                            }
  	                        }
  	                        else if (!isBackSlash)
  	                            regexStr += "."; // don't really care
  	                    }
  	                    parsedDate =
  	                        !config || !config.noCalendar
  	                            ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0)
  	                            : new Date(new Date().setHours(0, 0, 0, 0));
  	                    ops.forEach(function (_a) {
  	                        var fn = _a.fn, val = _a.val;
  	                        return (parsedDate = fn(parsedDate, val, locale) || parsedDate);
  	                    });
  	                    parsedDate = matched ? parsedDate : undefined;
  	                }
  	            }
  	            /* istanbul ignore next */
  	            if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {
  	                config.errorHandler(new Error("Invalid date provided: " + dateOrig));
  	                return undefined;
  	            }
  	            if (timeless === true)
  	                parsedDate.setHours(0, 0, 0, 0);
  	            return parsedDate;
  	        };
  	    };
  	    /**
  	     * Compute the difference in dates, measured in ms
  	     */
  	    function compareDates(date1, date2, timeless) {
  	        if (timeless === void 0) { timeless = true; }
  	        if (timeless !== false) {
  	            return (new Date(date1.getTime()).setHours(0, 0, 0, 0) -
  	                new Date(date2.getTime()).setHours(0, 0, 0, 0));
  	        }
  	        return date1.getTime() - date2.getTime();
  	    }
  	    var isBetween = function (ts, ts1, ts2) {
  	        return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
  	    };
  	    var calculateSecondsSinceMidnight = function (hours, minutes, seconds) {
  	        return hours * 3600 + minutes * 60 + seconds;
  	    };
  	    var parseSeconds = function (secondsSinceMidnight) {
  	        var hours = Math.floor(secondsSinceMidnight / 3600), minutes = (secondsSinceMidnight - hours * 3600) / 60;
  	        return [hours, minutes, secondsSinceMidnight - hours * 3600 - minutes * 60];
  	    };
  	    var duration = {
  	        DAY: 86400000,
  	    };
  	    function getDefaultHours(config) {
  	        var hours = config.defaultHour;
  	        var minutes = config.defaultMinute;
  	        var seconds = config.defaultSeconds;
  	        if (config.minDate !== undefined) {
  	            var minHour = config.minDate.getHours();
  	            var minMinutes = config.minDate.getMinutes();
  	            var minSeconds = config.minDate.getSeconds();
  	            if (hours < minHour) {
  	                hours = minHour;
  	            }
  	            if (hours === minHour && minutes < minMinutes) {
  	                minutes = minMinutes;
  	            }
  	            if (hours === minHour && minutes === minMinutes && seconds < minSeconds)
  	                seconds = config.minDate.getSeconds();
  	        }
  	        if (config.maxDate !== undefined) {
  	            var maxHr = config.maxDate.getHours();
  	            var maxMinutes = config.maxDate.getMinutes();
  	            hours = Math.min(hours, maxHr);
  	            if (hours === maxHr)
  	                minutes = Math.min(maxMinutes, minutes);
  	            if (hours === maxHr && minutes === maxMinutes)
  	                seconds = config.maxDate.getSeconds();
  	        }
  	        return { hours: hours, minutes: minutes, seconds: seconds };
  	    }

  	    if (typeof Object.assign !== "function") {
  	        Object.assign = function (target) {
  	            var args = [];
  	            for (var _i = 1; _i < arguments.length; _i++) {
  	                args[_i - 1] = arguments[_i];
  	            }
  	            if (!target) {
  	                throw TypeError("Cannot convert undefined or null to object");
  	            }
  	            var _loop_1 = function (source) {
  	                if (source) {
  	                    Object.keys(source).forEach(function (key) { return (target[key] = source[key]); });
  	                }
  	            };
  	            for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
  	                var source = args_1[_a];
  	                _loop_1(source);
  	            }
  	            return target;
  	        };
  	    }

  	    var DEBOUNCED_CHANGE_MS = 300;
  	    function FlatpickrInstance(element, instanceConfig) {
  	        var self = {
  	            config: __assign(__assign({}, defaults), flatpickr.defaultConfig),
  	            l10n: english,
  	        };
  	        self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
  	        self._handlers = [];
  	        self.pluginElements = [];
  	        self.loadedPlugins = [];
  	        self._bind = bind;
  	        self._setHoursFromDate = setHoursFromDate;
  	        self._positionCalendar = positionCalendar;
  	        self.changeMonth = changeMonth;
  	        self.changeYear = changeYear;
  	        self.clear = clear;
  	        self.close = close;
  	        self.onMouseOver = onMouseOver;
  	        self._createElement = createElement;
  	        self.createDay = createDay;
  	        self.destroy = destroy;
  	        self.isEnabled = isEnabled;
  	        self.jumpToDate = jumpToDate;
  	        self.updateValue = updateValue;
  	        self.open = open;
  	        self.redraw = redraw;
  	        self.set = set;
  	        self.setDate = setDate;
  	        self.toggle = toggle;
  	        function setupHelperFunctions() {
  	            self.utils = {
  	                getDaysInMonth: function (month, yr) {
  	                    if (month === void 0) { month = self.currentMonth; }
  	                    if (yr === void 0) { yr = self.currentYear; }
  	                    if (month === 1 && ((yr % 4 === 0 && yr % 100 !== 0) || yr % 400 === 0))
  	                        return 29;
  	                    return self.l10n.daysInMonth[month];
  	                },
  	            };
  	        }
  	        function init() {
  	            self.element = self.input = element;
  	            self.isOpen = false;
  	            parseConfig();
  	            setupLocale();
  	            setupInputs();
  	            setupDates();
  	            setupHelperFunctions();
  	            if (!self.isMobile)
  	                build();
  	            bindEvents();
  	            if (self.selectedDates.length || self.config.noCalendar) {
  	                if (self.config.enableTime) {
  	                    setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj : undefined);
  	                }
  	                updateValue(false);
  	            }
  	            setCalendarWidth();
  	            var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  	            /* TODO: investigate this further
  	        
  	              Currently, there is weird positioning behavior in safari causing pages
  	              to scroll up. https://github.com/chmln/flatpickr/issues/563
  	        
  	              However, most browsers are not Safari and positioning is expensive when used
  	              in scale. https://github.com/chmln/flatpickr/issues/1096
  	            */
  	            if (!self.isMobile && isSafari) {
  	                positionCalendar();
  	            }
  	            triggerEvent("onReady");
  	        }
  	        function getClosestActiveElement() {
  	            var _a;
  	            return (((_a = self.calendarContainer) === null || _a === void 0 ? void 0 : _a.getRootNode())
  	                .activeElement || document.activeElement);
  	        }
  	        function bindToInstance(fn) {
  	            return fn.bind(self);
  	        }
  	        function setCalendarWidth() {
  	            var config = self.config;
  	            if (config.weekNumbers === false && config.showMonths === 1) {
  	                return;
  	            }
  	            else if (config.noCalendar !== true) {
  	                window.requestAnimationFrame(function () {
  	                    if (self.calendarContainer !== undefined) {
  	                        self.calendarContainer.style.visibility = "hidden";
  	                        self.calendarContainer.style.display = "block";
  	                    }
  	                    if (self.daysContainer !== undefined) {
  	                        var daysWidth = (self.days.offsetWidth + 1) * config.showMonths;
  	                        self.daysContainer.style.width = daysWidth + "px";
  	                        self.calendarContainer.style.width =
  	                            daysWidth +
  	                                (self.weekWrapper !== undefined
  	                                    ? self.weekWrapper.offsetWidth
  	                                    : 0) +
  	                                "px";
  	                        self.calendarContainer.style.removeProperty("visibility");
  	                        self.calendarContainer.style.removeProperty("display");
  	                    }
  	                });
  	            }
  	        }
  	        /**
  	         * The handler for all events targeting the time inputs
  	         */
  	        function updateTime(e) {
  	            if (self.selectedDates.length === 0) {
  	                var defaultDate = self.config.minDate === undefined ||
  	                    compareDates(new Date(), self.config.minDate) >= 0
  	                    ? new Date()
  	                    : new Date(self.config.minDate.getTime());
  	                var defaults = getDefaultHours(self.config);
  	                defaultDate.setHours(defaults.hours, defaults.minutes, defaults.seconds, defaultDate.getMilliseconds());
  	                self.selectedDates = [defaultDate];
  	                self.latestSelectedDateObj = defaultDate;
  	            }
  	            if (e !== undefined && e.type !== "blur") {
  	                timeWrapper(e);
  	            }
  	            var prevValue = self._input.value;
  	            setHoursFromInputs();
  	            updateValue();
  	            if (self._input.value !== prevValue) {
  	                self._debouncedChange();
  	            }
  	        }
  	        function ampm2military(hour, amPM) {
  	            return (hour % 12) + 12 * int(amPM === self.l10n.amPM[1]);
  	        }
  	        function military2ampm(hour) {
  	            switch (hour % 24) {
  	                case 0:
  	                case 12:
  	                    return 12;
  	                default:
  	                    return hour % 12;
  	            }
  	        }
  	        /**
  	         * Syncs the selected date object time with user's time input
  	         */
  	        function setHoursFromInputs() {
  	            if (self.hourElement === undefined || self.minuteElement === undefined)
  	                return;
  	            var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== undefined
  	                ? (parseInt(self.secondElement.value, 10) || 0) % 60
  	                : 0;
  	            if (self.amPM !== undefined) {
  	                hours = ampm2military(hours, self.amPM.textContent);
  	            }
  	            var limitMinHours = self.config.minTime !== undefined ||
  	                (self.config.minDate &&
  	                    self.minDateHasTime &&
  	                    self.latestSelectedDateObj &&
  	                    compareDates(self.latestSelectedDateObj, self.config.minDate, true) ===
  	                        0);
  	            var limitMaxHours = self.config.maxTime !== undefined ||
  	                (self.config.maxDate &&
  	                    self.maxDateHasTime &&
  	                    self.latestSelectedDateObj &&
  	                    compareDates(self.latestSelectedDateObj, self.config.maxDate, true) ===
  	                        0);
  	            if (self.config.maxTime !== undefined &&
  	                self.config.minTime !== undefined &&
  	                self.config.minTime > self.config.maxTime) {
  	                var minBound = calculateSecondsSinceMidnight(self.config.minTime.getHours(), self.config.minTime.getMinutes(), self.config.minTime.getSeconds());
  	                var maxBound = calculateSecondsSinceMidnight(self.config.maxTime.getHours(), self.config.maxTime.getMinutes(), self.config.maxTime.getSeconds());
  	                var currentTime = calculateSecondsSinceMidnight(hours, minutes, seconds);
  	                if (currentTime > maxBound && currentTime < minBound) {
  	                    var result = parseSeconds(minBound);
  	                    hours = result[0];
  	                    minutes = result[1];
  	                    seconds = result[2];
  	                }
  	            }
  	            else {
  	                if (limitMaxHours) {
  	                    var maxTime = self.config.maxTime !== undefined
  	                        ? self.config.maxTime
  	                        : self.config.maxDate;
  	                    hours = Math.min(hours, maxTime.getHours());
  	                    if (hours === maxTime.getHours())
  	                        minutes = Math.min(minutes, maxTime.getMinutes());
  	                    if (minutes === maxTime.getMinutes())
  	                        seconds = Math.min(seconds, maxTime.getSeconds());
  	                }
  	                if (limitMinHours) {
  	                    var minTime = self.config.minTime !== undefined
  	                        ? self.config.minTime
  	                        : self.config.minDate;
  	                    hours = Math.max(hours, minTime.getHours());
  	                    if (hours === minTime.getHours() && minutes < minTime.getMinutes())
  	                        minutes = minTime.getMinutes();
  	                    if (minutes === minTime.getMinutes())
  	                        seconds = Math.max(seconds, minTime.getSeconds());
  	                }
  	            }
  	            setHours(hours, minutes, seconds);
  	        }
  	        /**
  	         * Syncs time input values with a date
  	         */
  	        function setHoursFromDate(dateObj) {
  	            var date = dateObj || self.latestSelectedDateObj;
  	            if (date && date instanceof Date) {
  	                setHours(date.getHours(), date.getMinutes(), date.getSeconds());
  	            }
  	        }
  	        /**
  	         * Sets the hours, minutes, and optionally seconds
  	         * of the latest selected date object and the
  	         * corresponding time inputs
  	         * @param {Number} hours the hour. whether its military
  	         *                 or am-pm gets inferred from config
  	         * @param {Number} minutes the minutes
  	         * @param {Number} seconds the seconds (optional)
  	         */
  	        function setHours(hours, minutes, seconds) {
  	            if (self.latestSelectedDateObj !== undefined) {
  	                self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
  	            }
  	            if (!self.hourElement || !self.minuteElement || self.isMobile)
  	                return;
  	            self.hourElement.value = pad(!self.config.time_24hr
  	                ? ((12 + hours) % 12) + 12 * int(hours % 12 === 0)
  	                : hours);
  	            self.minuteElement.value = pad(minutes);
  	            if (self.amPM !== undefined)
  	                self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];
  	            if (self.secondElement !== undefined)
  	                self.secondElement.value = pad(seconds);
  	        }
  	        /**
  	         * Handles the year input and incrementing events
  	         * @param {Event} event the keyup or increment event
  	         */
  	        function onYearInput(event) {
  	            var eventTarget = getEventTarget(event);
  	            var year = parseInt(eventTarget.value) + (event.delta || 0);
  	            if (year / 1000 > 1 ||
  	                (event.key === "Enter" && !/[^\d]/.test(year.toString()))) {
  	                changeYear(year);
  	            }
  	        }
  	        /**
  	         * Essentially addEventListener + tracking
  	         * @param {Element} element the element to addEventListener to
  	         * @param {String} event the event name
  	         * @param {Function} handler the event handler
  	         */
  	        function bind(element, event, handler, options) {
  	            if (event instanceof Array)
  	                return event.forEach(function (ev) { return bind(element, ev, handler, options); });
  	            if (element instanceof Array)
  	                return element.forEach(function (el) { return bind(el, event, handler, options); });
  	            element.addEventListener(event, handler, options);
  	            self._handlers.push({
  	                remove: function () { return element.removeEventListener(event, handler, options); },
  	            });
  	        }
  	        function triggerChange() {
  	            triggerEvent("onChange");
  	        }
  	        /**
  	         * Adds all the necessary event listeners
  	         */
  	        function bindEvents() {
  	            if (self.config.wrap) {
  	                ["open", "close", "toggle", "clear"].forEach(function (evt) {
  	                    Array.prototype.forEach.call(self.element.querySelectorAll("[data-" + evt + "]"), function (el) {
  	                        return bind(el, "click", self[evt]);
  	                    });
  	                });
  	            }
  	            if (self.isMobile) {
  	                setupMobile();
  	                return;
  	            }
  	            var debouncedResize = debounce(onResize, 50);
  	            self._debouncedChange = debounce(triggerChange, DEBOUNCED_CHANGE_MS);
  	            if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))
  	                bind(self.daysContainer, "mouseover", function (e) {
  	                    if (self.config.mode === "range")
  	                        onMouseOver(getEventTarget(e));
  	                });
  	            bind(self._input, "keydown", onKeyDown);
  	            if (self.calendarContainer !== undefined) {
  	                bind(self.calendarContainer, "keydown", onKeyDown);
  	            }
  	            if (!self.config.inline && !self.config.static)
  	                bind(window, "resize", debouncedResize);
  	            if (window.ontouchstart !== undefined)
  	                bind(window.document, "touchstart", documentClick);
  	            else
  	                bind(window.document, "mousedown", documentClick);
  	            bind(window.document, "focus", documentClick, { capture: true });
  	            if (self.config.clickOpens === true) {
  	                bind(self._input, "focus", self.open);
  	                bind(self._input, "click", self.open);
  	            }
  	            if (self.daysContainer !== undefined) {
  	                bind(self.monthNav, "click", onMonthNavClick);
  	                bind(self.monthNav, ["keyup", "increment"], onYearInput);
  	                bind(self.daysContainer, "click", selectDate);
  	            }
  	            if (self.timeContainer !== undefined &&
  	                self.minuteElement !== undefined &&
  	                self.hourElement !== undefined) {
  	                var selText = function (e) {
  	                    return getEventTarget(e).select();
  	                };
  	                bind(self.timeContainer, ["increment"], updateTime);
  	                bind(self.timeContainer, "blur", updateTime, { capture: true });
  	                bind(self.timeContainer, "click", timeIncrement);
  	                bind([self.hourElement, self.minuteElement], ["focus", "click"], selText);
  	                if (self.secondElement !== undefined)
  	                    bind(self.secondElement, "focus", function () { return self.secondElement && self.secondElement.select(); });
  	                if (self.amPM !== undefined) {
  	                    bind(self.amPM, "click", function (e) {
  	                        updateTime(e);
  	                    });
  	                }
  	            }
  	            if (self.config.allowInput) {
  	                bind(self._input, "blur", onBlur);
  	            }
  	        }
  	        /**
  	         * Set the calendar view to a particular date.
  	         * @param {Date} jumpDate the date to set the view to
  	         * @param {boolean} triggerChange if change events should be triggered
  	         */
  	        function jumpToDate(jumpDate, triggerChange) {
  	            var jumpTo = jumpDate !== undefined
  	                ? self.parseDate(jumpDate)
  	                : self.latestSelectedDateObj ||
  	                    (self.config.minDate && self.config.minDate > self.now
  	                        ? self.config.minDate
  	                        : self.config.maxDate && self.config.maxDate < self.now
  	                            ? self.config.maxDate
  	                            : self.now);
  	            var oldYear = self.currentYear;
  	            var oldMonth = self.currentMonth;
  	            try {
  	                if (jumpTo !== undefined) {
  	                    self.currentYear = jumpTo.getFullYear();
  	                    self.currentMonth = jumpTo.getMonth();
  	                }
  	            }
  	            catch (e) {
  	                /* istanbul ignore next */
  	                e.message = "Invalid date supplied: " + jumpTo;
  	                self.config.errorHandler(e);
  	            }
  	            if (triggerChange && self.currentYear !== oldYear) {
  	                triggerEvent("onYearChange");
  	                buildMonthSwitch();
  	            }
  	            if (triggerChange &&
  	                (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) {
  	                triggerEvent("onMonthChange");
  	            }
  	            self.redraw();
  	        }
  	        /**
  	         * The up/down arrow handler for time inputs
  	         * @param {Event} e the click event
  	         */
  	        function timeIncrement(e) {
  	            var eventTarget = getEventTarget(e);
  	            if (~eventTarget.className.indexOf("arrow"))
  	                incrementNumInput(e, eventTarget.classList.contains("arrowUp") ? 1 : -1);
  	        }
  	        /**
  	         * Increments/decrements the value of input associ-
  	         * ated with the up/down arrow by dispatching an
  	         * "increment" event on the input.
  	         *
  	         * @param {Event} e the click event
  	         * @param {Number} delta the diff (usually 1 or -1)
  	         * @param {Element} inputElem the input element
  	         */
  	        function incrementNumInput(e, delta, inputElem) {
  	            var target = e && getEventTarget(e);
  	            var input = inputElem ||
  	                (target && target.parentNode && target.parentNode.firstChild);
  	            var event = createEvent("increment");
  	            event.delta = delta;
  	            input && input.dispatchEvent(event);
  	        }
  	        function build() {
  	            var fragment = window.document.createDocumentFragment();
  	            self.calendarContainer = createElement("div", "flatpickr-calendar");
  	            self.calendarContainer.tabIndex = -1;
  	            if (!self.config.noCalendar) {
  	                fragment.appendChild(buildMonthNav());
  	                self.innerContainer = createElement("div", "flatpickr-innerContainer");
  	                if (self.config.weekNumbers) {
  	                    var _a = buildWeeks(), weekWrapper = _a.weekWrapper, weekNumbers = _a.weekNumbers;
  	                    self.innerContainer.appendChild(weekWrapper);
  	                    self.weekNumbers = weekNumbers;
  	                    self.weekWrapper = weekWrapper;
  	                }
  	                self.rContainer = createElement("div", "flatpickr-rContainer");
  	                self.rContainer.appendChild(buildWeekdays());
  	                if (!self.daysContainer) {
  	                    self.daysContainer = createElement("div", "flatpickr-days");
  	                    self.daysContainer.tabIndex = -1;
  	                }
  	                buildDays();
  	                self.rContainer.appendChild(self.daysContainer);
  	                self.innerContainer.appendChild(self.rContainer);
  	                fragment.appendChild(self.innerContainer);
  	            }
  	            if (self.config.enableTime) {
  	                fragment.appendChild(buildTime());
  	            }
  	            toggleClass(self.calendarContainer, "rangeMode", self.config.mode === "range");
  	            toggleClass(self.calendarContainer, "animate", self.config.animate === true);
  	            toggleClass(self.calendarContainer, "multiMonth", self.config.showMonths > 1);
  	            self.calendarContainer.appendChild(fragment);
  	            var customAppend = self.config.appendTo !== undefined &&
  	                self.config.appendTo.nodeType !== undefined;
  	            if (self.config.inline || self.config.static) {
  	                self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");
  	                if (self.config.inline) {
  	                    if (!customAppend && self.element.parentNode)
  	                        self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);
  	                    else if (self.config.appendTo !== undefined)
  	                        self.config.appendTo.appendChild(self.calendarContainer);
  	                }
  	                if (self.config.static) {
  	                    var wrapper = createElement("div", "flatpickr-wrapper");
  	                    if (self.element.parentNode)
  	                        self.element.parentNode.insertBefore(wrapper, self.element);
  	                    wrapper.appendChild(self.element);
  	                    if (self.altInput)
  	                        wrapper.appendChild(self.altInput);
  	                    wrapper.appendChild(self.calendarContainer);
  	                }
  	            }
  	            if (!self.config.static && !self.config.inline)
  	                (self.config.appendTo !== undefined
  	                    ? self.config.appendTo
  	                    : window.document.body).appendChild(self.calendarContainer);
  	        }
  	        function createDay(className, date, _dayNumber, i) {
  	            var dateIsEnabled = isEnabled(date, true), dayElement = createElement("span", className, date.getDate().toString());
  	            dayElement.dateObj = date;
  	            dayElement.$i = i;
  	            dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));
  	            if (className.indexOf("hidden") === -1 &&
  	                compareDates(date, self.now) === 0) {
  	                self.todayDateElem = dayElement;
  	                dayElement.classList.add("today");
  	                dayElement.setAttribute("aria-current", "date");
  	            }
  	            if (dateIsEnabled) {
  	                dayElement.tabIndex = -1;
  	                if (isDateSelected(date)) {
  	                    dayElement.classList.add("selected");
  	                    self.selectedDateElem = dayElement;
  	                    if (self.config.mode === "range") {
  	                        toggleClass(dayElement, "startRange", self.selectedDates[0] &&
  	                            compareDates(date, self.selectedDates[0], true) === 0);
  	                        toggleClass(dayElement, "endRange", self.selectedDates[1] &&
  	                            compareDates(date, self.selectedDates[1], true) === 0);
  	                        if (className === "nextMonthDay")
  	                            dayElement.classList.add("inRange");
  	                    }
  	                }
  	            }
  	            else {
  	                dayElement.classList.add("flatpickr-disabled");
  	            }
  	            if (self.config.mode === "range") {
  	                if (isDateInRange(date) && !isDateSelected(date))
  	                    dayElement.classList.add("inRange");
  	            }
  	            if (self.weekNumbers &&
  	                self.config.showMonths === 1 &&
  	                className !== "prevMonthDay" &&
  	                i % 7 === 6) {
  	                self.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self.config.getWeek(date) + "</span>");
  	            }
  	            triggerEvent("onDayCreate", dayElement);
  	            return dayElement;
  	        }
  	        function focusOnDayElem(targetNode) {
  	            targetNode.focus();
  	            if (self.config.mode === "range")
  	                onMouseOver(targetNode);
  	        }
  	        function getFirstAvailableDay(delta) {
  	            var startMonth = delta > 0 ? 0 : self.config.showMonths - 1;
  	            var endMonth = delta > 0 ? self.config.showMonths : -1;
  	            for (var m = startMonth; m != endMonth; m += delta) {
  	                var month = self.daysContainer.children[m];
  	                var startIndex = delta > 0 ? 0 : month.children.length - 1;
  	                var endIndex = delta > 0 ? month.children.length : -1;
  	                for (var i = startIndex; i != endIndex; i += delta) {
  	                    var c = month.children[i];
  	                    if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj))
  	                        return c;
  	                }
  	            }
  	            return undefined;
  	        }
  	        function getNextAvailableDay(current, delta) {
  	            var givenMonth = current.className.indexOf("Month") === -1
  	                ? current.dateObj.getMonth()
  	                : self.currentMonth;
  	            var endMonth = delta > 0 ? self.config.showMonths : -1;
  	            var loopDelta = delta > 0 ? 1 : -1;
  	            for (var m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {
  	                var month = self.daysContainer.children[m];
  	                var startIndex = givenMonth - self.currentMonth === m
  	                    ? current.$i + delta
  	                    : delta < 0
  	                        ? month.children.length - 1
  	                        : 0;
  	                var numMonthDays = month.children.length;
  	                for (var i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta) {
  	                    var c = month.children[i];
  	                    if (c.className.indexOf("hidden") === -1 &&
  	                        isEnabled(c.dateObj) &&
  	                        Math.abs(current.$i - i) >= Math.abs(delta))
  	                        return focusOnDayElem(c);
  	                }
  	            }
  	            self.changeMonth(loopDelta);
  	            focusOnDay(getFirstAvailableDay(loopDelta), 0);
  	            return undefined;
  	        }
  	        function focusOnDay(current, offset) {
  	            var activeElement = getClosestActiveElement();
  	            var dayFocused = isInView(activeElement || document.body);
  	            var startElem = current !== undefined
  	                ? current
  	                : dayFocused
  	                    ? activeElement
  	                    : self.selectedDateElem !== undefined && isInView(self.selectedDateElem)
  	                        ? self.selectedDateElem
  	                        : self.todayDateElem !== undefined && isInView(self.todayDateElem)
  	                            ? self.todayDateElem
  	                            : getFirstAvailableDay(offset > 0 ? 1 : -1);
  	            if (startElem === undefined) {
  	                self._input.focus();
  	            }
  	            else if (!dayFocused) {
  	                focusOnDayElem(startElem);
  	            }
  	            else {
  	                getNextAvailableDay(startElem, offset);
  	            }
  	        }
  	        function buildMonthDays(year, month) {
  	            var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
  	            var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);
  	            var daysInMonth = self.utils.getDaysInMonth(month, year), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay", nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";
  	            var dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;
  	            // prepend days from the ending of previous month
  	            for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {
  	                days.appendChild(createDay("flatpickr-day " + prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
  	            }
  	            // Start at 1 since there is no 0th day
  	            for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {
  	                days.appendChild(createDay("flatpickr-day", new Date(year, month, dayNumber), dayNumber, dayIndex));
  	            }
  	            // append days from the next month
  	            for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth &&
  	                (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {
  	                days.appendChild(createDay("flatpickr-day " + nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
  	            }
  	            //updateNavigationCurrentMonth();
  	            var dayContainer = createElement("div", "dayContainer");
  	            dayContainer.appendChild(days);
  	            return dayContainer;
  	        }
  	        function buildDays() {
  	            if (self.daysContainer === undefined) {
  	                return;
  	            }
  	            clearNode(self.daysContainer);
  	            // TODO: week numbers for each month
  	            if (self.weekNumbers)
  	                clearNode(self.weekNumbers);
  	            var frag = document.createDocumentFragment();
  	            for (var i = 0; i < self.config.showMonths; i++) {
  	                var d = new Date(self.currentYear, self.currentMonth, 1);
  	                d.setMonth(self.currentMonth + i);
  	                frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));
  	            }
  	            self.daysContainer.appendChild(frag);
  	            self.days = self.daysContainer.firstChild;
  	            if (self.config.mode === "range" && self.selectedDates.length === 1) {
  	                onMouseOver();
  	            }
  	        }
  	        function buildMonthSwitch() {
  	            if (self.config.showMonths > 1 ||
  	                self.config.monthSelectorType !== "dropdown")
  	                return;
  	            var shouldBuildMonth = function (month) {
  	                if (self.config.minDate !== undefined &&
  	                    self.currentYear === self.config.minDate.getFullYear() &&
  	                    month < self.config.minDate.getMonth()) {
  	                    return false;
  	                }
  	                return !(self.config.maxDate !== undefined &&
  	                    self.currentYear === self.config.maxDate.getFullYear() &&
  	                    month > self.config.maxDate.getMonth());
  	            };
  	            self.monthsDropdownContainer.tabIndex = -1;
  	            self.monthsDropdownContainer.innerHTML = "";
  	            for (var i = 0; i < 12; i++) {
  	                if (!shouldBuildMonth(i))
  	                    continue;
  	                var month = createElement("option", "flatpickr-monthDropdown-month");
  	                month.value = new Date(self.currentYear, i).getMonth().toString();
  	                month.textContent = monthToStr(i, self.config.shorthandCurrentMonth, self.l10n);
  	                month.tabIndex = -1;
  	                if (self.currentMonth === i) {
  	                    month.selected = true;
  	                }
  	                self.monthsDropdownContainer.appendChild(month);
  	            }
  	        }
  	        function buildMonth() {
  	            var container = createElement("div", "flatpickr-month");
  	            var monthNavFragment = window.document.createDocumentFragment();
  	            var monthElement;
  	            if (self.config.showMonths > 1 ||
  	                self.config.monthSelectorType === "static") {
  	                monthElement = createElement("span", "cur-month");
  	            }
  	            else {
  	                self.monthsDropdownContainer = createElement("select", "flatpickr-monthDropdown-months");
  	                self.monthsDropdownContainer.setAttribute("aria-label", self.l10n.monthAriaLabel);
  	                bind(self.monthsDropdownContainer, "change", function (e) {
  	                    var target = getEventTarget(e);
  	                    var selectedMonth = parseInt(target.value, 10);
  	                    self.changeMonth(selectedMonth - self.currentMonth);
  	                    triggerEvent("onMonthChange");
  	                });
  	                buildMonthSwitch();
  	                monthElement = self.monthsDropdownContainer;
  	            }
  	            var yearInput = createNumberInput("cur-year", { tabindex: "-1" });
  	            var yearElement = yearInput.getElementsByTagName("input")[0];
  	            yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);
  	            if (self.config.minDate) {
  	                yearElement.setAttribute("min", self.config.minDate.getFullYear().toString());
  	            }
  	            if (self.config.maxDate) {
  	                yearElement.setAttribute("max", self.config.maxDate.getFullYear().toString());
  	                yearElement.disabled =
  	                    !!self.config.minDate &&
  	                        self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
  	            }
  	            var currentMonth = createElement("div", "flatpickr-current-month");
  	            currentMonth.appendChild(monthElement);
  	            currentMonth.appendChild(yearInput);
  	            monthNavFragment.appendChild(currentMonth);
  	            container.appendChild(monthNavFragment);
  	            return {
  	                container: container,
  	                yearElement: yearElement,
  	                monthElement: monthElement,
  	            };
  	        }
  	        function buildMonths() {
  	            clearNode(self.monthNav);
  	            self.monthNav.appendChild(self.prevMonthNav);
  	            if (self.config.showMonths) {
  	                self.yearElements = [];
  	                self.monthElements = [];
  	            }
  	            for (var m = self.config.showMonths; m--;) {
  	                var month = buildMonth();
  	                self.yearElements.push(month.yearElement);
  	                self.monthElements.push(month.monthElement);
  	                self.monthNav.appendChild(month.container);
  	            }
  	            self.monthNav.appendChild(self.nextMonthNav);
  	        }
  	        function buildMonthNav() {
  	            self.monthNav = createElement("div", "flatpickr-months");
  	            self.yearElements = [];
  	            self.monthElements = [];
  	            self.prevMonthNav = createElement("span", "flatpickr-prev-month");
  	            self.prevMonthNav.innerHTML = self.config.prevArrow;
  	            self.nextMonthNav = createElement("span", "flatpickr-next-month");
  	            self.nextMonthNav.innerHTML = self.config.nextArrow;
  	            buildMonths();
  	            Object.defineProperty(self, "_hidePrevMonthArrow", {
  	                get: function () { return self.__hidePrevMonthArrow; },
  	                set: function (bool) {
  	                    if (self.__hidePrevMonthArrow !== bool) {
  	                        toggleClass(self.prevMonthNav, "flatpickr-disabled", bool);
  	                        self.__hidePrevMonthArrow = bool;
  	                    }
  	                },
  	            });
  	            Object.defineProperty(self, "_hideNextMonthArrow", {
  	                get: function () { return self.__hideNextMonthArrow; },
  	                set: function (bool) {
  	                    if (self.__hideNextMonthArrow !== bool) {
  	                        toggleClass(self.nextMonthNav, "flatpickr-disabled", bool);
  	                        self.__hideNextMonthArrow = bool;
  	                    }
  	                },
  	            });
  	            self.currentYearElement = self.yearElements[0];
  	            updateNavigationCurrentMonth();
  	            return self.monthNav;
  	        }
  	        function buildTime() {
  	            self.calendarContainer.classList.add("hasTime");
  	            if (self.config.noCalendar)
  	                self.calendarContainer.classList.add("noCalendar");
  	            var defaults = getDefaultHours(self.config);
  	            self.timeContainer = createElement("div", "flatpickr-time");
  	            self.timeContainer.tabIndex = -1;
  	            var separator = createElement("span", "flatpickr-time-separator", ":");
  	            var hourInput = createNumberInput("flatpickr-hour", {
  	                "aria-label": self.l10n.hourAriaLabel,
  	            });
  	            self.hourElement = hourInput.getElementsByTagName("input")[0];
  	            var minuteInput = createNumberInput("flatpickr-minute", {
  	                "aria-label": self.l10n.minuteAriaLabel,
  	            });
  	            self.minuteElement = minuteInput.getElementsByTagName("input")[0];
  	            self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
  	            self.hourElement.value = pad(self.latestSelectedDateObj
  	                ? self.latestSelectedDateObj.getHours()
  	                : self.config.time_24hr
  	                    ? defaults.hours
  	                    : military2ampm(defaults.hours));
  	            self.minuteElement.value = pad(self.latestSelectedDateObj
  	                ? self.latestSelectedDateObj.getMinutes()
  	                : defaults.minutes);
  	            self.hourElement.setAttribute("step", self.config.hourIncrement.toString());
  	            self.minuteElement.setAttribute("step", self.config.minuteIncrement.toString());
  	            self.hourElement.setAttribute("min", self.config.time_24hr ? "0" : "1");
  	            self.hourElement.setAttribute("max", self.config.time_24hr ? "23" : "12");
  	            self.hourElement.setAttribute("maxlength", "2");
  	            self.minuteElement.setAttribute("min", "0");
  	            self.minuteElement.setAttribute("max", "59");
  	            self.minuteElement.setAttribute("maxlength", "2");
  	            self.timeContainer.appendChild(hourInput);
  	            self.timeContainer.appendChild(separator);
  	            self.timeContainer.appendChild(minuteInput);
  	            if (self.config.time_24hr)
  	                self.timeContainer.classList.add("time24hr");
  	            if (self.config.enableSeconds) {
  	                self.timeContainer.classList.add("hasSeconds");
  	                var secondInput = createNumberInput("flatpickr-second");
  	                self.secondElement = secondInput.getElementsByTagName("input")[0];
  	                self.secondElement.value = pad(self.latestSelectedDateObj
  	                    ? self.latestSelectedDateObj.getSeconds()
  	                    : defaults.seconds);
  	                self.secondElement.setAttribute("step", self.minuteElement.getAttribute("step"));
  	                self.secondElement.setAttribute("min", "0");
  	                self.secondElement.setAttribute("max", "59");
  	                self.secondElement.setAttribute("maxlength", "2");
  	                self.timeContainer.appendChild(createElement("span", "flatpickr-time-separator", ":"));
  	                self.timeContainer.appendChild(secondInput);
  	            }
  	            if (!self.config.time_24hr) {
  	                // add self.amPM if appropriate
  	                self.amPM = createElement("span", "flatpickr-am-pm", self.l10n.amPM[int((self.latestSelectedDateObj
  	                    ? self.hourElement.value
  	                    : self.config.defaultHour) > 11)]);
  	                self.amPM.title = self.l10n.toggleTitle;
  	                self.amPM.tabIndex = -1;
  	                self.timeContainer.appendChild(self.amPM);
  	            }
  	            return self.timeContainer;
  	        }
  	        function buildWeekdays() {
  	            if (!self.weekdayContainer)
  	                self.weekdayContainer = createElement("div", "flatpickr-weekdays");
  	            else
  	                clearNode(self.weekdayContainer);
  	            for (var i = self.config.showMonths; i--;) {
  	                var container = createElement("div", "flatpickr-weekdaycontainer");
  	                self.weekdayContainer.appendChild(container);
  	            }
  	            updateWeekdays();
  	            return self.weekdayContainer;
  	        }
  	        function updateWeekdays() {
  	            if (!self.weekdayContainer) {
  	                return;
  	            }
  	            var firstDayOfWeek = self.l10n.firstDayOfWeek;
  	            var weekdays = __spreadArrays(self.l10n.weekdays.shorthand);
  	            if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {
  	                weekdays = __spreadArrays(weekdays.splice(firstDayOfWeek, weekdays.length), weekdays.splice(0, firstDayOfWeek));
  	            }
  	            for (var i = self.config.showMonths; i--;) {
  	                self.weekdayContainer.children[i].innerHTML = "\n      <span class='flatpickr-weekday'>\n        " + weekdays.join("</span><span class='flatpickr-weekday'>") + "\n      </span>\n      ";
  	            }
  	        }
  	        /* istanbul ignore next */
  	        function buildWeeks() {
  	            self.calendarContainer.classList.add("hasWeeks");
  	            var weekWrapper = createElement("div", "flatpickr-weekwrapper");
  	            weekWrapper.appendChild(createElement("span", "flatpickr-weekday", self.l10n.weekAbbreviation));
  	            var weekNumbers = createElement("div", "flatpickr-weeks");
  	            weekWrapper.appendChild(weekNumbers);
  	            return {
  	                weekWrapper: weekWrapper,
  	                weekNumbers: weekNumbers,
  	            };
  	        }
  	        function changeMonth(value, isOffset) {
  	            if (isOffset === void 0) { isOffset = true; }
  	            var delta = isOffset ? value : value - self.currentMonth;
  	            if ((delta < 0 && self._hidePrevMonthArrow === true) ||
  	                (delta > 0 && self._hideNextMonthArrow === true))
  	                return;
  	            self.currentMonth += delta;
  	            if (self.currentMonth < 0 || self.currentMonth > 11) {
  	                self.currentYear += self.currentMonth > 11 ? 1 : -1;
  	                self.currentMonth = (self.currentMonth + 12) % 12;
  	                triggerEvent("onYearChange");
  	                buildMonthSwitch();
  	            }
  	            buildDays();
  	            triggerEvent("onMonthChange");
  	            updateNavigationCurrentMonth();
  	        }
  	        function clear(triggerChangeEvent, toInitial) {
  	            if (triggerChangeEvent === void 0) { triggerChangeEvent = true; }
  	            if (toInitial === void 0) { toInitial = true; }
  	            self.input.value = "";
  	            if (self.altInput !== undefined)
  	                self.altInput.value = "";
  	            if (self.mobileInput !== undefined)
  	                self.mobileInput.value = "";
  	            self.selectedDates = [];
  	            self.latestSelectedDateObj = undefined;
  	            if (toInitial === true) {
  	                self.currentYear = self._initialDate.getFullYear();
  	                self.currentMonth = self._initialDate.getMonth();
  	            }
  	            if (self.config.enableTime === true) {
  	                var _a = getDefaultHours(self.config), hours = _a.hours, minutes = _a.minutes, seconds = _a.seconds;
  	                setHours(hours, minutes, seconds);
  	            }
  	            self.redraw();
  	            if (triggerChangeEvent)
  	                // triggerChangeEvent is true (default) or an Event
  	                triggerEvent("onChange");
  	        }
  	        function close() {
  	            self.isOpen = false;
  	            if (!self.isMobile) {
  	                if (self.calendarContainer !== undefined) {
  	                    self.calendarContainer.classList.remove("open");
  	                }
  	                if (self._input !== undefined) {
  	                    self._input.classList.remove("active");
  	                }
  	            }
  	            triggerEvent("onClose");
  	        }
  	        function destroy() {
  	            if (self.config !== undefined)
  	                triggerEvent("onDestroy");
  	            for (var i = self._handlers.length; i--;) {
  	                self._handlers[i].remove();
  	            }
  	            self._handlers = [];
  	            if (self.mobileInput) {
  	                if (self.mobileInput.parentNode)
  	                    self.mobileInput.parentNode.removeChild(self.mobileInput);
  	                self.mobileInput = undefined;
  	            }
  	            else if (self.calendarContainer && self.calendarContainer.parentNode) {
  	                if (self.config.static && self.calendarContainer.parentNode) {
  	                    var wrapper = self.calendarContainer.parentNode;
  	                    wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);
  	                    if (wrapper.parentNode) {
  	                        while (wrapper.firstChild)
  	                            wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
  	                        wrapper.parentNode.removeChild(wrapper);
  	                    }
  	                }
  	                else
  	                    self.calendarContainer.parentNode.removeChild(self.calendarContainer);
  	            }
  	            if (self.altInput) {
  	                self.input.type = "text";
  	                if (self.altInput.parentNode)
  	                    self.altInput.parentNode.removeChild(self.altInput);
  	                delete self.altInput;
  	            }
  	            if (self.input) {
  	                self.input.type = self.input._type;
  	                self.input.classList.remove("flatpickr-input");
  	                self.input.removeAttribute("readonly");
  	            }
  	            [
  	                "_showTimeInput",
  	                "latestSelectedDateObj",
  	                "_hideNextMonthArrow",
  	                "_hidePrevMonthArrow",
  	                "__hideNextMonthArrow",
  	                "__hidePrevMonthArrow",
  	                "isMobile",
  	                "isOpen",
  	                "selectedDateElem",
  	                "minDateHasTime",
  	                "maxDateHasTime",
  	                "days",
  	                "daysContainer",
  	                "_input",
  	                "_positionElement",
  	                "innerContainer",
  	                "rContainer",
  	                "monthNav",
  	                "todayDateElem",
  	                "calendarContainer",
  	                "weekdayContainer",
  	                "prevMonthNav",
  	                "nextMonthNav",
  	                "monthsDropdownContainer",
  	                "currentMonthElement",
  	                "currentYearElement",
  	                "navigationCurrentMonth",
  	                "selectedDateElem",
  	                "config",
  	            ].forEach(function (k) {
  	                try {
  	                    delete self[k];
  	                }
  	                catch (_) { }
  	            });
  	        }
  	        function isCalendarElem(elem) {
  	            return self.calendarContainer.contains(elem);
  	        }
  	        function documentClick(e) {
  	            if (self.isOpen && !self.config.inline) {
  	                var eventTarget_1 = getEventTarget(e);
  	                var isCalendarElement = isCalendarElem(eventTarget_1);
  	                var isInput = eventTarget_1 === self.input ||
  	                    eventTarget_1 === self.altInput ||
  	                    self.element.contains(eventTarget_1) ||
  	                    // web components
  	                    // e.path is not present in all browsers. circumventing typechecks
  	                    (e.path &&
  	                        e.path.indexOf &&
  	                        (~e.path.indexOf(self.input) ||
  	                            ~e.path.indexOf(self.altInput)));
  	                var lostFocus = !isInput &&
  	                    !isCalendarElement &&
  	                    !isCalendarElem(e.relatedTarget);
  	                var isIgnored = !self.config.ignoredFocusElements.some(function (elem) {
  	                    return elem.contains(eventTarget_1);
  	                });
  	                if (lostFocus && isIgnored) {
  	                    if (self.config.allowInput) {
  	                        self.setDate(self._input.value, false, self.config.altInput
  	                            ? self.config.altFormat
  	                            : self.config.dateFormat);
  	                    }
  	                    if (self.timeContainer !== undefined &&
  	                        self.minuteElement !== undefined &&
  	                        self.hourElement !== undefined &&
  	                        self.input.value !== "" &&
  	                        self.input.value !== undefined) {
  	                        updateTime();
  	                    }
  	                    self.close();
  	                    if (self.config &&
  	                        self.config.mode === "range" &&
  	                        self.selectedDates.length === 1)
  	                        self.clear(false);
  	                }
  	            }
  	        }
  	        function changeYear(newYear) {
  	            if (!newYear ||
  	                (self.config.minDate && newYear < self.config.minDate.getFullYear()) ||
  	                (self.config.maxDate && newYear > self.config.maxDate.getFullYear()))
  	                return;
  	            var newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;
  	            self.currentYear = newYearNum || self.currentYear;
  	            if (self.config.maxDate &&
  	                self.currentYear === self.config.maxDate.getFullYear()) {
  	                self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
  	            }
  	            else if (self.config.minDate &&
  	                self.currentYear === self.config.minDate.getFullYear()) {
  	                self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
  	            }
  	            if (isNewYear) {
  	                self.redraw();
  	                triggerEvent("onYearChange");
  	                buildMonthSwitch();
  	            }
  	        }
  	        function isEnabled(date, timeless) {
  	            var _a;
  	            if (timeless === void 0) { timeless = true; }
  	            var dateToCheck = self.parseDate(date, undefined, timeless); // timeless
  	            if ((self.config.minDate &&
  	                dateToCheck &&
  	                compareDates(dateToCheck, self.config.minDate, timeless !== undefined ? timeless : !self.minDateHasTime) < 0) ||
  	                (self.config.maxDate &&
  	                    dateToCheck &&
  	                    compareDates(dateToCheck, self.config.maxDate, timeless !== undefined ? timeless : !self.maxDateHasTime) > 0))
  	                return false;
  	            if (!self.config.enable && self.config.disable.length === 0)
  	                return true;
  	            if (dateToCheck === undefined)
  	                return false;
  	            var bool = !!self.config.enable, array = (_a = self.config.enable) !== null && _a !== void 0 ? _a : self.config.disable;
  	            for (var i = 0, d = void 0; i < array.length; i++) {
  	                d = array[i];
  	                if (typeof d === "function" &&
  	                    d(dateToCheck) // disabled by function
  	                )
  	                    return bool;
  	                else if (d instanceof Date &&
  	                    dateToCheck !== undefined &&
  	                    d.getTime() === dateToCheck.getTime())
  	                    // disabled by date
  	                    return bool;
  	                else if (typeof d === "string") {
  	                    // disabled by date string
  	                    var parsed = self.parseDate(d, undefined, true);
  	                    return parsed && parsed.getTime() === dateToCheck.getTime()
  	                        ? bool
  	                        : !bool;
  	                }
  	                else if (
  	                // disabled by range
  	                typeof d === "object" &&
  	                    dateToCheck !== undefined &&
  	                    d.from &&
  	                    d.to &&
  	                    dateToCheck.getTime() >= d.from.getTime() &&
  	                    dateToCheck.getTime() <= d.to.getTime())
  	                    return bool;
  	            }
  	            return !bool;
  	        }
  	        function isInView(elem) {
  	            if (self.daysContainer !== undefined)
  	                return (elem.className.indexOf("hidden") === -1 &&
  	                    elem.className.indexOf("flatpickr-disabled") === -1 &&
  	                    self.daysContainer.contains(elem));
  	            return false;
  	        }
  	        function onBlur(e) {
  	            var isInput = e.target === self._input;
  	            var valueChanged = self._input.value.trimEnd() !== getDateStr();
  	            if (isInput &&
  	                valueChanged &&
  	                !(e.relatedTarget && isCalendarElem(e.relatedTarget))) {
  	                self.setDate(self._input.value, true, e.target === self.altInput
  	                    ? self.config.altFormat
  	                    : self.config.dateFormat);
  	            }
  	        }
  	        function onKeyDown(e) {
  	            // e.key                      e.keyCode
  	            // "Backspace"                        8
  	            // "Tab"                              9
  	            // "Enter"                           13
  	            // "Escape"     (IE "Esc")           27
  	            // "ArrowLeft"  (IE "Left")          37
  	            // "ArrowUp"    (IE "Up")            38
  	            // "ArrowRight" (IE "Right")         39
  	            // "ArrowDown"  (IE "Down")          40
  	            // "Delete"     (IE "Del")           46
  	            var eventTarget = getEventTarget(e);
  	            var isInput = self.config.wrap
  	                ? element.contains(eventTarget)
  	                : eventTarget === self._input;
  	            var allowInput = self.config.allowInput;
  	            var allowKeydown = self.isOpen && (!allowInput || !isInput);
  	            var allowInlineKeydown = self.config.inline && isInput && !allowInput;
  	            if (e.keyCode === 13 && isInput) {
  	                if (allowInput) {
  	                    self.setDate(self._input.value, true, eventTarget === self.altInput
  	                        ? self.config.altFormat
  	                        : self.config.dateFormat);
  	                    self.close();
  	                    return eventTarget.blur();
  	                }
  	                else {
  	                    self.open();
  	                }
  	            }
  	            else if (isCalendarElem(eventTarget) ||
  	                allowKeydown ||
  	                allowInlineKeydown) {
  	                var isTimeObj = !!self.timeContainer &&
  	                    self.timeContainer.contains(eventTarget);
  	                switch (e.keyCode) {
  	                    case 13:
  	                        if (isTimeObj) {
  	                            e.preventDefault();
  	                            updateTime();
  	                            focusAndClose();
  	                        }
  	                        else
  	                            selectDate(e);
  	                        break;
  	                    case 27: // escape
  	                        e.preventDefault();
  	                        focusAndClose();
  	                        break;
  	                    case 8:
  	                    case 46:
  	                        if (isInput && !self.config.allowInput) {
  	                            e.preventDefault();
  	                            self.clear();
  	                        }
  	                        break;
  	                    case 37:
  	                    case 39:
  	                        if (!isTimeObj && !isInput) {
  	                            e.preventDefault();
  	                            var activeElement = getClosestActiveElement();
  	                            if (self.daysContainer !== undefined &&
  	                                (allowInput === false ||
  	                                    (activeElement && isInView(activeElement)))) {
  	                                var delta_1 = e.keyCode === 39 ? 1 : -1;
  	                                if (!e.ctrlKey)
  	                                    focusOnDay(undefined, delta_1);
  	                                else {
  	                                    e.stopPropagation();
  	                                    changeMonth(delta_1);
  	                                    focusOnDay(getFirstAvailableDay(1), 0);
  	                                }
  	                            }
  	                        }
  	                        else if (self.hourElement)
  	                            self.hourElement.focus();
  	                        break;
  	                    case 38:
  	                    case 40:
  	                        e.preventDefault();
  	                        var delta = e.keyCode === 40 ? 1 : -1;
  	                        if ((self.daysContainer &&
  	                            eventTarget.$i !== undefined) ||
  	                            eventTarget === self.input ||
  	                            eventTarget === self.altInput) {
  	                            if (e.ctrlKey) {
  	                                e.stopPropagation();
  	                                changeYear(self.currentYear - delta);
  	                                focusOnDay(getFirstAvailableDay(1), 0);
  	                            }
  	                            else if (!isTimeObj)
  	                                focusOnDay(undefined, delta * 7);
  	                        }
  	                        else if (eventTarget === self.currentYearElement) {
  	                            changeYear(self.currentYear - delta);
  	                        }
  	                        else if (self.config.enableTime) {
  	                            if (!isTimeObj && self.hourElement)
  	                                self.hourElement.focus();
  	                            updateTime(e);
  	                            self._debouncedChange();
  	                        }
  	                        break;
  	                    case 9:
  	                        if (isTimeObj) {
  	                            var elems = [
  	                                self.hourElement,
  	                                self.minuteElement,
  	                                self.secondElement,
  	                                self.amPM,
  	                            ]
  	                                .concat(self.pluginElements)
  	                                .filter(function (x) { return x; });
  	                            var i = elems.indexOf(eventTarget);
  	                            if (i !== -1) {
  	                                var target = elems[i + (e.shiftKey ? -1 : 1)];
  	                                e.preventDefault();
  	                                (target || self._input).focus();
  	                            }
  	                        }
  	                        else if (!self.config.noCalendar &&
  	                            self.daysContainer &&
  	                            self.daysContainer.contains(eventTarget) &&
  	                            e.shiftKey) {
  	                            e.preventDefault();
  	                            self._input.focus();
  	                        }
  	                        break;
  	                }
  	            }
  	            if (self.amPM !== undefined && eventTarget === self.amPM) {
  	                switch (e.key) {
  	                    case self.l10n.amPM[0].charAt(0):
  	                    case self.l10n.amPM[0].charAt(0).toLowerCase():
  	                        self.amPM.textContent = self.l10n.amPM[0];
  	                        setHoursFromInputs();
  	                        updateValue();
  	                        break;
  	                    case self.l10n.amPM[1].charAt(0):
  	                    case self.l10n.amPM[1].charAt(0).toLowerCase():
  	                        self.amPM.textContent = self.l10n.amPM[1];
  	                        setHoursFromInputs();
  	                        updateValue();
  	                        break;
  	                }
  	            }
  	            if (isInput || isCalendarElem(eventTarget)) {
  	                triggerEvent("onKeyDown", e);
  	            }
  	        }
  	        function onMouseOver(elem, cellClass) {
  	            if (cellClass === void 0) { cellClass = "flatpickr-day"; }
  	            if (self.selectedDates.length !== 1 ||
  	                (elem &&
  	                    (!elem.classList.contains(cellClass) ||
  	                        elem.classList.contains("flatpickr-disabled"))))
  	                return;
  	            var hoverDate = elem
  	                ? elem.dateObj.getTime()
  	                : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], undefined, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());
  	            var containsDisabled = false;
  	            var minRange = 0, maxRange = 0;
  	            for (var t = rangeStartDate; t < rangeEndDate; t += duration.DAY) {
  	                if (!isEnabled(new Date(t), true)) {
  	                    containsDisabled =
  	                        containsDisabled || (t > rangeStartDate && t < rangeEndDate);
  	                    if (t < initialDate && (!minRange || t > minRange))
  	                        minRange = t;
  	                    else if (t > initialDate && (!maxRange || t < maxRange))
  	                        maxRange = t;
  	                }
  	            }
  	            var hoverableCells = Array.from(self.rContainer.querySelectorAll("*:nth-child(-n+" + self.config.showMonths + ") > ." + cellClass));
  	            hoverableCells.forEach(function (dayElem) {
  	                var date = dayElem.dateObj;
  	                var timestamp = date.getTime();
  	                var outOfRange = (minRange > 0 && timestamp < minRange) ||
  	                    (maxRange > 0 && timestamp > maxRange);
  	                if (outOfRange) {
  	                    dayElem.classList.add("notAllowed");
  	                    ["inRange", "startRange", "endRange"].forEach(function (c) {
  	                        dayElem.classList.remove(c);
  	                    });
  	                    return;
  	                }
  	                else if (containsDisabled && !outOfRange)
  	                    return;
  	                ["startRange", "inRange", "endRange", "notAllowed"].forEach(function (c) {
  	                    dayElem.classList.remove(c);
  	                });
  	                if (elem !== undefined) {
  	                    elem.classList.add(hoverDate <= self.selectedDates[0].getTime()
  	                        ? "startRange"
  	                        : "endRange");
  	                    if (initialDate < hoverDate && timestamp === initialDate)
  	                        dayElem.classList.add("startRange");
  	                    else if (initialDate > hoverDate && timestamp === initialDate)
  	                        dayElem.classList.add("endRange");
  	                    if (timestamp >= minRange &&
  	                        (maxRange === 0 || timestamp <= maxRange) &&
  	                        isBetween(timestamp, initialDate, hoverDate))
  	                        dayElem.classList.add("inRange");
  	                }
  	            });
  	        }
  	        function onResize() {
  	            if (self.isOpen && !self.config.static && !self.config.inline)
  	                positionCalendar();
  	        }
  	        function open(e, positionElement) {
  	            if (positionElement === void 0) { positionElement = self._positionElement; }
  	            if (self.isMobile === true) {
  	                if (e) {
  	                    e.preventDefault();
  	                    var eventTarget = getEventTarget(e);
  	                    if (eventTarget) {
  	                        eventTarget.blur();
  	                    }
  	                }
  	                if (self.mobileInput !== undefined) {
  	                    self.mobileInput.focus();
  	                    self.mobileInput.click();
  	                }
  	                triggerEvent("onOpen");
  	                return;
  	            }
  	            else if (self._input.disabled || self.config.inline) {
  	                return;
  	            }
  	            var wasOpen = self.isOpen;
  	            self.isOpen = true;
  	            if (!wasOpen) {
  	                self.calendarContainer.classList.add("open");
  	                self._input.classList.add("active");
  	                triggerEvent("onOpen");
  	                positionCalendar(positionElement);
  	            }
  	            if (self.config.enableTime === true && self.config.noCalendar === true) {
  	                if (self.config.allowInput === false &&
  	                    (e === undefined ||
  	                        !self.timeContainer.contains(e.relatedTarget))) {
  	                    setTimeout(function () { return self.hourElement.select(); }, 50);
  	                }
  	            }
  	        }
  	        function minMaxDateSetter(type) {
  	            return function (date) {
  	                var dateObj = (self.config["_" + type + "Date"] = self.parseDate(date, self.config.dateFormat));
  	                var inverseDateObj = self.config["_" + (type === "min" ? "max" : "min") + "Date"];
  	                if (dateObj !== undefined) {
  	                    self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] =
  	                        dateObj.getHours() > 0 ||
  	                            dateObj.getMinutes() > 0 ||
  	                            dateObj.getSeconds() > 0;
  	                }
  	                if (self.selectedDates) {
  	                    self.selectedDates = self.selectedDates.filter(function (d) { return isEnabled(d); });
  	                    if (!self.selectedDates.length && type === "min")
  	                        setHoursFromDate(dateObj);
  	                    updateValue();
  	                }
  	                if (self.daysContainer) {
  	                    redraw();
  	                    if (dateObj !== undefined)
  	                        self.currentYearElement[type] = dateObj.getFullYear().toString();
  	                    else
  	                        self.currentYearElement.removeAttribute(type);
  	                    self.currentYearElement.disabled =
  	                        !!inverseDateObj &&
  	                            dateObj !== undefined &&
  	                            inverseDateObj.getFullYear() === dateObj.getFullYear();
  	                }
  	            };
  	        }
  	        function parseConfig() {
  	            var boolOpts = [
  	                "wrap",
  	                "weekNumbers",
  	                "allowInput",
  	                "allowInvalidPreload",
  	                "clickOpens",
  	                "time_24hr",
  	                "enableTime",
  	                "noCalendar",
  	                "altInput",
  	                "shorthandCurrentMonth",
  	                "inline",
  	                "static",
  	                "enableSeconds",
  	                "disableMobile",
  	            ];
  	            var userConfig = __assign(__assign({}, JSON.parse(JSON.stringify(element.dataset || {}))), instanceConfig);
  	            var formats = {};
  	            self.config.parseDate = userConfig.parseDate;
  	            self.config.formatDate = userConfig.formatDate;
  	            Object.defineProperty(self.config, "enable", {
  	                get: function () { return self.config._enable; },
  	                set: function (dates) {
  	                    self.config._enable = parseDateRules(dates);
  	                },
  	            });
  	            Object.defineProperty(self.config, "disable", {
  	                get: function () { return self.config._disable; },
  	                set: function (dates) {
  	                    self.config._disable = parseDateRules(dates);
  	                },
  	            });
  	            var timeMode = userConfig.mode === "time";
  	            if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
  	                var defaultDateFormat = flatpickr.defaultConfig.dateFormat || defaults.dateFormat;
  	                formats.dateFormat =
  	                    userConfig.noCalendar || timeMode
  	                        ? "H:i" + (userConfig.enableSeconds ? ":S" : "")
  	                        : defaultDateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");
  	            }
  	            if (userConfig.altInput &&
  	                (userConfig.enableTime || timeMode) &&
  	                !userConfig.altFormat) {
  	                var defaultAltFormat = flatpickr.defaultConfig.altFormat || defaults.altFormat;
  	                formats.altFormat =
  	                    userConfig.noCalendar || timeMode
  	                        ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K")
  	                        : defaultAltFormat + (" h:i" + (userConfig.enableSeconds ? ":S" : "") + " K");
  	            }
  	            Object.defineProperty(self.config, "minDate", {
  	                get: function () { return self.config._minDate; },
  	                set: minMaxDateSetter("min"),
  	            });
  	            Object.defineProperty(self.config, "maxDate", {
  	                get: function () { return self.config._maxDate; },
  	                set: minMaxDateSetter("max"),
  	            });
  	            var minMaxTimeSetter = function (type) { return function (val) {
  	                self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i:S");
  	            }; };
  	            Object.defineProperty(self.config, "minTime", {
  	                get: function () { return self.config._minTime; },
  	                set: minMaxTimeSetter("min"),
  	            });
  	            Object.defineProperty(self.config, "maxTime", {
  	                get: function () { return self.config._maxTime; },
  	                set: minMaxTimeSetter("max"),
  	            });
  	            if (userConfig.mode === "time") {
  	                self.config.noCalendar = true;
  	                self.config.enableTime = true;
  	            }
  	            Object.assign(self.config, formats, userConfig);
  	            for (var i = 0; i < boolOpts.length; i++)
  	                // https://github.com/microsoft/TypeScript/issues/31663
  	                self.config[boolOpts[i]] =
  	                    self.config[boolOpts[i]] === true ||
  	                        self.config[boolOpts[i]] === "true";
  	            HOOKS.filter(function (hook) { return self.config[hook] !== undefined; }).forEach(function (hook) {
  	                self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);
  	            });
  	            self.isMobile =
  	                !self.config.disableMobile &&
  	                    !self.config.inline &&
  	                    self.config.mode === "single" &&
  	                    !self.config.disable.length &&
  	                    !self.config.enable &&
  	                    !self.config.weekNumbers &&
  	                    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  	            for (var i = 0; i < self.config.plugins.length; i++) {
  	                var pluginConf = self.config.plugins[i](self) || {};
  	                for (var key in pluginConf) {
  	                    if (HOOKS.indexOf(key) > -1) {
  	                        self.config[key] = arrayify(pluginConf[key])
  	                            .map(bindToInstance)
  	                            .concat(self.config[key]);
  	                    }
  	                    else if (typeof userConfig[key] === "undefined")
  	                        self.config[key] = pluginConf[key];
  	                }
  	            }
  	            if (!userConfig.altInputClass) {
  	                self.config.altInputClass =
  	                    getInputElem().className + " " + self.config.altInputClass;
  	            }
  	            triggerEvent("onParseConfig");
  	        }
  	        function getInputElem() {
  	            return self.config.wrap
  	                ? element.querySelector("[data-input]")
  	                : element;
  	        }
  	        function setupLocale() {
  	            if (typeof self.config.locale !== "object" &&
  	                typeof flatpickr.l10ns[self.config.locale] === "undefined")
  	                self.config.errorHandler(new Error("flatpickr: invalid locale " + self.config.locale));
  	            self.l10n = __assign(__assign({}, flatpickr.l10ns.default), (typeof self.config.locale === "object"
  	                ? self.config.locale
  	                : self.config.locale !== "default"
  	                    ? flatpickr.l10ns[self.config.locale]
  	                    : undefined));
  	            tokenRegex.D = "(" + self.l10n.weekdays.shorthand.join("|") + ")";
  	            tokenRegex.l = "(" + self.l10n.weekdays.longhand.join("|") + ")";
  	            tokenRegex.M = "(" + self.l10n.months.shorthand.join("|") + ")";
  	            tokenRegex.F = "(" + self.l10n.months.longhand.join("|") + ")";
  	            tokenRegex.K = "(" + self.l10n.amPM[0] + "|" + self.l10n.amPM[1] + "|" + self.l10n.amPM[0].toLowerCase() + "|" + self.l10n.amPM[1].toLowerCase() + ")";
  	            var userConfig = __assign(__assign({}, instanceConfig), JSON.parse(JSON.stringify(element.dataset || {})));
  	            if (userConfig.time_24hr === undefined &&
  	                flatpickr.defaultConfig.time_24hr === undefined) {
  	                self.config.time_24hr = self.l10n.time_24hr;
  	            }
  	            self.formatDate = createDateFormatter(self);
  	            self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
  	        }
  	        function positionCalendar(customPositionElement) {
  	            if (typeof self.config.position === "function") {
  	                return void self.config.position(self, customPositionElement);
  	            }
  	            if (self.calendarContainer === undefined)
  	                return;
  	            triggerEvent("onPreCalendarPosition");
  	            var positionElement = customPositionElement || self._positionElement;
  	            var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, (function (acc, child) { return acc + child.offsetHeight; }), 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(" "), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === "above" ||
  	                (configPosVertical !== "below" &&
  	                    distanceFromBottom < calendarHeight &&
  	                    inputBounds.top > calendarHeight);
  	            var top = window.pageYOffset +
  	                inputBounds.top +
  	                (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
  	            toggleClass(self.calendarContainer, "arrowTop", !showOnTop);
  	            toggleClass(self.calendarContainer, "arrowBottom", showOnTop);
  	            if (self.config.inline)
  	                return;
  	            var left = window.pageXOffset + inputBounds.left;
  	            var isCenter = false;
  	            var isRight = false;
  	            if (configPosHorizontal === "center") {
  	                left -= (calendarWidth - inputBounds.width) / 2;
  	                isCenter = true;
  	            }
  	            else if (configPosHorizontal === "right") {
  	                left -= calendarWidth - inputBounds.width;
  	                isRight = true;
  	            }
  	            toggleClass(self.calendarContainer, "arrowLeft", !isCenter && !isRight);
  	            toggleClass(self.calendarContainer, "arrowCenter", isCenter);
  	            toggleClass(self.calendarContainer, "arrowRight", isRight);
  	            var right = window.document.body.offsetWidth -
  	                (window.pageXOffset + inputBounds.right);
  	            var rightMost = left + calendarWidth > window.document.body.offsetWidth;
  	            var centerMost = right + calendarWidth > window.document.body.offsetWidth;
  	            toggleClass(self.calendarContainer, "rightMost", rightMost);
  	            if (self.config.static)
  	                return;
  	            self.calendarContainer.style.top = top + "px";
  	            if (!rightMost) {
  	                self.calendarContainer.style.left = left + "px";
  	                self.calendarContainer.style.right = "auto";
  	            }
  	            else if (!centerMost) {
  	                self.calendarContainer.style.left = "auto";
  	                self.calendarContainer.style.right = right + "px";
  	            }
  	            else {
  	                var doc = getDocumentStyleSheet();
  	                // some testing environments don't have css support
  	                if (doc === undefined)
  	                    return;
  	                var bodyWidth = window.document.body.offsetWidth;
  	                var centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
  	                var centerBefore = ".flatpickr-calendar.centerMost:before";
  	                var centerAfter = ".flatpickr-calendar.centerMost:after";
  	                var centerIndex = doc.cssRules.length;
  	                var centerStyle = "{left:" + inputBounds.left + "px;right:auto;}";
  	                toggleClass(self.calendarContainer, "rightMost", false);
  	                toggleClass(self.calendarContainer, "centerMost", true);
  	                doc.insertRule(centerBefore + "," + centerAfter + centerStyle, centerIndex);
  	                self.calendarContainer.style.left = centerLeft + "px";
  	                self.calendarContainer.style.right = "auto";
  	            }
  	        }
  	        function getDocumentStyleSheet() {
  	            var editableSheet = null;
  	            for (var i = 0; i < document.styleSheets.length; i++) {
  	                var sheet = document.styleSheets[i];
  	                if (!sheet.cssRules)
  	                    continue;
  	                try {
  	                    sheet.cssRules;
  	                }
  	                catch (err) {
  	                    continue;
  	                }
  	                editableSheet = sheet;
  	                break;
  	            }
  	            return editableSheet != null ? editableSheet : createStyleSheet();
  	        }
  	        function createStyleSheet() {
  	            var style = document.createElement("style");
  	            document.head.appendChild(style);
  	            return style.sheet;
  	        }
  	        function redraw() {
  	            if (self.config.noCalendar || self.isMobile)
  	                return;
  	            buildMonthSwitch();
  	            updateNavigationCurrentMonth();
  	            buildDays();
  	        }
  	        function focusAndClose() {
  	            self._input.focus();
  	            if (window.navigator.userAgent.indexOf("MSIE") !== -1 ||
  	                navigator.msMaxTouchPoints !== undefined) {
  	                // hack - bugs in the way IE handles focus keeps the calendar open
  	                setTimeout(self.close, 0);
  	            }
  	            else {
  	                self.close();
  	            }
  	        }
  	        function selectDate(e) {
  	            e.preventDefault();
  	            e.stopPropagation();
  	            var isSelectable = function (day) {
  	                return day.classList &&
  	                    day.classList.contains("flatpickr-day") &&
  	                    !day.classList.contains("flatpickr-disabled") &&
  	                    !day.classList.contains("notAllowed");
  	            };
  	            var t = findParent(getEventTarget(e), isSelectable);
  	            if (t === undefined)
  	                return;
  	            var target = t;
  	            var selectedDate = (self.latestSelectedDateObj = new Date(target.dateObj.getTime()));
  	            var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth ||
  	                selectedDate.getMonth() >
  	                    self.currentMonth + self.config.showMonths - 1) &&
  	                self.config.mode !== "range";
  	            self.selectedDateElem = target;
  	            if (self.config.mode === "single")
  	                self.selectedDates = [selectedDate];
  	            else if (self.config.mode === "multiple") {
  	                var selectedIndex = isDateSelected(selectedDate);
  	                if (selectedIndex)
  	                    self.selectedDates.splice(parseInt(selectedIndex), 1);
  	                else
  	                    self.selectedDates.push(selectedDate);
  	            }
  	            else if (self.config.mode === "range") {
  	                if (self.selectedDates.length === 2) {
  	                    self.clear(false, false);
  	                }
  	                self.latestSelectedDateObj = selectedDate;
  	                self.selectedDates.push(selectedDate);
  	                // unless selecting same date twice, sort ascendingly
  	                if (compareDates(selectedDate, self.selectedDates[0], true) !== 0)
  	                    self.selectedDates.sort(function (a, b) { return a.getTime() - b.getTime(); });
  	            }
  	            setHoursFromInputs();
  	            if (shouldChangeMonth) {
  	                var isNewYear = self.currentYear !== selectedDate.getFullYear();
  	                self.currentYear = selectedDate.getFullYear();
  	                self.currentMonth = selectedDate.getMonth();
  	                if (isNewYear) {
  	                    triggerEvent("onYearChange");
  	                    buildMonthSwitch();
  	                }
  	                triggerEvent("onMonthChange");
  	            }
  	            updateNavigationCurrentMonth();
  	            buildDays();
  	            updateValue();
  	            // maintain focus
  	            if (!shouldChangeMonth &&
  	                self.config.mode !== "range" &&
  	                self.config.showMonths === 1)
  	                focusOnDayElem(target);
  	            else if (self.selectedDateElem !== undefined &&
  	                self.hourElement === undefined) {
  	                self.selectedDateElem && self.selectedDateElem.focus();
  	            }
  	            if (self.hourElement !== undefined)
  	                self.hourElement !== undefined && self.hourElement.focus();
  	            if (self.config.closeOnSelect) {
  	                var single = self.config.mode === "single" && !self.config.enableTime;
  	                var range = self.config.mode === "range" &&
  	                    self.selectedDates.length === 2 &&
  	                    !self.config.enableTime;
  	                if (single || range) {
  	                    focusAndClose();
  	                }
  	            }
  	            triggerChange();
  	        }
  	        var CALLBACKS = {
  	            locale: [setupLocale, updateWeekdays],
  	            showMonths: [buildMonths, setCalendarWidth, buildWeekdays],
  	            minDate: [jumpToDate],
  	            maxDate: [jumpToDate],
  	            positionElement: [updatePositionElement],
  	            clickOpens: [
  	                function () {
  	                    if (self.config.clickOpens === true) {
  	                        bind(self._input, "focus", self.open);
  	                        bind(self._input, "click", self.open);
  	                    }
  	                    else {
  	                        self._input.removeEventListener("focus", self.open);
  	                        self._input.removeEventListener("click", self.open);
  	                    }
  	                },
  	            ],
  	        };
  	        function set(option, value) {
  	            if (option !== null && typeof option === "object") {
  	                Object.assign(self.config, option);
  	                for (var key in option) {
  	                    if (CALLBACKS[key] !== undefined)
  	                        CALLBACKS[key].forEach(function (x) { return x(); });
  	                }
  	            }
  	            else {
  	                self.config[option] = value;
  	                if (CALLBACKS[option] !== undefined)
  	                    CALLBACKS[option].forEach(function (x) { return x(); });
  	                else if (HOOKS.indexOf(option) > -1)
  	                    self.config[option] = arrayify(value);
  	            }
  	            self.redraw();
  	            updateValue(true);
  	        }
  	        function setSelectedDate(inputDate, format) {
  	            var dates = [];
  	            if (inputDate instanceof Array)
  	                dates = inputDate.map(function (d) { return self.parseDate(d, format); });
  	            else if (inputDate instanceof Date || typeof inputDate === "number")
  	                dates = [self.parseDate(inputDate, format)];
  	            else if (typeof inputDate === "string") {
  	                switch (self.config.mode) {
  	                    case "single":
  	                    case "time":
  	                        dates = [self.parseDate(inputDate, format)];
  	                        break;
  	                    case "multiple":
  	                        dates = inputDate
  	                            .split(self.config.conjunction)
  	                            .map(function (date) { return self.parseDate(date, format); });
  	                        break;
  	                    case "range":
  	                        dates = inputDate
  	                            .split(self.l10n.rangeSeparator)
  	                            .map(function (date) { return self.parseDate(date, format); });
  	                        break;
  	                }
  	            }
  	            else
  	                self.config.errorHandler(new Error("Invalid date supplied: " + JSON.stringify(inputDate)));
  	            self.selectedDates = (self.config.allowInvalidPreload
  	                ? dates
  	                : dates.filter(function (d) { return d instanceof Date && isEnabled(d, false); }));
  	            if (self.config.mode === "range")
  	                self.selectedDates.sort(function (a, b) { return a.getTime() - b.getTime(); });
  	        }
  	        function setDate(date, triggerChange, format) {
  	            if (triggerChange === void 0) { triggerChange = false; }
  	            if (format === void 0) { format = self.config.dateFormat; }
  	            if ((date !== 0 && !date) || (date instanceof Array && date.length === 0))
  	                return self.clear(triggerChange);
  	            setSelectedDate(date, format);
  	            self.latestSelectedDateObj =
  	                self.selectedDates[self.selectedDates.length - 1];
  	            self.redraw();
  	            jumpToDate(undefined, triggerChange);
  	            setHoursFromDate();
  	            if (self.selectedDates.length === 0) {
  	                self.clear(false);
  	            }
  	            updateValue(triggerChange);
  	            if (triggerChange)
  	                triggerEvent("onChange");
  	        }
  	        function parseDateRules(arr) {
  	            return arr
  	                .slice()
  	                .map(function (rule) {
  	                if (typeof rule === "string" ||
  	                    typeof rule === "number" ||
  	                    rule instanceof Date) {
  	                    return self.parseDate(rule, undefined, true);
  	                }
  	                else if (rule &&
  	                    typeof rule === "object" &&
  	                    rule.from &&
  	                    rule.to)
  	                    return {
  	                        from: self.parseDate(rule.from, undefined),
  	                        to: self.parseDate(rule.to, undefined),
  	                    };
  	                return rule;
  	            })
  	                .filter(function (x) { return x; }); // remove falsy values
  	        }
  	        function setupDates() {
  	            self.selectedDates = [];
  	            self.now = self.parseDate(self.config.now) || new Date();
  	            // Workaround IE11 setting placeholder as the input's value
  	            var preloadedDate = self.config.defaultDate ||
  	                ((self.input.nodeName === "INPUT" ||
  	                    self.input.nodeName === "TEXTAREA") &&
  	                    self.input.placeholder &&
  	                    self.input.value === self.input.placeholder
  	                    ? null
  	                    : self.input.value);
  	            if (preloadedDate)
  	                setSelectedDate(preloadedDate, self.config.dateFormat);
  	            self._initialDate =
  	                self.selectedDates.length > 0
  	                    ? self.selectedDates[0]
  	                    : self.config.minDate &&
  	                        self.config.minDate.getTime() > self.now.getTime()
  	                        ? self.config.minDate
  	                        : self.config.maxDate &&
  	                            self.config.maxDate.getTime() < self.now.getTime()
  	                            ? self.config.maxDate
  	                            : self.now;
  	            self.currentYear = self._initialDate.getFullYear();
  	            self.currentMonth = self._initialDate.getMonth();
  	            if (self.selectedDates.length > 0)
  	                self.latestSelectedDateObj = self.selectedDates[0];
  	            if (self.config.minTime !== undefined)
  	                self.config.minTime = self.parseDate(self.config.minTime, "H:i");
  	            if (self.config.maxTime !== undefined)
  	                self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");
  	            self.minDateHasTime =
  	                !!self.config.minDate &&
  	                    (self.config.minDate.getHours() > 0 ||
  	                        self.config.minDate.getMinutes() > 0 ||
  	                        self.config.minDate.getSeconds() > 0);
  	            self.maxDateHasTime =
  	                !!self.config.maxDate &&
  	                    (self.config.maxDate.getHours() > 0 ||
  	                        self.config.maxDate.getMinutes() > 0 ||
  	                        self.config.maxDate.getSeconds() > 0);
  	        }
  	        function setupInputs() {
  	            self.input = getInputElem();
  	            /* istanbul ignore next */
  	            if (!self.input) {
  	                self.config.errorHandler(new Error("Invalid input element specified"));
  	                return;
  	            }
  	            // hack: store previous type to restore it after destroy()
  	            self.input._type = self.input.type;
  	            self.input.type = "text";
  	            self.input.classList.add("flatpickr-input");
  	            self._input = self.input;
  	            if (self.config.altInput) {
  	                // replicate self.element
  	                self.altInput = createElement(self.input.nodeName, self.config.altInputClass);
  	                self._input = self.altInput;
  	                self.altInput.placeholder = self.input.placeholder;
  	                self.altInput.disabled = self.input.disabled;
  	                self.altInput.required = self.input.required;
  	                self.altInput.tabIndex = self.input.tabIndex;
  	                self.altInput.type = "text";
  	                self.input.setAttribute("type", "hidden");
  	                if (!self.config.static && self.input.parentNode)
  	                    self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
  	            }
  	            if (!self.config.allowInput)
  	                self._input.setAttribute("readonly", "readonly");
  	            updatePositionElement();
  	        }
  	        function updatePositionElement() {
  	            self._positionElement = self.config.positionElement || self._input;
  	        }
  	        function setupMobile() {
  	            var inputType = self.config.enableTime
  	                ? self.config.noCalendar
  	                    ? "time"
  	                    : "datetime-local"
  	                : "date";
  	            self.mobileInput = createElement("input", self.input.className + " flatpickr-mobile");
  	            self.mobileInput.tabIndex = 1;
  	            self.mobileInput.type = inputType;
  	            self.mobileInput.disabled = self.input.disabled;
  	            self.mobileInput.required = self.input.required;
  	            self.mobileInput.placeholder = self.input.placeholder;
  	            self.mobileFormatStr =
  	                inputType === "datetime-local"
  	                    ? "Y-m-d\\TH:i:S"
  	                    : inputType === "date"
  	                        ? "Y-m-d"
  	                        : "H:i:S";
  	            if (self.selectedDates.length > 0) {
  	                self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);
  	            }
  	            if (self.config.minDate)
  	                self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");
  	            if (self.config.maxDate)
  	                self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");
  	            if (self.input.getAttribute("step"))
  	                self.mobileInput.step = String(self.input.getAttribute("step"));
  	            self.input.type = "hidden";
  	            if (self.altInput !== undefined)
  	                self.altInput.type = "hidden";
  	            try {
  	                if (self.input.parentNode)
  	                    self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
  	            }
  	            catch (_a) { }
  	            bind(self.mobileInput, "change", function (e) {
  	                self.setDate(getEventTarget(e).value, false, self.mobileFormatStr);
  	                triggerEvent("onChange");
  	                triggerEvent("onClose");
  	            });
  	        }
  	        function toggle(e) {
  	            if (self.isOpen === true)
  	                return self.close();
  	            self.open(e);
  	        }
  	        function triggerEvent(event, data) {
  	            // If the instance has been destroyed already, all hooks have been removed
  	            if (self.config === undefined)
  	                return;
  	            var hooks = self.config[event];
  	            if (hooks !== undefined && hooks.length > 0) {
  	                for (var i = 0; hooks[i] && i < hooks.length; i++)
  	                    hooks[i](self.selectedDates, self.input.value, self, data);
  	            }
  	            if (event === "onChange") {
  	                self.input.dispatchEvent(createEvent("change"));
  	                // many front-end frameworks bind to the input event
  	                self.input.dispatchEvent(createEvent("input"));
  	            }
  	        }
  	        function createEvent(name) {
  	            var e = document.createEvent("Event");
  	            e.initEvent(name, true, true);
  	            return e;
  	        }
  	        function isDateSelected(date) {
  	            for (var i = 0; i < self.selectedDates.length; i++) {
  	                var selectedDate = self.selectedDates[i];
  	                if (selectedDate instanceof Date &&
  	                    compareDates(selectedDate, date) === 0)
  	                    return "" + i;
  	            }
  	            return false;
  	        }
  	        function isDateInRange(date) {
  	            if (self.config.mode !== "range" || self.selectedDates.length < 2)
  	                return false;
  	            return (compareDates(date, self.selectedDates[0]) >= 0 &&
  	                compareDates(date, self.selectedDates[1]) <= 0);
  	        }
  	        function updateNavigationCurrentMonth() {
  	            if (self.config.noCalendar || self.isMobile || !self.monthNav)
  	                return;
  	            self.yearElements.forEach(function (yearElement, i) {
  	                var d = new Date(self.currentYear, self.currentMonth, 1);
  	                d.setMonth(self.currentMonth + i);
  	                if (self.config.showMonths > 1 ||
  	                    self.config.monthSelectorType === "static") {
  	                    self.monthElements[i].textContent =
  	                        monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + " ";
  	                }
  	                else {
  	                    self.monthsDropdownContainer.value = d.getMonth().toString();
  	                }
  	                yearElement.value = d.getFullYear().toString();
  	            });
  	            self._hidePrevMonthArrow =
  	                self.config.minDate !== undefined &&
  	                    (self.currentYear === self.config.minDate.getFullYear()
  	                        ? self.currentMonth <= self.config.minDate.getMonth()
  	                        : self.currentYear < self.config.minDate.getFullYear());
  	            self._hideNextMonthArrow =
  	                self.config.maxDate !== undefined &&
  	                    (self.currentYear === self.config.maxDate.getFullYear()
  	                        ? self.currentMonth + 1 > self.config.maxDate.getMonth()
  	                        : self.currentYear > self.config.maxDate.getFullYear());
  	        }
  	        function getDateStr(specificFormat) {
  	            var format = specificFormat ||
  	                (self.config.altInput ? self.config.altFormat : self.config.dateFormat);
  	            return self.selectedDates
  	                .map(function (dObj) { return self.formatDate(dObj, format); })
  	                .filter(function (d, i, arr) {
  	                return self.config.mode !== "range" ||
  	                    self.config.enableTime ||
  	                    arr.indexOf(d) === i;
  	            })
  	                .join(self.config.mode !== "range"
  	                ? self.config.conjunction
  	                : self.l10n.rangeSeparator);
  	        }
  	        /**
  	         * Updates the values of inputs associated with the calendar
  	         */
  	        function updateValue(triggerChange) {
  	            if (triggerChange === void 0) { triggerChange = true; }
  	            if (self.mobileInput !== undefined && self.mobileFormatStr) {
  	                self.mobileInput.value =
  	                    self.latestSelectedDateObj !== undefined
  	                        ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr)
  	                        : "";
  	            }
  	            self.input.value = getDateStr(self.config.dateFormat);
  	            if (self.altInput !== undefined) {
  	                self.altInput.value = getDateStr(self.config.altFormat);
  	            }
  	            if (triggerChange !== false)
  	                triggerEvent("onValueUpdate");
  	        }
  	        function onMonthNavClick(e) {
  	            var eventTarget = getEventTarget(e);
  	            var isPrevMonth = self.prevMonthNav.contains(eventTarget);
  	            var isNextMonth = self.nextMonthNav.contains(eventTarget);
  	            if (isPrevMonth || isNextMonth) {
  	                changeMonth(isPrevMonth ? -1 : 1);
  	            }
  	            else if (self.yearElements.indexOf(eventTarget) >= 0) {
  	                eventTarget.select();
  	            }
  	            else if (eventTarget.classList.contains("arrowUp")) {
  	                self.changeYear(self.currentYear + 1);
  	            }
  	            else if (eventTarget.classList.contains("arrowDown")) {
  	                self.changeYear(self.currentYear - 1);
  	            }
  	        }
  	        function timeWrapper(e) {
  	            e.preventDefault();
  	            var isKeyDown = e.type === "keydown", eventTarget = getEventTarget(e), input = eventTarget;
  	            if (self.amPM !== undefined && eventTarget === self.amPM) {
  	                self.amPM.textContent =
  	                    self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
  	            }
  	            var min = parseFloat(input.getAttribute("min")), max = parseFloat(input.getAttribute("max")), step = parseFloat(input.getAttribute("step")), curValue = parseInt(input.value, 10), delta = e.delta ||
  	                (isKeyDown ? (e.which === 38 ? 1 : -1) : 0);
  	            var newValue = curValue + step * delta;
  	            if (typeof input.value !== "undefined" && input.value.length === 2) {
  	                var isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;
  	                if (newValue < min) {
  	                    newValue =
  	                        max +
  	                            newValue +
  	                            int(!isHourElem) +
  	                            (int(isHourElem) && int(!self.amPM));
  	                    if (isMinuteElem)
  	                        incrementNumInput(undefined, -1, self.hourElement);
  	                }
  	                else if (newValue > max) {
  	                    newValue =
  	                        input === self.hourElement ? newValue - max - int(!self.amPM) : min;
  	                    if (isMinuteElem)
  	                        incrementNumInput(undefined, 1, self.hourElement);
  	                }
  	                if (self.amPM &&
  	                    isHourElem &&
  	                    (step === 1
  	                        ? newValue + curValue === 23
  	                        : Math.abs(newValue - curValue) > step)) {
  	                    self.amPM.textContent =
  	                        self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
  	                }
  	                input.value = pad(newValue);
  	            }
  	        }
  	        init();
  	        return self;
  	    }
  	    /* istanbul ignore next */
  	    function _flatpickr(nodeList, config) {
  	        // static list
  	        var nodes = Array.prototype.slice
  	            .call(nodeList)
  	            .filter(function (x) { return x instanceof HTMLElement; });
  	        var instances = [];
  	        for (var i = 0; i < nodes.length; i++) {
  	            var node = nodes[i];
  	            try {
  	                if (node.getAttribute("data-fp-omit") !== null)
  	                    continue;
  	                if (node._flatpickr !== undefined) {
  	                    node._flatpickr.destroy();
  	                    node._flatpickr = undefined;
  	                }
  	                node._flatpickr = FlatpickrInstance(node, config || {});
  	                instances.push(node._flatpickr);
  	            }
  	            catch (e) {
  	                console.error(e);
  	            }
  	        }
  	        return instances.length === 1 ? instances[0] : instances;
  	    }
  	    /* istanbul ignore next */
  	    if (typeof HTMLElement !== "undefined" &&
  	        typeof HTMLCollection !== "undefined" &&
  	        typeof NodeList !== "undefined") {
  	        // browser env
  	        HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function (config) {
  	            return _flatpickr(this, config);
  	        };
  	        HTMLElement.prototype.flatpickr = function (config) {
  	            return _flatpickr([this], config);
  	        };
  	    }
  	    /* istanbul ignore next */
  	    var flatpickr = function (selector, config) {
  	        if (typeof selector === "string") {
  	            return _flatpickr(window.document.querySelectorAll(selector), config);
  	        }
  	        else if (selector instanceof Node) {
  	            return _flatpickr([selector], config);
  	        }
  	        else {
  	            return _flatpickr(selector, config);
  	        }
  	    };
  	    /* istanbul ignore next */
  	    flatpickr.defaultConfig = {};
  	    flatpickr.l10ns = {
  	        en: __assign({}, english),
  	        default: __assign({}, english),
  	    };
  	    flatpickr.localize = function (l10n) {
  	        flatpickr.l10ns.default = __assign(__assign({}, flatpickr.l10ns.default), l10n);
  	    };
  	    flatpickr.setDefaults = function (config) {
  	        flatpickr.defaultConfig = __assign(__assign({}, flatpickr.defaultConfig), config);
  	    };
  	    flatpickr.parseDate = createDateParser({});
  	    flatpickr.formatDate = createDateFormatter({});
  	    flatpickr.compareDates = compareDates;
  	    /* istanbul ignore next */
  	    if (typeof jQuery !== "undefined" && typeof jQuery.fn !== "undefined") {
  	        jQuery.fn.flatpickr = function (config) {
  	            return _flatpickr(this, config);
  	        };
  	    }
  	    Date.prototype.fp_incr = function (days) {
  	        return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
  	    };
  	    if (typeof window !== "undefined") {
  	        window.flatpickr = flatpickr;
  	    }

  	    return flatpickr;

  	}))); 
  } (flatpickr$1));

  var flatpickrExports = flatpickr$1.exports;
  var flatpickr = /*@__PURE__*/getDefaultExportFromCjs(flatpickrExports);

  const DatePickerFlatpickr = props => {
    const {
      property,
      record,
      onChange
    } = props;
    const inputRef = React.useRef(null);
    const wrapperRef = React.useRef(null);
    const path = property.path;
    const value = record?.params?.[path] || '';
    const [fpInstance, setFpInstance] = React.useState(null);
    React.useEffect(() => {
      if (typeof document !== 'undefined') {
        // Localize flatpickr to Vietnamese (weekday and month names, week start)
        // Explicit Vietnamese locale object as reliable fallback when bundler doesn't include l10n
        const viLocale = {
          weekdays: {
            shorthand: ['CN', 'Hai', 'Ba', 'T∆∞', 'NƒÉm', 'S√°u', 'B·∫£y'],
            longhand: ['Ch·ªß Nh·∫≠t', 'Th·ª© Hai', 'Th·ª© Ba', 'Th·ª© T∆∞', 'Th·ª© NƒÉm', 'Th·ª© S√°u', 'Th·ª© B·∫£y']
          },
          months: {
            shorthand: ['Th1', 'Th2', 'Th3', 'Th4', 'Th5', 'Th6', 'Th7', 'Th8', 'Th9', 'Th10', 'Th11', 'Th12'],
            longhand: ['Th√°ng M·ªôt', 'Th√°ng Hai', 'Th√°ng Ba', 'Th√°ng T∆∞', 'Th√°ng NƒÉm', 'Th√°ng S√°u', 'Th√°ng B·∫£y', 'Th√°ng T√°m', 'Th√°ng Ch√≠n', 'Th√°ng M∆∞·ªùi', 'Th√°ng M∆∞·ªùi M·ªôt', 'Th√°ng M∆∞·ªùi Hai']
          },
          firstDayOfWeek: 1,
          rangeSeparator: ' ƒë·∫øn ',
          weekAbbreviation: 'Tu',
          scrollTitle: 'Cu·ªôn ƒë·ªÉ thay ƒë·ªïi',
          toggleTitle: 'Nh·∫•n ƒë·ªÉ chuy·ªÉn',
          time_24hr: true
        };
        try {
          // Prefer the built-in l10n if available (flatpickr.l10ns.vi)
          const vi = flatpickr && flatpickr.l10ns && flatpickr.l10ns.vi || window && window.flatpickr && window.flatpickr.l10ns && window.flatpickr.l10ns.vi;
          if (vi) flatpickr.localize(vi);else flatpickr.localize(viLocale);
        } catch (e) {
          // ignore if localization can't be applied (SSR or bundler issues)
        }

        // Ensure flatpickr CSS is present; AdminJS serves the vendor path /vendor/flatpickr
        const id = 'flatpickr-inline-css-marker';
        if (!document.getElementById(id)) {
          const link = document.createElement('link');
          link.id = id;
          link.rel = 'stylesheet';
          link.href = '/vendor/flatpickr/flatpickr.min.css';
          document.head.appendChild(link);
        }
      }
      if (!inputRef.current) return;
      const fp = flatpickr(inputRef.current, {
        // Underlying date value in ISO (Y-m-d); show user-friendly dd/MM/yyyy via altInput
        dateFormat: 'Y-m-d',
        altInput: true,
        altFormat: 'd/m/Y',
        defaultDate: value || null,
        allowInput: true,
        static: true,
        clickOpens: false,
        position: 'below',
        appendTo: typeof document !== 'undefined' ? document.body : null,
        locale: flatpickr && flatpickr.l10ns && flatpickr.l10ns.vi ? flatpickr.l10ns.vi : undefined,
        firstDayOfWeek: 1,
        onChange: (selectedDates, dateStr) => {
          try {
            const d = selectedDates && selectedDates[0] ? selectedDates[0] : null;
            if (d) {
              // Build ISO date from local date parts to avoid UTC timezone shift
              const yyyy = d.getFullYear();
              const mm = String(d.getMonth() + 1).padStart(2, '0');
              const dd = String(d.getDate()).padStart(2, '0');
              const iso = `${yyyy}-${mm}-${dd}`;
              onChange(path, iso);
            } else {
              onChange(path, '');
            }
          } catch (e) {
            onChange(path, dateStr);
          }
        }
      });
      setFpInstance(fp);
      const openHandler = e => {
        try {
          fp.open();
        } catch (err) {}
      };
      const onDocClick = e => {
        if (!wrapperRef.current) return;
        if (!wrapperRef.current.contains(e.target)) {
          try {
            fp.close();
          } catch (err) {}
        }
      };
      const inputEl = inputRef.current;
      inputEl.addEventListener('click', openHandler);
      document.addEventListener('mousedown', onDocClick);
      return () => {
        try {
          inputEl.removeEventListener('click', openHandler);
        } catch (e) {}
        try {
          document.removeEventListener('mousedown', onDocClick);
        } catch (e) {}
        try {
          fp.destroy();
        } catch (e) {}
        setFpInstance(null);
      };
    }, [inputRef]);
    return /*#__PURE__*/React__default.default.createElement("div", {
      ref: wrapperRef,
      className: "flatpickr-admin-wrapper"
    }, property ? (() => {
      // Prefer AdminJS provided label if it's not just the property path
      const propLabel = property.label;
      const propPath = property.path || '';
      const looksLikePath = s => !s || s === propPath || !/\s/.test(s);
      const labelMap = {
        dateOfBirth: 'Ng√†y sinh',
        startDate: 'Ng√†y b·∫Øt ƒë·∫ßu',
        endDate: 'Ng√†y k·∫øt th√∫c'
      };
      const humanize = s => {
        if (!s) return '';
        const spaced = s.replace(/([a-z0-9])([A-Z])/g, '$1 $2').replace(/[_-]/g, ' ');
        return spaced.replace(/\b\w/g, c => c.toUpperCase());
      };
      const display = propLabel && !looksLikePath(propLabel) ? propLabel : labelMap[propPath] || humanize(propLabel || propPath);
      return /*#__PURE__*/React__default.default.createElement("label", {
        className: "flatpickr-label"
      }, display);
    })() : null, /*#__PURE__*/React__default.default.createElement("div", {
      className: "flatpickr-input-group"
    }, /*#__PURE__*/React__default.default.createElement("input", {
      ref: inputRef,
      defaultValue: value,
      className: "adminjs-input flatpickr-input"
    }), /*#__PURE__*/React__default.default.createElement("button", {
      type: "button",
      className: "flatpickr-trigger",
      onClick: () => fpInstance && fpInstance.open(),
      "aria-label": "Open date picker"
    }, /*#__PURE__*/React__default.default.createElement("svg", {
      width: "18",
      height: "18",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/React__default.default.createElement("path", {
      d: "M7 10l5 5 5-5",
      stroke: "currentColor",
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    })))));
  };

  new adminjs.ApiClient();
  const ManagedClassesMultiSelect = props => {
    const {
      record,
      onChange,
      property
    } = props;
    const [options, setOptions] = React.useState([]);
    const [value, setValue] = React.useState([]);
    React.useEffect(() => {
      let mounted = true;
      (async () => {
        try {
          // Prefer admin-only endpoint (served without JWT) for AdminJS components
          const endpoint = window && window.location && window.location.pathname && window.location.pathname.startsWith('/admin') ? '/admin-api/classes' : '/api/student-import/classes';
          const response = await fetch(endpoint);
          const payload = await response.json();
          if (payload && payload.success && Array.isArray(payload.data)) {
            const opts = payload.data.map(c => ({
              value: String(c.id || c.classId || c.cohortId),
              label: `${c.classCode || c.classCode} - ${c.className || c.className}`
            }));
            if (mounted) setOptions(opts);
            // If the record doesn't include managedClasses, try fetching assignments for this record
            if (mounted && (!record || !record.params || !record.params.managedClasses)) {
              try {
                const teacherEndpoint = '/admin-api/teacher-assignments' + (record && record.params && record.params.email ? `?email=${encodeURIComponent(record.params.email)}` : record && record.params && record.params.id ? `?userId=${encodeURIComponent(record.params.id)}` : '');
                const asResp = await fetch(teacherEndpoint);
                const asPayload = await asResp.json();
                if (asPayload && asPayload.success && Array.isArray(asPayload.data) && asPayload.data.length) {
                  const ids = asPayload.data.map(c => String(c.id));
                  // set value matching existing options
                  const selected = opts.filter(o => ids.includes(o.value));
                  if (selected.length) setValue(selected);
                }
              } catch (e) {
                console.error('Error fetching teacher assignments from admin-api', e);
              }
            }
          } else {
            if (mounted) setOptions([]);
          }
        } catch (err) {
          console.error('Error loading classes for multi-select', err);
        }
      })();
      return () => {
        mounted = false;
      };
    }, []);

    // When options or record change, compute selected items so edit form preselects correctly
    React.useEffect(() => {
      if (!options || options.length === 0) return;
      const recVal = record && record.params && record.params[property.name];
      // Debug logs to help troubleshoot why preselect may not appear
      let ids = [];
      if (Array.isArray(recVal)) ids = recVal.map(String);else if (typeof recVal === 'string') {
        const parsed = tryParse(recVal);
        if (Array.isArray(parsed)) ids = parsed.map(String);else if (recVal.trim() !== '') ids = [recVal.trim()];
      }
      if (ids.length) {
        const selected = options.filter(o => ids.includes(o.value));
        setValue(selected);
      } else {
        // also support managedClassesLabels as readable labels
        const labels = record && record.params && record.params.managedClassesLabels;
        if (Array.isArray(labels) && labels.length) {
          const selected = options.filter(o => labels.includes(o.label));
          console.debug('ManagedClassesMultiSelect: selected by label =', selected);
          setValue(selected);
        }
      }
    }, [options, record, property.name]);
    const handleChange = selected => {
      setValue(selected || []);
      const ids = (selected || []).map(s => s.value);
      try {
        console.debug('ManagedClassesMultiSelect: handleChange ids =', ids);
      } catch (e) {}
      // AdminJS expects primitive values in payload; assign array
      onChange(property.name, ids);
    };

    // small helper to try parse JSON array from string
    function tryParse(v) {
      try {
        const p = JSON.parse(v);
        return Array.isArray(p) ? p.map(String) : null;
      } catch (e) {
        return null;
      }
    }
    return /*#__PURE__*/React__default.default.createElement(designSystem.FormGroup, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, property.label), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
      value: value,
      options: options,
      onChange: handleChange,
      isMulti: true,
      placeholder: "Ch\u1ECDn c\xE1c l\u1EDBp..."
    }));
  };

  const AdminDashboard = () => {
    const [stats, setStats] = React.useState(null);
    const [loading, setLoading] = React.useState(true);
    const [error, setError] = React.useState(null);
    React.useEffect(() => {
      const load = async () => {
        try {
          const res = await fetch('/admin-api/dashboard-stats', {
            credentials: 'include'
          });
          const payload = await res.json();
          if (payload && payload.success) setStats(payload.data);else setError(payload.message || 'Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™');
        } catch (e) {
          setError(e.message);
        } finally {
          setLoading(false);
        }
      };
      load();
    }, []);
    if (loading) return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      p: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Loader, null));
    if (error) return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      p: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, error));
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      p: "xl"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.H2, null, "\uD83D\uDCC8 Th\u1ED1ng k\xEA h\u1EC7 th\u1ED1ng"), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "lg",
      display: "flex",
      style: {
        gap: '16px',
        flexWrap: 'wrap'
      }
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Badge, null, "Users: ", stats.users), /*#__PURE__*/React__default.default.createElement(designSystem.Badge, null, "Teachers: ", stats.teachers), /*#__PURE__*/React__default.default.createElement(designSystem.Badge, null, "Students: ", stats.students), /*#__PURE__*/React__default.default.createElement(designSystem.Badge, null, "Classes: ", stats.classes), /*#__PURE__*/React__default.default.createElement(designSystem.Badge, null, "Subjects: ", stats.subjects), /*#__PURE__*/React__default.default.createElement(designSystem.Badge, null, "Grades: ", stats.grades)), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Table, null, /*#__PURE__*/React__default.default.createElement("thead", null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement("strong", null, "Metric")), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement("strong", null, "Value")))), /*#__PURE__*/React__default.default.createElement("tbody", null, Object.entries(stats).map(([k, v]) => /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, {
      key: k
    }, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, k), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, String(v))))))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      color: "grey60"
    }, "C\u1EADp nh\u1EADt l\xFAc: ", new Date(stats.updatedAt).toLocaleString())));
  };

  const CustomAdminLogin = props => {
    const {
      action,
      error,
      message
    } = props;
    const [email, setEmail] = React.useState('');
    const [password, setPassword] = React.useState('');
    const [remember, setRemember] = React.useState(false);
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: {
        minHeight: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        background: 'linear-gradient(135deg, rgb(106 234 102) 0%, rgb(65 119 29) 100%)'
      }
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: {
        width: 480,
        background: 'white',
        padding: 32,
        borderRadius: 8,
        boxShadow: '0 10px 30px rgba(0,0,0,0.1)'
      }
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      style: {
        display: 'flex',
        alignItems: 'center',
        gap: 12,
        marginBottom: 8
      }
    }, /*#__PURE__*/React__default.default.createElement("img", {
      src: "/public/assets/logo.jpeg",
      alt: "logo",
      style: {
        width: 56,
        height: 56,
        borderRadius: 6,
        objectFit: 'cover'
      }
    }), /*#__PURE__*/React__default.default.createElement("div", null, /*#__PURE__*/React__default.default.createElement(designSystem.H1, {
      style: {
        margin: 0,
        fontSize: '24px',
        fontWeight: 'bold'
      }
    }, "TR\u01AF\u1EDCNG C\u0110CSND II"), /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      color: "grey60"
    }, "H\u1EC7 th\u1ED1ng Qu\u1EA3n l\xFD \u0110i\u1EC3m Sinh vi\xEAn"))), error && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      style: {
        color: '#b00020'
      }
    }, error)), message && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mb: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      style: {
        color: '#0c5460'
      }
    }, message)), /*#__PURE__*/React__default.default.createElement("form", {
      action: action,
      method: "post"
    }, /*#__PURE__*/React__default.default.createElement("input", {
      type: "hidden",
      name: "_csrf",
      value: props.csrf || ''
    }), /*#__PURE__*/React__default.default.createElement(designSystem.FormGroup, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      required: true
    }, "\u0110\u1ECBa ch\u1EC9 email"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      name: "email",
      value: email,
      onChange: e => setEmail(e.target.value)
    })), /*#__PURE__*/React__default.default.createElement(designSystem.FormGroup, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
      required: true
    }, "M\u1EADt kh\u1EA9u"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
      name: "password",
      type: "password",
      value: password,
      onChange: e => setPassword(e.target.value)
    })), /*#__PURE__*/React__default.default.createElement(designSystem.FormGroup, {
      style: {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between'
      }
    }, /*#__PURE__*/React__default.default.createElement("label", {
      style: {
        display: 'flex',
        alignItems: 'center',
        gap: 8
      }
    }, /*#__PURE__*/React__default.default.createElement("input", {
      type: "checkbox",
      name: "remember",
      checked: remember,
      onChange: e => setRemember(e.target.checked)
    }), /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, "Ghi nh\u1EDB \u0111\u0103ng nh\u1EADp")), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      type: "submit",
      variant: "primary"
    }, "\u0110\u0103ng nh\u1EADp"))), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      mt: "lg"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      color: "grey60",
      small: true
    }, "Li\xEAn h\u1EC7 qu\u1EA3n tr\u1ECB h\u1EC7 th\u1ED1ng n\u1EBFu b\u1EA1n kh\xF4ng th\u1EC3 \u0111\u0103ng nh\u1EADp."))));
  };

  const renderValue = val => {
    if (val === null || val === undefined) return /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, "-");
    if (typeof val === 'object') return /*#__PURE__*/React__default.default.createElement("pre", {
      style: {
        whiteSpace: 'pre-wrap',
        margin: 0
      }
    }, JSON.stringify(val, null, 2));
    return /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, String(val));
  };

  // Format date/time for display (Vietnam locale)
  const formatDate = val => {
    if (val === null || val === undefined) return val;
    try {
      let d;
      if (val instanceof Date) d = val;else if (typeof val === 'number') d = new Date(val);else if (typeof val === 'string') {
        // try to parse ISO-like strings or epoch
        const n = Number(val);
        d = !isNaN(n) ? new Date(n) : new Date(val);
      } else return val;
      if (!d || isNaN(d.getTime())) return val;
      return new Intl.DateTimeFormat('vi-VN', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      }).format(d);
    } catch (e) {
      return val;
    }
  };
  const isNumberLike = v => typeof v === 'number' || !isNaN(Number(v)) && v !== '';
  const Delta = ({
    prev,
    next
  }) => {
    if (!isNumberLike(prev) || !isNumberLike(next)) return null;
    const p = Number(prev);
    const n = Number(next);
    const diff = Math.round((n - p) * 100) / 100;
    const sign = diff > 0 ? '+' : '';
    const color = diff > 0 ? '#0f5132' : diff < 0 ? '#842029' : '#6c757d';
    return /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
      style: {
        color,
        fontWeight: 600,
        marginLeft: 8
      }
    }, `(${sign}${diff})`);
  };
  const GradeHistoryDiff = props => {
    const {
      record
    } = props;

    // Map internal field keys to Vietnamese labels for better readability
    const fieldLabels = {
      txScore: 'ƒêi·ªÉm TX',
      dkScore: 'ƒêi·ªÉm ƒêK',
      dkScore1: 'ƒêi·ªÉm ƒêK 1',
      dkScore2: 'ƒêi·ªÉm ƒêK 2',
      dkScore3: 'ƒêi·ªÉm ƒêK 3',
      finalScore: 'ƒêi·ªÉm Thi',
      tbktScore: 'TBKT',
      tbmhScore: 'TBMH',
      letterGrade: 'X·∫øp lo·∫°i',
      isPassed: 'ƒê·∫°t',
      notes: 'Ghi ch√∫',
      studentId: 'Sinh vi√™n',
      classId: 'L·ªõp',
      subjectId: 'M√¥n h·ªçc',
      changedBy: 'Ng∆∞·ªùi thay ƒë·ªïi',
      changedByRole: 'Vai tr√≤',
      reason: 'L√Ω do',
      ipAddress: 'ƒê·ªãa ch·ªâ IP',
      userAgent: 'User-Agent',
      transactionId: 'M√£ giao d·ªãch',
      createdAt: 'Ng√†y t·∫°o',
      updatedAt: 'Ng√†y c·∫≠p nh·∫≠t',
      AcademicYear: "NƒÉm h·ªçc"
    };
    const normalizeSnapshot = val => {
      if (!val) return {};
      // AdminJS sometimes wraps values, or DB returns JSON string -> try to handle
      try {
        // If it's an AdminJS record-like wrapper
        if (val && typeof val === 'object' && val.params) return val.params;
        if (typeof val === 'string') {
          // Try parse JSON string
          try {
            return JSON.parse(val);
          } catch (e) {
            return {
              raw: val
            };
          }
        }
        if (typeof val === 'object') return val;
      } catch (e) {
        return {
          raw: String(val)
        };
      }
      return {};
    };

    // Helper: extract flattened keys like 'previousValue.txScore' into object
    const extractFlattened = (params, prefix) => {
      if (!params || typeof params !== 'object') return null;
      const obj = {};
      let found = false;
      for (const k of Object.keys(params)) {
        if (k.startsWith(prefix + '.')) {
          found = true;
          const subKey = k.slice(prefix.length + 1);
          obj[subKey] = params[k];
        }
      }
      return found ? obj : null;
    };

    // Prefer flattened fields if present (AdminJS may flatten JSON into record.params)
    const flattenedPrev = extractFlattened(record?.params, 'previousValue');
    const flattenedNext = extractFlattened(record?.params, 'newValue');
    const prev = flattenedPrev || normalizeSnapshot(record?.params?.previousValue || record?.previousValue || record?.params?.previous || null);
    const next = flattenedNext || normalizeSnapshot(record?.params?.newValue || record?.newValue || record?.params?.next || null);
    const keys = Array.from(new Set([...(prev && typeof prev === 'object' ? Object.keys(prev) : []), ...(next && typeof next === 'object' ? Object.keys(next) : [])]));
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.H5, null, "So s\xE1nh gi\xE1 tr\u1ECB tr\u01B0\u1EDBc v\xE0 sau"), keys.length === 0 ? /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, "Kh\xF4ng c\xF3 snapshot tr\u01B0\u1EDBc/sau \u0111\u1EC3 hi\u1EC3n th\u1ECB."), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      marginTop: "default"
    }, /*#__PURE__*/React__default.default.createElement(designSystem.H5, null, "Th\xF4ng tin th\xF4 (debug)"), /*#__PURE__*/React__default.default.createElement("pre", {
      style: {
        whiteSpace: 'pre-wrap',
        background: '#f7f7f9',
        padding: 10,
        borderRadius: 4
      }
    }, JSON.stringify(record?.params || record || {}, null, 2)))) : /*#__PURE__*/React__default.default.createElement(designSystem.Table, null, /*#__PURE__*/React__default.default.createElement("thead", null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "Tr\u01B0\u1EDDng")), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "Gi\xE1 tr\u1ECB tr\u01B0\u1EDBc")), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "Gi\xE1 tr\u1ECB sau")))), /*#__PURE__*/React__default.default.createElement("tbody", null, keys.map(key => {
      const p = prev ? prev[key] : undefined;
      const n = next ? next[key] : undefined;
      const changed = JSON.stringify(p) !== JSON.stringify(n);
      const prevStyle = changed ? {
        background: '#fff1f0'
      } : {};
      const newStyle = changed ? {
        background: '#f0fff4'
      } : {};
      // Icon: ‚ñ≤ for increase, ‚ñº for decrease, ‚ûú for change
      let icon = null;
      if (isNumberLike(p) && isNumberLike(n)) {
        const diff = Number(n) - Number(p);
        if (diff > 0) icon = /*#__PURE__*/React__default.default.createElement("span", {
          style: {
            color: '#0f5132',
            marginLeft: 8
          }
        }, "\u25B2");else if (diff < 0) icon = /*#__PURE__*/React__default.default.createElement("span", {
          style: {
            color: '#842029',
            marginLeft: 8
          }
        }, "\u25BC");
      } else if (changed) {
        icon = /*#__PURE__*/React__default.default.createElement("span", {
          style: {
            color: '#0d6efd',
            marginLeft: 8
          }
        }, "\u279C");
      }

      // If the key looks like an ID field, try to resolve a friendly label from record.params
      const tryResolveLabel = (fieldKey, value) => {
        if (value === null || value === undefined) return value;
        // common pattern: studentId -> studentName, classId -> className, subjectId -> subjectName, changedBy -> changedByName
        const mapping = {
          studentId: 'studentName',
          classId: 'className',
          subjectId: 'subjectName',
          changedBy: 'changedByName'
        };
        const mapKey = mapping[fieldKey] || (fieldKey.endsWith('Id') ? fieldKey.slice(0, -2) + 'Name' : null);
        if (mapKey && record?.params && record.params[mapKey]) return record.params[mapKey];
        return value;
      };
      let displayP = tryResolveLabel(key, p);
      let displayN = tryResolveLabel(key, n);

      // Format date fields
      if (key === 'createdAt' || key === 'updatedAt' || key.toLowerCase().includes('date')) {
        displayP = displayP ? formatDate(displayP) : displayP;
        displayN = displayN ? formatDate(displayN) : displayN;
      }
      const displayKey = fieldLabels[key] || (key === 'id' ? 'ID' : key.replace(/([A-Z])/g, ' $1').replace(/^./, s => s.toUpperCase()));
      return /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, {
        key: key
      }, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, /*#__PURE__*/React__default.default.createElement("strong", null, displayKey))), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
        style: prevStyle
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        display: "flex",
        alignItems: "center"
      }, renderValue(displayP), /*#__PURE__*/React__default.default.createElement(Delta, {
        prev: p,
        next: n
      }))), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, {
        style: newStyle
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        display: "flex",
        alignItems: "center"
      }, renderValue(displayN), icon)));
    }))));
  };

  const StudentGradeHistoryTab = props => {
    const {
      record
    } = props;
    const studentId = record?.params?.id || record?.id || record?.params?.studentId;
    const [loading, setLoading] = React.useState(true);
    const [rows, setRows] = React.useState([]);
    const [error, setError] = React.useState(null);
    React.useEffect(() => {
      if (!studentId) return;
      setLoading(true);
      (async () => {
        try {
          const resp = await fetch(`/api/grade-history?studentId=${studentId}&limit=50`, {
            credentials: 'same-origin'
          });
          const json = await resp.json();
          if (json && json.success) setRows(json.data || []);else setError('Kh√¥ng t·∫£i ƒë∆∞·ª£c l·ªãch s·ª≠');
        } catch (e) {
          setError(e.message || String(e));
        } finally {
          setLoading(false);
        }
      })();
    }, [studentId]);
    const handleView = async id => {
      // open a new AdminJS modal by navigating to the GradeHistory resource show page
      window.location.href = `/admin/resources/GradeHistory/records/${id}/show`;
    };
    if (!studentId) return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, "Kh\xF4ng x\xE1c \u0111\u1ECBnh sinh vi\xEAn");
    if (loading) return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, "\u0110ang t\u1EA3i...");
    if (error) return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, error);
    return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
      marginBottom: "default"
    }, "L\u1ECBch s\u1EED s\u1EEDa \u0111i\u1EC3m c\u1EE7a sinh vi\xEAn"), /*#__PURE__*/React__default.default.createElement(designSystem.Table, null, /*#__PURE__*/React__default.default.createElement("thead", null, /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, null, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "Th\u1EDDi gian")), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "Lo\u1EA1i")), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "Ng\u01B0\u1EDDi thay \u0111\u1ED5i")), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "L\u1EDBp/M\xF4n")), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "H\xE0nh \u0111\u1ED9ng")))), /*#__PURE__*/React__default.default.createElement("tbody", null, rows.map(r => /*#__PURE__*/React__default.default.createElement(designSystem.TableRow, {
      key: r.id
    }, /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, new Date(r.createdAt).toLocaleString())), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, r.changeType)), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, r.changedByName || r.changedBy || r.changedByRole || '-')), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Text, null, r.classId || r.subjectId || '-')), /*#__PURE__*/React__default.default.createElement(designSystem.TableCell, null, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
      size: "sm",
      variant: "primary",
      onClick: () => handleView(r.id)
    }, "Xem"), ' '))))));
  };

  AdminJS.UserComponents = {};
  AdminJS.UserComponents.GradeEntryPage = GradeEntryPage;
  AdminJS.UserComponents.AdminRetakeManagement = AdminRetakeManagement;
  AdminJS.UserComponents.StudentImportComponent = StudentImportComponent;
  AdminJS.UserComponents.BulkEnrollmentComponent = BulkEnrollmentComponent;
  AdminJS.UserComponents.StudentTranscript = StudentTranscriptComponent;
  AdminJS.UserComponents.StudentTranscriptComponent = StudentRecordTranscriptComponent;
  AdminJS.UserComponents.DateShowDDMMYYYY = DateShowDDMMYYYY;
  AdminJS.UserComponents.DatePickerFlatpickr = DatePickerFlatpickr;
  AdminJS.UserComponents.ManagedClassesMultiSelect = ManagedClassesMultiSelect;
  AdminJS.UserComponents.AdminDashboard = AdminDashboard;
  AdminJS.UserComponents.CustomAdminLogin = CustomAdminLogin;
  AdminJS.UserComponents.GradeHistoryDiff = GradeHistoryDiff;
  AdminJS.UserComponents.StudentGradeHistoryTab = StudentGradeHistoryTab;
  AdminJS.UserComponents.Login = CustomAdminLogin;

})(React, AdminJS, AdminJSDesignSystem);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
