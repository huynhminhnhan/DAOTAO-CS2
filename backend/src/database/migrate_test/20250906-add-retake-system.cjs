'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    const transaction = await queryInterface.sequelize.transaction();
    
    try {
      console.log('üîÑ Starting retake system migration...');
      
      // 1. Th√™m c√°c tr∆∞·ªùng m·ªõi v√†o b·∫£ng grades
      console.log('üìù Adding new columns to grades table...');
      
      // Ki·ªÉm tra xem c·ªôt ƒë√£ t·ªìn t·∫°i ch∆∞a tr∆∞·ªõc khi th√™m
      const gradesTableInfo = await queryInterface.describeTable('Grades');
      
      if (!gradesTableInfo.attempt_number) {
        await queryInterface.addColumn('Grades', 'attempt_number', {
          type: Sequelize.INTEGER,
          defaultValue: 1,
          allowNull: false,
          comment: 'L·∫ßn th·ª© m·∫•y (1=l·∫ßn ƒë·∫ßu, 2=thi l·∫°i, 3=h·ªçc l·∫°i l·∫ßn 1...)'
        }, { transaction });
      }
      
      if (!gradesTableInfo.is_retake) {
        await queryInterface.addColumn('Grades', 'is_retake', {
          type: Sequelize.BOOLEAN,
          defaultValue: false,
          allowNull: false,
          comment: 'C√≥ ph·∫£i l√† ƒëi·ªÉm t·ª´ thi l·∫°i/h·ªçc l·∫°i kh√¥ng'
        }, { transaction });
      }
      
      if (!gradesTableInfo.retake_type) {
        await queryInterface.addColumn('Grades', 'retake_type', {
          type: Sequelize.ENUM('RETAKE_EXAM', 'RETAKE_COURSE'),
          allowNull: true,
          comment: 'Lo·∫°i thi l·∫°i: RETAKE_EXAM (thi l·∫°i), RETAKE_COURSE (h·ªçc l·∫°i)'
        }, { transaction });
      }
      
      if (!gradesTableInfo.retake_reason) {
        await queryInterface.addColumn('Grades', 'retake_reason', {
          type: Sequelize.TEXT,
          allowNull: true,
          comment: 'L√Ω do ph·∫£i thi l·∫°i/h·ªçc l·∫°i'
        }, { transaction });
      }

      // 2. T·∫°o b·∫£ng grade_retakes
      console.log('üìã Creating grade_retakes table...');
      
      await queryInterface.createTable('GradeRetakes', {
        id: {
          type: Sequelize.INTEGER,
          primaryKey: true,
          autoIncrement: true,
          comment: 'ID t·ª± ƒë·ªông tƒÉng'
        },
        original_grade_id: {
          type: Sequelize.INTEGER,
          allowNull: false,
          comment: 'Tham chi·∫øu ƒë·∫øn grades.id g·ªëc',
          references: {
            model: 'Grades',
            key: 'id'
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE'
        },
        student_id: {
          type: Sequelize.INTEGER,
          allowNull: false,
          comment: 'ID sinh vi√™n',
          references: {
            model: 'Students',
            key: 'id'
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE'
        },
        subject_id: {
          type: Sequelize.INTEGER,
          allowNull: false,
          comment: 'ID m√¥n h·ªçc',
          references: {
            model: 'Subjects',
            key: 'id'
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE'
        },
        enrollment_id: {
          type: Sequelize.INTEGER,
          allowNull: false,
          comment: 'ID ƒëƒÉng k√Ω h·ªçc',
          references: {
            model: 'Enrollments',
            key: 'enrollment_id'
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE'
        },
        
        // Th√¥ng tin l·∫ßn thi l·∫°i/h·ªçc l·∫°i
        retake_type: {
          type: Sequelize.ENUM('RETAKE_EXAM', 'RETAKE_COURSE'),
          allowNull: false,
          comment: 'Lo·∫°i: RETAKE_EXAM (thi l·∫°i ƒëi·ªÉm thi), RETAKE_COURSE (h·ªçc l·∫°i to√†n b·ªô)'
        },
        attempt_number: {
          type: Sequelize.INTEGER,
          allowNull: false,
          comment: 'L·∫ßn th·ª© m·∫•y (2, 3, 4...)'
        },
        
        // ƒêi·ªÉm c·ªßa l·∫ßn thi l·∫°i/h·ªçc l·∫°i n√†y
        txScore: {
          type: Sequelize.JSON,
          allowNull: true,
          comment: 'ƒêi·ªÉm TX (ch·ªâ c√≥ khi h·ªçc l·∫°i - RETAKE_COURSE)'
        },
        dkScore: {
          type: Sequelize.JSON,
          allowNull: true,
          comment: 'ƒêi·ªÉm DK (ch·ªâ c√≥ khi h·ªçc l·∫°i - RETAKE_COURSE)'
        },
        finalScore: {
          type: Sequelize.DECIMAL(4, 2),
          allowNull: true,
          comment: 'ƒêi·ªÉm thi l·∫°i',
          validate: {
            min: 0,
            max: 10
          }
        },
        tbktScore: {
          type: Sequelize.DECIMAL(4, 2),
          allowNull: true,
          comment: 'TBKT (copy t·ª´ l·∫ßn tr∆∞·ªõc n·∫øu RETAKE_EXAM)',
          validate: {
            min: 0,
            max: 10
          }
        },
        tbmhScore: {
          type: Sequelize.DECIMAL(4, 2),
          allowNull: true,
          comment: 'TBMH m·ªõi t√≠nh',
          validate: {
            min: 0,
            max: 10
          }
        },
        
        // K·∫øt qu·∫£ v√† metadata
        result_status: {
          type: Sequelize.ENUM('PASS', 'FAIL_EXAM', 'FAIL_TBKT', 'PENDING'),
          allowNull: false,
          defaultValue: 'PENDING',
          comment: 'K·∫øt qu·∫£ l·∫ßn thi l·∫°i/h·ªçc l·∫°i n√†y'
        },
        is_current: {
          type: Sequelize.BOOLEAN,
          defaultValue: false,
          comment: 'C√≥ ph·∫£i ƒëi·ªÉm hi·ªán t·∫°i c√≥ hi·ªáu l·ª±c kh√¥ng'
        },
        retake_reason: {
          type: Sequelize.TEXT,
          allowNull: true,
          comment: 'L√Ω do thi l·∫°i: "ƒêi·ªÉm thi = 4.5 < 5", "TBKT = 4.2 < 5"'
        },
        
        // Th√¥ng tin h·ªçc k·ª≥
        semester: {
          type: Sequelize.STRING(10),
          allowNull: false,
          comment: 'H·ªçc k·ª≥ thi l·∫°i (HK1, HK2, HK3)'
        },
        academic_year: {
          type: Sequelize.STRING(10),
          allowNull: false,
          comment: 'NƒÉm h·ªçc thi l·∫°i (VD: 2024-25)'
        },
        
        // Timestamps
        created_at: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
          comment: 'Th·ªùi gian t·∫°o record thi l·∫°i'
        },
        updated_at: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'),
          comment: 'Th·ªùi gian c·∫≠p nh·∫≠t cu·ªëi'
        }
      }, { 
        transaction,
        comment: 'B·∫£ng l∆∞u l·ªãch s·ª≠ thi l·∫°i v√† h·ªçc l·∫°i c·ªßa sinh vi√™n'
      });

      // 3. T·∫°o c√°c index ƒë·ªÉ t·ªëi ∆∞u performance
      console.log('üîç Creating indexes...');
      
      await queryInterface.addIndex('GradeRetakes', {
        fields: ['student_id', 'subject_id'],
        name: 'idx_grade_retakes_student_subject',
        transaction
      });
      
      await queryInterface.addIndex('GradeRetakes', {
        fields: ['original_grade_id'],
        name: 'idx_grade_retakes_original_grade',
        transaction
      });
      
      await queryInterface.addIndex('GradeRetakes', {
        fields: ['retake_type', 'result_status'],
        name: 'idx_grade_retakes_type_status',
        transaction
      });
      
      await queryInterface.addIndex('GradeRetakes', {
        fields: ['is_current'],
        name: 'idx_grade_retakes_is_current',
        transaction
      });

      // 4. C·∫≠p nh·∫≠t d·ªØ li·ªáu hi·ªán t·∫°i (set attempt_number = 1 cho t·∫•t c·∫£ records hi·ªán c√≥)
      console.log('üîÑ Updating existing grade records...');
      
      await queryInterface.sequelize.query(
        `UPDATE Grades SET 
         attempt_number = 1, 
         is_retake = false, 
         retake_type = NULL 
         WHERE attempt_number IS NULL OR attempt_number = 0`,
        { transaction }
      );

      await transaction.commit();
      console.log('‚úÖ Retake system migration completed successfully!');
      
    } catch (error) {
      await transaction.rollback();
      console.error('‚ùå Migration failed:', error);
      throw error;
    }
  },

  down: async (queryInterface, Sequelize) => {
    const transaction = await queryInterface.sequelize.transaction();
    
    try {
      console.log('üîÑ Reverting retake system migration...');
      
      // 1. X√≥a b·∫£ng grade_retakes
      console.log('üóëÔ∏è Dropping GradeRetakes table...');
      await queryInterface.dropTable('GradeRetakes', { transaction });
      
      // 2. X√≥a c√°c c·ªôt ƒë√£ th√™m v√†o b·∫£ng grades
      console.log('üóëÔ∏è Removing columns from Grades table...');
      
      const gradesTableInfo = await queryInterface.describeTable('Grades');
      
      if (gradesTableInfo.retake_reason) {
        await queryInterface.removeColumn('Grades', 'retake_reason', { transaction });
      }
      
      if (gradesTableInfo.retake_type) {
        await queryInterface.removeColumn('Grades', 'retake_type', { transaction });
      }
      
      if (gradesTableInfo.is_retake) {
        await queryInterface.removeColumn('Grades', 'is_retake', { transaction });
      }
      
      if (gradesTableInfo.attempt_number) {
        await queryInterface.removeColumn('Grades', 'attempt_number', { transaction });
      }

      await transaction.commit();
      console.log('‚úÖ Migration rollback completed successfully!');
      
    } catch (error) {
      await transaction.rollback();
      console.error('‚ùå Migration rollback failed:', error);
      throw error;
    }
  }
};
